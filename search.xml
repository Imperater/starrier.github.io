<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Actor 模型简介</title>
    <url>/blogs/actor-introduce.html</url>
    <content><![CDATA[<h1 id="Actor-模型简介"><a href="#Actor-模型简介" class="headerlink" title="Actor 模型简介"></a>Actor 模型简介</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>Actor 模型 = 数据 + 行为 + 消息</p>
<p>Actor 是单线程模型，所以 Actor 的内部数据及状态只能由自身进行修改。类似于 Redis 。</p>
<p>一个 Actor 向另一个 Actor 发送消息时，会将消息发送到目标 Actor 的 mailbox 中，目标 Actor 会从 mailbox 中选取数据进行消费。</p>
]]></content>
      <tags>
        <tag>actor</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习 - 激活函数</title>
    <url>/blogs/ai-activation-function.html</url>
    <content><![CDATA[<h1 id="机器学习-激活函数"><a href="#机器学习-激活函数" class="headerlink" title="机器学习 - 激活函数"></a>机器学习 - 激活函数</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>ai</tag>
        <tag>dp</tag>
        <tag>activation-function</tag>
      </tags>
  </entry>
  <entry>
    <title>AI 常用名词解释</title>
    <url>/blogs/ai-common-vocabulary.html</url>
    <content><![CDATA[<h1 id="AI-常用名词解释"><a href="#AI-常用名词解释" class="headerlink" title="AI 常用名词解释"></a>AI 常用名词解释</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习 - 有监督学习</title>
    <url>/blogs/ai-supervised-learning.html</url>
    <content><![CDATA[<h1 id="机器学习-有监督学习"><a href="#机器学习-有监督学习" class="headerlink" title="机器学习 - 有监督学习"></a>机器学习 - 有监督学习</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>ai</tag>
        <tag>machine learning</tag>
        <tag>ml</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习 SVM 支持向量机</title>
    <url>/blogs/ai-svm.html</url>
    <content><![CDATA[<h1 id="机器学习-SVM-支持向量机"><a href="#机器学习-SVM-支持向量机" class="headerlink" title="机器学习 SVM 支持向量机"></a>机器学习 SVM 支持向量机</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>ai</tag>
        <tag>machine learning</tag>
        <tag>SVM</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习 目标函数简介</title>
    <url>/blogs/ai-target-function.html</url>
    <content><![CDATA[<h1 id="机器学习-目标函数简介"><a href="#机器学习-目标函数简介" class="headerlink" title="机器学习 目标函数简介"></a>机器学习 目标函数简介</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>machine learning</tag>
        <tag>target function</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 SpringBoot 注解 @ShellMethod</title>
    <url>/blogs/annotation-shellmethod.html</url>
    <content><![CDATA[<h1 id="深入理解-SpringBoot-注解-ShellMethod"><a href="#深入理解-SpringBoot-注解-ShellMethod" class="headerlink" title="深入理解 SpringBoot 注解 @ShellMethod"></a>深入理解 SpringBoot 注解 @ShellMethod</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p><code>@ShellMethod</code> 将一个方法声明为 Shell 命令。默认情况下：</p>
<ol>
<li>方法名为命令名称</li>
<li>类名称为 <code>shell</code> 所属分组</li>
<li>springshell 默认将驼峰方法名用 <code>-</code> 连接符替换<blockquote>
<p>caculateSum -&gt; caculate-sum</p>
</blockquote>
</li>
</ol>
<h2 id="一-定义-shell-属性"><a href="#一-定义-shell-属性" class="headerlink" title="一. 定义 shell 属性"></a>一. 定义 shell 属性</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ShellMethod</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"caculate two value sum"</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"add"</span><span class="token punctuation">,</span><span class="token string">"sum"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> group <span class="token operator">=</span> <span class="token string">"group1"</span><span class="token punctuation">,</span> prefix <span class="token operator">=</span> <span class="token string">"-"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<h2 id="二-查看分组名"><a href="#二-查看分组名" class="headerlink" title="二. 查看分组名"></a>二. 查看分组名</h2><p>在终端，使用  help 命令，查看更多信息。</p>
<pre class=" language-shell"><code class="language-shell">help</code></pre>
<h2 id="三-方法调用"><a href="#三-方法调用" class="headerlink" title="三. 方法调用"></a>三. 方法调用</h2><pre class=" language-shell"><code class="language-shell">shell:>add 2 1
3
shell:>sum 2 1
3</code></pre>
<p>带参调用</p>
<pre class=" language-shell"><code class="language-shell">shell:>add -a 2 -b 1
3</code></pre>
]]></content>
      <tags>
        <tag>spring-boot</tag>
        <tag>shell-method</tag>
        <tag>annotation</tag>
      </tags>
  </entry>
  <entry>
    <title>books-gitbook-developer</title>
    <url>/blogs/books-gitbook-developer.html</url>
    <content><![CDATA[<h1 id="books-gitbook-developer"><a href="#books-gitbook-developer" class="headerlink" title="books-gitbook-developer"></a>books-gitbook-developer</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢 ~~</p>
<p><a href="https://developer.gitbook.com/">GitBook Developer</a></p>
<p><a href="https://segmentfault.com/a/1190000005859901">https://segmentfault.com/a/1190000005859901</a></p>
]]></content>
      <tags>
        <tag>GitBook</tag>
      </tags>
  </entry>
  <entry>
    <title>books-webpack</title>
    <url>/blogs/books-webpack.html</url>
    <content><![CDATA[<h1 id="books-webpack"><a href="#books-webpack" class="headerlink" title="books-webpack"></a>books-webpack</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢 ~~</p>
<h1 id="Webpack-GitBook-书籍地址"><a href="#Webpack-GitBook-书籍地址" class="headerlink" title="Webpack GitBook 书籍地址"></a>Webpack GitBook 书籍地址</h1><p><a href="http://webpack.wuhaolin.cn/">GitBook - Webpack</a></p>
]]></content>
      <tags>
        <tag>books</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub 集成 Travis-CI Maven 项目</title>
    <url>/blogs/ci-travis.html</url>
    <content><![CDATA[<h1 id="GitHub-集成-Travis-CI-Maven-项目"><a href="#GitHub-集成-Travis-CI-Maven-项目" class="headerlink" title="GitHub 集成 Travis-CI Maven 项目"></a>GitHub 集成 Travis-CI Maven 项目</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p><code>GitHub</code> 开源项目的集成，可以使用的工具很多，以下介绍 <code>GitHub</code> 与 <code>Travis-CI</code> 的集成。 </p>
<p>目前，<code>Travis-CI</code> 存在两个域名地址，<code>travis-ci.org</code> 与 <code>travis-ci.com</code>。<code>.org</code> 即将被弃用，目前已经存在的项目可以无缝迁移至 <code>.com</code>。迁移完成后，之前的历史记录不会被迁移，新迁移的项目，将会在该项目迁移后的第一次指定集成分支提交代码后，进行集成工作。</p>
<h2 id="一-新建-travis-yml"><a href="#一-新建-travis-yml" class="headerlink" title="一. 新建 .travis.yml"></a>一. 新建 <code>.travis.yml</code></h2><p>在需要使用 travis 的项目的根目录，新建 <code>.travsi.yml</code> 文件。</p>
<p><code>Travsi</code> 可以与多种开发语言及多种开发工具进行配合使用。具体使用方式，开参考官方文档。以下简介几种集成。</p>
<h3 id="1-Maven"><a href="#1-Maven" class="headerlink" title="1. Maven"></a>1. Maven</h3><pre class=" language-yml"><code class="language-yml">language: java

jdk:
  - openjdk8

cache:
  directories:
    - '$HOME/.m2/repository'

before_install:

script:
  - mvn clean package -DskipTests=true
  ## Codecov CI
  - mvn cobertura:cobertura

after_success:
  ## Codecov CI
  - bash <(curl -s https://codecov.io/bash)
  - cd ./target
  - git init
  - git config user.name "Starrier"
  - git config user.email "starrier@starrier.com"
  - git add .
  - git commit -m "travis-ci"
  - git push --force --quiet "https://$&#123;GITHUB_TOKEN&#125;@$&#123;GH_REF&#125;" master:master

## 指定需要进行集成的代码分支

branches:
  only:
    - master

## 环境配置，可以设置在  travis-ci 的界面中，作为环境变量植入
env:
  global:
    - GH_REF=https://github.com/Starrier/commons.git</code></pre>
]]></content>
      <tags>
        <tag>github</tag>
        <tag>travis</tag>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Guava - MultiSet 原理与实战</title>
    <url>/blogs/commons-utils-guava-multiset.html</url>
    <content><![CDATA[<h1 id="Guava-MultiSet-原理与实战"><a href="#Guava-MultiSet-原理与实战" class="headerlink" title="Guava - MultiSet 原理与实战"></a>Guava - MultiSet 原理与实战</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>函数签名：</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GwtCompatible</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Multiset</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">Collection</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p><code>MultiSet</code> 可以跟踪每种对象的数量，所以可以用来进行数字统计。</p>
<p>常规的 <code>Java</code> 方法：</p>
<pre class=" language-java"><code class="language-java"> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

 List<span class="token operator">&lt;</span>String<span class="token operator">></span> wordList <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"the"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token keyword">for</span> <span class="token punctuation">(</span>String word <span class="token operator">:</span> wordList<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      Integer count <span class="token operator">=</span>  map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>
      map1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token punctuation">(</span>count <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span>count <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    Integer count <span class="token operator">=</span> map1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"the"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1</span></code></pre>
<p>如果使用 <code>MultiSet</code>：</p>
]]></content>
      <tags>
        <tag>guava</tag>
        <tag>multiset</tag>
      </tags>
  </entry>
  <entry>
    <title>datastruce-spatial-index-geohash</title>
    <url>/blogs/datastruct-spatial-index-geohash.html</url>
    <content><![CDATA[<h1 id="空间索引-GeoHash-数据结构"><a href="#空间索引-GeoHash-数据结构" class="headerlink" title="空间索引 - GeoHash 数据结构"></a>空间索引 - GeoHash 数据结构</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>datastruct</tag>
        <tag>数据结构</tag>
        <tag>GeoHash</tag>
      </tags>
  </entry>
  <entry>
    <title>空间索引 - Quard-Tree 四叉树数据结构</title>
    <url>/blogs/datastruct-spatial-index-quad-tree.html</url>
    <content><![CDATA[<h1 id="空间索引-Quard-Tree-四叉树数据结构"><a href="#空间索引-Quard-Tree-四叉树数据结构" class="headerlink" title="空间索引 - Quard-Tree 四叉树数据结构"></a>空间索引 - Quard-Tree 四叉树数据结构</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>空间索引</tag>
        <tag>QuardTree</tag>
        <tag>四叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>空间索引 - R-Tree 四叉树数据结构</title>
    <url>/blogs/datastruct-spatial-index-r-tree.html</url>
    <content><![CDATA[<h1 id="空间索引-R-Tree-四叉树数据结构"><a href="#空间索引-R-Tree-四叉树数据结构" class="headerlink" title="空间索引 - R-Tree 四叉树数据结构"></a>空间索引 - R-Tree 四叉树数据结构</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>数据结构</tag>
        <tag>空间索引</tag>
        <tag>R-Tree</tag>
      </tags>
  </entry>
  <entry>
    <title>空间索引</title>
    <url>/blogs/datastruct-spatial-index.html</url>
    <content><![CDATA[<h1 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h4 id="一-概念"><a href="#一-概念" class="headerlink" title="一. 概念"></a>一. 概念</h4><p><strong>空间索引</strong>（Spatial Index）是指依据空间对象的位置和形状或空间对象之间的某种空间关系按一定的顺序排列的一种数据结构，其中包含空间对象的概要信息，如对象的标识、外接矩形及指向空间对象实体的指针。</p>
<h4 id="二-数据结构"><a href="#二-数据结构" class="headerlink" title="二. 数据结构"></a>二. 数据结构</h4><ol>
<li>GeoHash</li>
<li>R-Tree</li>
<li>Quad-Tree</li>
</ol>
]]></content>
      <tags>
        <tag>空间索引</tag>
        <tag>Spatial Index</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构 - Tire - 字典树</title>
    <url>/blogs/datastruct-tire.html</url>
    <content><![CDATA[<h1 id="数据结构-Tire-字典树"><a href="#数据结构-Tire-字典树" class="headerlink" title="数据结构 - Tire - 字典树"></a>数据结构 - Tire - 字典树</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>datastruct</tag>
        <tag>数据结构</tag>
        <tag>字典树</tag>
        <tag>tire-tree</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式 - 桥接模式 详解</title>
    <url>/blogs/design-pattern-bridge-pattern.html</url>
    <content><![CDATA[<h1 id="设计模式-桥接模式-详解"><a href="#设计模式-桥接模式-详解" class="headerlink" title="设计模式 - 桥接模式 详解"></a>设计模式 - 桥接模式 详解</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>design pattern</tag>
        <tag>bridge pattern</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式理论 2PC 详解</title>
    <url>/blogs/distribute-2pc.html</url>
    <content><![CDATA[<h1 id="分布式理论-2PC-详解"><a href="#分布式理论-2PC-详解" class="headerlink" title="分布式理论 - 2PC 详解"></a>分布式理论 - 2PC 详解</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p><strong>注意</strong></p>
<p>高并发中使用分布式事务的 2PC 协议应该遵循如下协议：</p>
<ol>
<li>能不用 2 PC 的精良不用，2PC 协议要有提交请求阶段，提交阶段，而每个阶段也要有协调器分别于多个事务参与者的应答，复杂度高，性能也受到挑战。</li>
<li>要获得事务强一致性，也要在性能和一致性上做折中，比如加上超时机制，阶段性补偿机制等。 </li>
</ol>
]]></content>
      <tags>
        <tag>distribute</tag>
        <tag>2pc</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式理论 3PC</title>
    <url>/blogs/distribute-3pc.html</url>
    <content><![CDATA[<h1 id="分布式理论-3PC"><a href="#分布式理论-3PC" class="headerlink" title="分布式理论 3PC"></a>分布式理论 3PC</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>distribute</tag>
        <tag>3pc</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式理论-CAP</title>
    <url>/blogs/distribute-cap.html</url>
    <content><![CDATA[<h2 id="分布式理论-CAP"><a href="#分布式理论-CAP" class="headerlink" title="分布式理论 - CAP"></a>分布式理论 - <code>CAP</code></h2><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p><code>CAP</code> 理论指出，对于一个分布式计算系统，不可能同时满足以下三点:</p>
<ol>
<li>一致性（Consistency）：所有节点在同一时间具有相同的数据。</li>
<li>可用性（Availability）：保证每个请求不管成功或者失败都有响应。</li>
<li>分隔容忍（Partition tolerance）：系统中任意信息的丢失或失败不会影响系统的继续运作。以实际效果来说，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区情况，就必须在 C 和 A 之间做抉择。</li>
</ol>
<p><code>CAP</code> 理论的核心是：一个分布式系统不可能同时很好地满足一致性、可用性和分区容错性这三个需求，最多只能同时满足两个。因此，根据 <code>CAP</code> 理论，可以将 <code>NoSQL</code> 数据库分成满足 <code>CA</code> 、<code>CP</code>、和 <code>AP</code> 的三类：</p>
<h3 id="Partition-tolerance"><a href="#Partition-tolerance" class="headerlink" title="Partition tolerance"></a><code>Partition tolerance</code></h3><p>即：分区容错</p>
<p>大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（Partition）。分区容错的意思是，区间通信可能失败。比如，一台服务器放在中国，另一台服务器放在美国，这就是两个区，它们之间可能无法通信。</p>
<p>一般来说，分区容错无法避免，因此可以认为 <code>CAP</code> 中的 <code>P</code> 总是成立的。<code>CAP</code> 理论告诉我们，剩下的 <code>C</code> 和 <code>A</code> 无法同时做到。</p>
<h3 id="Consistency"><a href="#Consistency" class="headerlink" title="Consistency"></a><code>Consistency</code></h3><p>即：一致性。写操作之后的读操作，必须返回该值。</p>
<h3 id="Availability"><a href="#Availability" class="headerlink" title="Availability"></a><code>Availability</code></h3><p>即：可用性。意思是只要收到用户的请求，服务器就必须给出响应。</p>
<h3 id="Consistency-和-Availability-的矛盾"><a href="#Consistency-和-Availability-的矛盾" class="headerlink" title="Consistency 和 Availability 的矛盾"></a><code>Consistency</code> 和 <code>Availability</code> 的矛盾</h3><p>一致性和可用性，为什么不能同时成立？</p>
<p>因为存在通信失败（即出现分区容错）。</p>
<h2 id="一致性与可用性的决择编辑"><a href="#一致性与可用性的决择编辑" class="headerlink" title="一致性与可用性的决择编辑"></a>一致性与可用性的决择编辑</h2><p><code>CAP</code> 理论就是说在分布式存储系统中，最多只能实现上面的两点。而由于当前的网络硬件肯定会出现延迟丢包等问题，所以分区容忍性是我们必须需要实现的。所以我们只能在一致性和可用性之间进行权衡，没有 <code>NoSQL</code> 系统能同时保证这三点。</p>
<p>对于 <code>web2.0</code> 网站来说，关系数据库的很多主要特性却往往无用武之地</p>
<p><strong>数据库事务一致性需求</strong></p>
<p>　　很多web实时系统并不要求严格的数据库事务，对读一致性的要求很低，有些场合对写一致性要求并不高。允许实现最终一致性。<br>数据库的写实时性和读实时性需求</p>
<p>　　对关系数据库来说，插入一条数据之后立刻查询，是肯定可以读出来这条数据的，但是对于很多web应用来说，并不要求这么高的实时性，比方说发一条消息之 后，过几秒乃至十几秒之后，我的订阅者才看到这条动态是完全可以接受的。<br>对复杂的SQL查询，特别是多表关联查询的需求 </p>
<p>　　任何大数据量的web系统，都非常忌讳多个大表的关联查询，以及复杂的数据分析类型的报表查询，特别是SNS类型的网站，从需求以及产品设计角 度，就避免了这种情况的产生。往往更多的只是单表的主键查询，以及单表的简单条件分页查询，SQL的功能被极大的弱化了。</p>
<h3 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h3><p>BASE 是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的简写，BASE是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的结论，是基于CAP定理逐步演化而来的，其核心思想是即使无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。接下来我们着重对BASE中的三要素进行详细讲解。</p>
<p>基本可用</p>
<p>基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性——但请注意，这绝不等价于系统不可用，以下两个就是“基本可用”的典型例子。</p>
<p>响应时间上的损失：正常情况下，一个在线搜索引擎需要0.5秒内返回给用户相应的查询结果，但由于出现异常（比如系统部分机房发生断电或断网故障），查询结果的响应时间增加到了1~2秒。<br>功能上的损失：正常情况下，在一个电子商务网站上进行购物，消费者几乎能够顺利地完成每一笔订单，但是在一些节日大促购物高峰的时候，由于消费者的购物行为激增，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面。<br>弱状态也称为软状态，和硬状态相对，是指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据听不的过程存在延时。</p>
<p>最终一致性</p>
<p>最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性</p>
<p>亚马逊首席技术官Werner Vogels在于2008年发表的一篇文章中对最终一致性进行了非常详细的介绍。他认为最终一致性时一种特殊的弱一致性：系统能够保证在没有其他新的更新操作的情况下，数据最终一定能够达到一致的状态，因此所有客户端对系统的数据访问都能够胡渠道最新的值。同时，在没有发生故障的前提下，数据达到一致状态的时间延迟，取决于网络延迟，系统负载和数据复制方案设计等因素。</p>
<p>在实际工程实践中，最终一致性存在以下五类主要变种。</p>
<p>因果一致性：</p>
<pre><code>    因果一致性是指，如果进程A在更新完某个数据项后通知了进程B，那么进程B之后对该数据项的访问都应该能够获取到进程A更新后的最新值，并且如果进程B要对该数据项进行更新操作的话，务必基于进程A更新后的最新值，即不能发生丢失更新情况。与此同时，与进程A无因果关系的进程C的数据访问则没有这样的限制。</code></pre>
<p>读己之所写：</p>
<pre><code>    读己之所写是指，进程A更新一个数据项之后，它自己总是能够访问到更新过的最新值，而不会看到旧值。也就是说，对于单个数据获取者而言，其读取到的数据一定不会比自己上次写入的值旧。因此，读己之所写也可以看作是一种特殊的因果一致性。</code></pre>
<p>会话一致性：</p>
<pre><code>    会话一致性将对系统数据的访问过程框定在了一个会话当中：系统能保证在同一个有效的会话中实现“读己之所写”的一致性，也就是说，执行更新操作之后，客户端能够在同一个会话中始终读取到该数据项的最新值。</code></pre>
<p>单调读一致性：</p>
<pre><code>    单调读一致性是指如果一个进程从系统中读取出一个数据项的某个值后，那么系统对于该进程后续的任何数据访问都不应该返回更旧的值。</code></pre>
<p>单调写一致性：</p>
<pre><code>     单调写一致性是指，一个系统需要能够保证来自同一个进程的写操作被顺序地执行。</code></pre>
<p>以上就是最终一致性的五类常见的变种，在时间系统实践中，可以将其中的若干个变种互相结合起来，以构建一个具有最终一致性的分布式系统。事实上，可以将其中的若干个变种相互结合起来，以构建一个具有最终一致性特性的分布式系统。事实上，最终一致性并不是只有那些大型分布式系统才设计的特性，许多现代的关系型数据库都采用了最终一致性模型。在现代关系型数据库中，大多都会采用同步和异步方式来实现主备数据复制技术。在同步方式中，数据的复制国耻鞥通常是更新事务的一部分，因此在事务完成后，主备数据库的数据就会达到一致。而在异步方式中，备库的更新往往存在延时，这取决于事务日志在主备数据库之间传输的时间长短，如果传输时间过长或者甚至在日志传输过程中出现异常导致无法及时将事务应用到备库上，那么狠显然，从备库中读取的的数据将是旧的，因此就出现了不一致的情况。当然，无论是采用多次重试还是认为数据订正，关系型数据库还是能搞保证最终数据达到一致——这就是系统提供最终一致性保证的经典案例。</p>
<p>总的来说，BASE理论面向的是大型高可用可扩展的分布式系统，和传统事务的ACID特性使相反的，它完全不同于ACID的强一致性模型，而是提出通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。但同时，在实际的分布式场景中，不同业务单元和组件对数据一致性的要求是不同的，因此在具体的分布式系统架构设计过程中，ACID特性与BASE理论往往又会结合在一起使用。</p>
<p>小结：<br>计算机系统从集中式向分布式的变革随着包括分布式网络、分布式事务和分布式数据一致性等在内的一系列问题与挑战，同时也催生了一大批诸如ACID、CAP和BASE等经典理论的快速发展。</p>
<p>与NoSQL的关系编辑<br>传统的关系型数据库在功能支持上通常很宽泛，从简单的键值查询，到复杂的多表联合查询再到事务机制的支持。而与之不同的是，NoSQL系统通常注重性能和扩展性，而非事务机制（事务就是强一致性的体现）[2]  。<br>　　传统的SQL数据库的事务通常都是支持ACID的强事务机制。A代表原子性，即在事务中执行多个操作是原子性的，要么事务中的操作全部执行，要么一个都不执行;C代表一致性，即保证进行事务的过程中整个数据加的状态是一致的，不会出现数据花掉的情况;I代表隔离性，即两个事务不会相互影响，覆盖彼此数据等;D表示持久化，即事务一量完成，那么数据应该是被写到安全的，持久化存储的设备上（比如磁盘）。<br>　　NoSQL系统仅提供对行级别的原子性保证，也就是说同时对同一个Key下的数据进行的两个操作，在实际执行的时候是会串行的执行，保证了每一个Key-Value对不会被破坏。<br>CAP的是什么关系<br>It states, that though its desirable to have Consistency, High-Availability and Partition-tolerance in every system, unfortunately no system can achieve all three at the same time.<br>在分布式系统的设计中，没有一种设计可以同时满足一致性，可用性，分区容错性 3个特性</p>
<p>注意：不要将弱一致性，最终一致性放到CAP理论里混为一谈（混淆概念的坑真多）<br>弱一致性，最终一致性 你可以认为和CAP的C一点关系也没有，因为CAP的C是更新操作完成后，任何节点看到的数据完全一致, 弱一致性。最终一致性本身和CAP的C一致性是违背的，所以你可以看到那些谎称自己系统同时具备CAP 3个特性是多么的可笑，可能国内更多的场景是：一个开放人员一旦走上讲台演讲，就立马转变为了营销人员，连最基本的理念也不要了。<br>这里有一篇标题很大的文章  cap-twelve-years-later-how-the-rules-have-changed ，实际上本文的changed更多的是在思考方式上，而本身CAP理论是没有changed的</p>
<p>为什么会是这样<br>我们来看一个简单的问题, 一个DB服务   搭建在两个机房（北京,广州)，两个DB实例同时提供写入和读取</p>
<ol>
<li><p>假设DB的更新操作是同时写北京和广州的DB都成功才返回成功<br> 在没有出现网络故障的时候，满足CA原则，C 即我的任何一个写入，更新操作成功并返回客户端完成后,分布式的所有节点在同一时间的数据完全一致， A 即我的读写操作都能够成功，但是当出现网络故障时，我不能同时保证CA，即P条件无法满足</p>
</li>
<li><p>假设DB的更新操作是只写本地机房成功就返回，通过binlog/oplog回放方式同步至侧边机房<br> 这种操作保证了在出现网络故障时,双边机房都是可以提供服务的，且读写操作都能成功，意味着他满足了AP ，但是它不满足C，因为更新操作返回成功后，双边机房的DB看到的数据会存在短暂不一致，且在网络故障时，不一致的时间差会很大（仅能保证最终一致性）</p>
</li>
<li><p>假设DB的更新操作是同时写北京和广州的DB都成功才返回成功且网络故障时提供降级服务<br> 降级服务，如停止写入，只提供读取功能，这样能保证数据是一致的，且网络故障时能提供服务，满足CP原则，但是他无法满足可用性原则</p>
</li>
</ol>
<p>选择权衡<br>通过上面的例子，我们得知，我们永远无法同时得到CAP这3个特性，那么我们怎么来权衡选择呢？<br>选择的关键点取决于业务场景</p>
<p>对于大多数互联网应用来说（如网易门户），因为机器数量庞大，部署节点分散，网络故障是常态，可用性是必须需要保证的，所以只有设置一致性来保证服务的AP，通常常见的高可用服务吹嘘5个9 6个9服务SLA稳定性就本都是放弃C选择AP</p>
<p>对于需要确保强一致性的场景，如银行，通常会权衡CA和CP模型，CA模型网络故障时完全不可用，CP模型具备部分可用性，实际的选择需要通过业务场景来权衡（并不是所有情况CP都好于CA，只能查看信息不能更新信息有时候从产品层面还不如直接拒绝服务）</p>
<p>延伸<br>BASE(Basically Available, Soft State, Eventual Consistency  基本可用、软状态、最终一致性) 对CAP AP理论的延伸, Redis等众多系统构建与这个理论之上<br>ACID  传统数据库常用的设计理念, ACID和BASE代表了两种截然相反的设计哲学，分处一致性-可用性分布图谱的两极。</p>
<h3 id="分布式系统的典型应用"><a href="#分布式系统的典型应用" class="headerlink" title="分布式系统的典型应用"></a>分布式系统的典型应用</h3><p>分布式系统是一个非常广泛的概念，以算法来分：</p>
<ol>
<li>以 leader 选举为主的一类算法：Paxos、viewstamp，就是现在的 zookeeper、Chuby 等工具的主体。</li>
<li>以分布式事务为主的一类，主要是二段提交，这些分布式数据库管理器及数据库都支持</li>
<li>以弱一致性为主的，主要代表是 Cassandra 的 W、R、N 可调节的一致性。</li>
<li>以租赁机制为主的，主要是一些分布式锁的概念，目前还没有看到纯粹的分布式锁的实现。</li>
<li>以失败探测为主的，主要是 Gossip 和 phi 失败探测算法，当然也包括简单的心跳。</li>
<li>以弱一致性、因果一致性为主。</li>
<li>以异步解耦为主，还有各类的 Queue。</li>
</ol>
]]></content>
      <tags>
        <tag>distribute</tag>
        <tag>CAP</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习 - 后向传播算法</title>
    <url>/blogs/dp-back-propagation.html</url>
    <content><![CDATA[<h1 id="深度学习-后向传播算法"><a href="#深度学习-后向传播算法" class="headerlink" title="深度学习 - 后向传播算法"></a>深度学习 - 后向传播算法</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>深度学习 - 前向传播算法</title>
    <url>/blogs/dp-forward-propagation.html</url>
    <content><![CDATA[<h1 id="深度学习-前向传播算法"><a href="#深度学习-前向传播算法" class="headerlink" title="深度学习 - 前向传播算法"></a>深度学习 - 前向传播算法</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>dp</tag>
        <tag>deep-learning</tag>
      </tags>
  </entry>
  <entry>
    <title>深度神经网络简介</title>
    <url>/blogs/dp-introduce.html</url>
    <content><![CDATA[<h1 id="深度神经网络简介"><a href="#深度神经网络简介" class="headerlink" title="深度神经网络简介"></a>深度神经网络简介</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<ol>
<li>深度神经网络结构：</li>
</ol>
<ul>
<li>使用激活函数实现神经网络模型的去线性化</li>
<li>使用一个或多个隐藏层使神经网路层次更深来解决复杂问题</li>
<li>使用正则化来避免过度拟合</li>
<li>使用活动平均模型使模型更健壮</li>
</ul>
]]></content>
      <tags>
        <tag>dp</tag>
        <tag>deep-learning</tag>
      </tags>
  </entry>
  <entry>
    <title>环境搭建 - Docker - Linux 环境</title>
    <url>/blogs/env-install-docker.html</url>
    <content><![CDATA[<h1 id="环境搭建-Docker-安装-Linux-环境"><a href="#环境搭建-Docker-安装-Linux-环境" class="headerlink" title="环境搭建 - Docker - 安装 - Linux 环境"></a>环境搭建 - Docker - 安装 - Linux 环境</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="1-更新安装数据源"><a href="#1-更新安装数据源" class="headerlink" title="1. 更新安装数据源"></a>1. 更新安装数据源</h2><pre class=" language-shell"><code class="language-shell">sudo yum update</code></pre>
<pre><code>sudo yum install -y yum-utils\
     device-mapper-persistent-data\
     1vm2</code></pre>
]]></content>
      <tags>
        <tag>env</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>env-install-git</title>
    <url>/blogs/env-install-git.html</url>
    <content><![CDATA[<h1 id="Centos-Git"><a href="#Centos-Git" class="headerlink" title="Centos Git"></a>Centos Git</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="检查服务器中是否存在-Git"><a href="#检查服务器中是否存在-Git" class="headerlink" title="检查服务器中是否存在 Git"></a>检查服务器中是否存在 Git</h2><p><code>rpm -qa|grep git</code></p>
<p>如果已经安装，先卸载</p>
<p><code>rpm -e --nodeps git</code> 或者 <code>rpm -e git</code></p>
<p>安装 Git</p>
<p><code>yum install git</code></p>
]]></content>
  </entry>
  <entry>
    <title>env-install-gitlab</title>
    <url>/blogs/env-install-gitlab.html</url>
    <content><![CDATA[<h1 id="环境搭建-Docker-安装-GitLab"><a href="#环境搭建-Docker-安装-GitLab" class="headerlink" title="环境搭建 - Docker - 安装 GitLab"></a>环境搭建 - Docker - 安装 GitLab</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<pre class=" language-shell"><code class="language-shell">docker run -dit \
-p 8443:443 \
-p 8080:80 \
-p 2222:22 \
-p 9090:9090 \
--name gitlab \
--restart always \
-v /home/gitlab/config:/etc/gitlab \
-v /home/gitlab/logs:/var/log/gitlab \
-v /home/gitlab/data:/var/opt/gitlab </code></pre>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 环境安装 - Centos-Mac-Windows</title>
    <url>/blogs/env-install-java-centos.html</url>
    <content><![CDATA[<h1 id="Java-环境安装"><a href="#Java-环境安装" class="headerlink" title="Java 环境安装"></a>Java 环境安装</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="特别说明-1"><a href="#特别说明-1" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<h2 id="一-Centos"><a href="#一-Centos" class="headerlink" title="一. Centos"></a>一. Centos</h2><ol>
<li>卸载系统自带的 <code>JDK</code> 版本</li>
</ol>
<ul>
<li>查找系统 <code>jdk</code></li>
</ul>
<pre class=" language-shell"><code class="language-shell">[root@rort ~]#  rpm -qa|grep java 
java-1.6.0-openjdk-1.6.0.37-1.13.9.4.el5_11
tzdata-java-2015g-1.el5</code></pre>
<ul>
<li>如果存在，则进行卸载</li>
</ul>
<pre class=" language-shell"><code class="language-shell">[root@root ~]# rpm -e --allmatches --nodeps java-1.6.0-openjdk-1.6.0.37-1.13.9.4.el5_11
[root@root ~]# rpm -e --allmatches --nodeps tzdata-java-2015g-1.el5</code></pre>
<ul>
<li>检查是否卸载干净</li>
</ul>
<pre class=" language-shell"><code class="language-shell">[root@root ~]#  rpm -qa|grep java </code></pre>
<ol start="2">
<li>查找yum下可更新的Java列表</li>
</ol>
<pre class=" language-shell"><code class="language-shell">yum -y list java*
// or
yum search jdk</code></pre>
<ol start="3">
<li>安装 <code>java</code></li>
</ol>
<pre class=" language-shell"><code class="language-shell">yum install -y java-1.8.0-openjdk.x86_64</code></pre>
<ol start="4">
<li>验证</li>
</ol>
<pre class=" language-shell"><code class="language-shell">java -version</code></pre>
<p>配置环境变量</p>
<pre class=" language-shell"><code class="language-shell">export JAVA_HOME=/usr/lib/jvm/jre-1.8.0-openjdk
export PATH=$JAVA_HOME/bin:$PATH
export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</code></pre>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>centos</tag>
        <tag>mac</tag>
        <tag>windows</tag>
        <tag>win</tag>
      </tags>
  </entry>
  <entry>
    <title>env-install-jenkins</title>
    <url>/blogs/env-install-jenkins.html</url>
    <content><![CDATA[<h1 id="环境搭建-docker-安装-jenkins"><a href="#环境搭建-docker-安装-jenkins" class="headerlink" title="环境搭建 - docker - 安装 jenkins"></a>环境搭建 - docker - 安装 jenkins</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<pre class=" language-shell"><code class="language-shell">docker run --name devops-jenkins \ 
--user=root \
-p 8080:8080 \
-p 50000:50000 \
-v /opt/data/jenkins_home:/var/jenkins_home \
-d jenkins/jenkins</code></pre>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>环境搭建 - kafka -docker</title>
    <url>/blogs/env-install-kafka.html</url>
    <content><![CDATA[<h1 id="使用-docker-搭建-kafka-环境"><a href="#使用-docker-搭建-kafka-环境" class="headerlink" title="使用 docker 搭建 kafka 环境"></a>使用 <code>docker</code> 搭建 <code>kafka</code> 环境</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一-下载镜像"><a href="#一-下载镜像" class="headerlink" title="一. 下载镜像"></a>一. 下载镜像</h2><pre class=" language-dockerfile"><code class="language-dockerfile">docker pull wurstmeister/zookeeper
docker pull wurstmeister/kafka</code></pre>
<p>kafka</p>
<h2 id="Docker-zookeeper"><a href="#Docker-zookeeper" class="headerlink" title="Docker zookeeper"></a>Docker zookeeper</h2><p>docker run -d –name zookeeper -p 2181:2181 -t zookeeper</p>
<h2 id="Docker-Kafka-创建"><a href="#Docker-Kafka-创建" class="headerlink" title="Docker Kafka 创建"></a>Docker Kafka 创建</h2><p>docker run -d –name kafka –publish 9092:9092 <br>–link zookeeper <br>–env KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 <br>–env KAFKA_ADVERTISED_HOST_NAME=127.0.0.1 <br>–env KAFKA_ADVERTISED_PORT=9092 <br>wurstmeister/kafka</p>
<h2 id="Kafka-manager"><a href="#Kafka-manager" class="headerlink" title="Kafka manager"></a>Kafka manager</h2><p>docker run -d –name kafka-manager --link zookeeper:zookeeper --link kafka:kafka -p 9001:9000 --restart=always --env ZK_HOSTS=zookeeper:2181 \sheepkiller/kafka-manager</p>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>env-install-ngnix</title>
    <url>/blogs/env-install-ngnix.html</url>
    <content><![CDATA[<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<pre class=" language-shell"><code class="language-shell"> Nginx

 docker run --name nginx -d -p 82:80 \
-v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \
 -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx</code></pre>
]]></content>
      <tags>
        <tag>docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>env-install-postgresql</title>
    <url>/blogs/env-install-postgresql.html</url>
    <content><![CDATA[<h2 id="安装-postgresql-container"><a href="#安装-postgresql-container" class="headerlink" title="安装 postgresql container"></a>安装 postgresql container</h2><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<pre class=" language-docker"><code class="language-docker">docker run <span class="token punctuation">-</span><span class="token punctuation">-</span>name gitlab<span class="token punctuation">-</span>postgresql <span class="token punctuation">-</span>d \
    <span class="token punctuation">-</span><span class="token punctuation">-</span>env <span class="token string">'DB_NAME=gitlabhq_production'</span> \
    <span class="token punctuation">-</span><span class="token punctuation">-</span>env <span class="token string">'DB_USER=gitlab'</span> <span class="token punctuation">-</span><span class="token punctuation">-</span>env <span class="token string">'DB_PASS=password'</span> \
    <span class="token punctuation">-</span><span class="token punctuation">-</span>volume /srv/docker/gitlab/postgresql<span class="token punctuation">:</span>/var/lib/postgresql \
    sameersbn/postgresql<span class="token punctuation">:</span>9.4<span class="token punctuation">-</span>12</code></pre>
]]></content>
      <tags>
        <tag>env</tag>
        <tag>docker</tag>
        <tag>postgresql</tag>
      </tags>
  </entry>
  <entry>
    <title>Git - git-checkout 深入理解与实战</title>
    <url>/blogs/git-checkout.html</url>
    <content><![CDATA[<h1 id="Git-git-checkout-深入理解与实战"><a href="#Git-git-checkout-深入理解与实战" class="headerlink" title="Git - git-checkout 深入理解与实战"></a>Git - git-checkout 深入理解与实战</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git-checkout"></a>git-checkout</h5><ol>
<li>本地从当前所在分支上创建一个新分支。</li>
</ol>
<pre class=" language-git"><code class="language-git">git chekout -b 新分支名</code></pre>
<ol start="2">
<li>拉取远程某个分支到本地：</li>
</ol>
<pre class=" language-git"><code class="language-git">git chekout -b 本地分支名 origin/远程分支名</code></pre>
<h1 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git-rebase"></a>git-rebase</h1><pre class=" language-git"><code class="language-git">git rebase &lt;basebranch> &lt;topicbranch></code></pre>
<p>git rebase origin/a</p>
<p>git am –show-current-patch</p>
<p>git 查看当前分支是从哪个分支切出来的</p>
<p><code>git reflog --date=local | grep 分支名</code></p>
<p>查看git log的图</p>
<p><code>git log --graph --all --decorate</code></p>
<p>git 添加上游仓库</p>
<p><code>git remote add upstream url</code></p>
<p><code>git fetch upstream</code></p>
<p><code>git merge upstream/master</code></p>
<h3 id="从远程分支新建分支"><a href="#从远程分支新建分支" class="headerlink" title="从远程分支新建分支"></a>从远程分支新建分支</h3><p><code>git checkout -b newBranchName origin/RemoteBranchName</code></p>
<h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><p><code>git push --delete oriign remoteBranchName</code></p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>git-checkout</tag>
        <tag>checkout</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 远程仓库设置</title>
    <url>/blogs/git-conf-repo.html</url>
    <content><![CDATA[<h1 id="Git-远程仓库设置"><a href="#Git-远程仓库设置" class="headerlink" title="Git 远程仓库设置"></a>Git 远程仓库设置</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一-切换远程仓库地址"><a href="#一-切换远程仓库地址" class="headerlink" title="一. 切换远程仓库地址"></a>一. 切换远程仓库地址</h2><h3 id="1-本地仓库暂无关联的远程仓库"><a href="#1-本地仓库暂无关联的远程仓库" class="headerlink" title="1. 本地仓库暂无关联的远程仓库"></a>1. 本地仓库暂无关联的远程仓库</h3><blockquote>
<p>更换远程仓库地址，URL为新地址ß</p>
</blockquote>
<pre class=" language-git"><code class="language-git">git remote set-url origin URL</code></pre>
<h3 id="2-本地仓库已有关联的远程仓库"><a href="#2-本地仓库已有关联的远程仓库" class="headerlink" title="2. 本地仓库已有关联的远程仓库"></a>2. 本地仓库已有关联的远程仓库</h3><h4 id="1-删除现有远程仓库"><a href="#1-删除现有远程仓库" class="headerlink" title="1. 删除现有远程仓库"></a>1. 删除现有远程仓库</h4><pre class=" language-git"><code class="language-git">git remote rm origin</code></pre>
<h4 id="2-关联远程仓库"><a href="#2-关联远程仓库" class="headerlink" title="2. 关联远程仓库"></a>2. 关联远程仓库</h4><pre class=" language-git"><code class="language-git">git remote add origin URL</code></pre>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-rebase</title>
    <url>/blogs/git-rebase.html</url>
    <content><![CDATA[<h1 id="Git-基变操作-git-rebase"><a href="#Git-基变操作-git-rebase" class="headerlink" title="Git - 基变操作 - git rebase"></a>Git - 基变操作 - git rebase</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="git-rebase-介绍"><a href="#git-rebase-介绍" class="headerlink" title="git-rebase 介绍"></a><code>git-rebase</code> 介绍</h2><h3 id="二-案例"><a href="#二-案例" class="headerlink" title="二. 案例"></a>二. 案例</h3><p>使用 <code>git-rebase</code> 清理 <code>git-commit</code> 的 <code>log</code> 日志。</p>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git - reset - 版本回退</title>
    <url>/blogs/git-rest.html</url>
    <content><![CDATA[<h1 id="使用-git-reset-进行版本"><a href="#使用-git-reset-进行版本" class="headerlink" title="使用 git-reset 进行版本"></a>使用 git-reset 进行版本</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一-git-reset"><a href="#一-git-reset" class="headerlink" title="一. git-reset"></a>一. <code>git-reset</code></h2><p>使用 git reset 时，当前分支的之前会回退到之前的某个版本，指针回退。回退的同时，可以指定</p>
<h2 id="二-git-reset-有三种模式"><a href="#二-git-reset-有三种模式" class="headerlink" title="二. git-reset 有三种模式"></a>二. <code>git-reset</code> 有三种模式</h2><ul>
<li><code>git-reset hard</code></li>
<li><code>git-reset soft</code></li>
<li><code>git-reset mixed</code></li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git-stash</title>
    <url>/blogs/git-stash.html</url>
    <content><![CDATA[<h1 id="Git-Stash-简介"><a href="#Git-Stash-简介" class="headerlink" title="Git Stash 简介"></a>Git Stash 简介</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>git 修改已经提交的 commit</p>
<p>修改最后一次已提交的 commit</p>
<p><code>git commit --amend</code></p>
<p>修改之前已提交的 commit</p>
<p><code>git rebase -i HEAD~2</code></p>
<h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><p>应用场景</p>
<ol>
<li>发现有一个类是多余的，想删掉它又担心以后需要查看它的代码，想保存它但又不想增加一个脏的提交。这时就可以考虑 <code>git stash</code>。</li>
<li>使用 git 的时候，我们往往使用分支（branch）解决任务切换问题，例如，我们往往会建一个自己的分支去修改和调试代码, 如果别人或者自己发现原有的分支上有个不得不修改的 bug，我们往往会把完成一半的代码 commit 提交到本地仓库，然后切换分支去修改 bug，改好之后再切换回来。这样的话往往 log 上会有大量不必要的记录。其实如果我们不想提交完成一半或者不完善的代码，但是却不得不去修改一个紧急 Bug，那么使用 <code>git stash</code> 就可以将你当前未提交到本地（和服务器）的代码推入到Git的栈中，这时候你的工作区间和上一次提交的内容是完全一样的，所以你可以放心的修 Bug，等到修完 Bug，提交到服务器上后，再使用 <code>git stash apply</code> 将以前一半的工作应用回来。</li>
<li>经常有这样的事情发生，当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。解决这个问题的办法就是 <code>git stash</code> 命令。储藏(stash)可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>git-workflow</title>
    <url>/blogs/git-workflow.html</url>
    <content><![CDATA[<h1 id="Different-Authority"><a href="#Different-Authority" class="headerlink" title="Different Authority"></a>Different Authority</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p> Before the read following content, I consider you hava already had the basics of Git by default. If not, be sure to familiar with it first.</p>
<ol>
<li>As a developer, that is,having the authority of the repo.</li>
<li>As a open source developer</li>
</ol>
<h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>You should checkout a new branch for your own development env. from the develop branch.</p>
<h3 id="Branch-name-regular"><a href="#Branch-name-regular" class="headerlink" title="Branch name regular:"></a>Branch name regular:</h3><h5 id="New-Branch："><a href="#New-Branch：" class="headerlink" title="New Branch："></a>New Branch：</h5><p><code>f-datatime-newFeature-developerName</code></p>
<p><strong>eg.</strong> </p>
<p><code>f-20190326-init-starrier</code></p>
<p><strong>Fix Bug</strong></p>
<p> <code>b-dataTime-projectName-developerName</code></p>
<p><strong>eg.</strong></p>
<p> <code>b-20190326-original-starrier</code></p>
<p> <strong>Note</strong></p>
<p> Whether your are developing new features or fixing bugs,make sure your commit(s) content makes sense every time.</p>
<p> Before you complete the contennt, the recommanded recommendation is to use <code>git stash</code> to temporarily store the current workspace. Otherwise, at the end of the execute <code>git push</code>, use <code>git rebase</code> or <code>git cherry-pick</code> to modify the commit record. Make sure the cleanliness of the project’s commit.</p>
<h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p> Before you PR(pull request), please fork your own version repo. When the new feature or modified content of your request has been confirmed, execute the PR finally.</p>
]]></content>
  </entry>
  <entry>
    <title>github-repo-transfer</title>
    <url>/blogs/github-repo-transfer.html</url>
    <content><![CDATA[<h1 id="GitHub-仓库迁移"><a href="#GitHub-仓库迁移" class="headerlink" title="GitHub 仓库迁移"></a>GitHub 仓库迁移</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
  </entry>
  <entry>
    <title>GitHub - Hexo - 网站数据分析 - Baidu</title>
    <url>/blogs/hexo-analyse-baidu.html</url>
    <content><![CDATA[<h1 id="GitHub-Hexo-网站数据分析-Baidu"><a href="#GitHub-Hexo-网站数据分析-Baidu" class="headerlink" title="GitHub - Hexo - 网站数据分析 - Baidu"></a>GitHub - Hexo - 网站数据分析 - Baidu</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一-Baidu"><a href="#一-Baidu" class="headerlink" title="一. Baidu"></a>一. Baidu</h2><h3 id="1-进入-theame-文件夹，正在使用的主题"><a href="#1-进入-theame-文件夹，正在使用的主题" class="headerlink" title="1. 进入 theame 文件夹，正在使用的主题"></a>1. 进入 <code>theame</code> 文件夹，正在使用的主题</h3><p>编辑文件 <code>themes/使用的主题/_config.yml</code>,添加一行配置，</p>
<pre class=" language-yml"><code class="language-yml">baidu_tongji: true</code></pre>
<h3 id="2-新建用于分析的脚本文件"><a href="#2-新建用于分析的脚本文件" class="headerlink" title="2. 新建用于分析的脚本文件"></a>2. 新建用于分析的脚本文件</h3><p>新建 <code>themes/使用的主题/layout/_partial/baidu_tongji.ejs</code>,新增内容：</p>
<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>baidu_tongji<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span>
#申请的百度统计代码
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span></code></pre>
<p>编辑 <code>themes/使用的主题/layout/_partial/head.ejs</code> 在 <code>&lt;/head&gt;</code> 前添加 <code>&lt;%- partial(&quot;baidu_tongji&quot;) %&gt;</code> 重新生产部署站点即可。</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>CI/CD</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-function</title>
    <url>/blogs/hexo-function.html</url>
    <content><![CDATA[<h1 id="Hexo-功能启用"><a href="#Hexo-功能启用" class="headerlink" title="Hexo 功能启用"></a>Hexo 功能启用</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> stripe_code_line_num <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 去除代码</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/&lt;figure class="highlight.*?&lt;\/figure>/ig</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> stripe <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 去除html标签</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(&lt;([^>]+)>)/ig</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> minify <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 压缩成一行</span>
    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\n/g</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/\s+/g</span><span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>locals<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">;</span>
  <span class="token keyword">var</span> database <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./database'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>locals<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  database<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    element<span class="token punctuation">.</span>content <span class="token operator">=</span> <span class="token function">minify</span><span class="token punctuation">(</span><span class="token function">stripe</span><span class="token punctuation">(</span><span class="token function">stripe_code_line_num</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> xml <span class="token operator">=</span> searchTmpl<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    articles<span class="token punctuation">:</span> database<span class="token punctuation">,</span>
    config  <span class="token punctuation">:</span> config<span class="token punctuation">.</span>search
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    path<span class="token punctuation">:</span> config<span class="token punctuation">.</span>search<span class="token punctuation">.</span>path<span class="token punctuation">,</span>
    data<span class="token punctuation">:</span> xml
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-seo 优化</title>
    <url>/blogs/hexo-seo.html</url>
    <content><![CDATA[<h1 id="Hexo-SEO-优化"><a href="#Hexo-SEO-优化" class="headerlink" title="Hexo SEO  优化"></a>Hexo SEO  优化</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一"><a href="#一" class="headerlink" title="一."></a>一.</h2><h2 id="二-nofollow-标签"><a href="#二-nofollow-标签" class="headerlink" title="二. nofollow 标签"></a>二. <code>nofollow</code> 标签</h2><h3 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h3><h4 id="1-npm"><a href="#1-npm" class="headerlink" title="1). npm"></a>1). npm</h4><pre class=" language-shell"><code class="language-shell">npm i hexo-filter-nofollow --save</code></pre>
<h4 id="2-yarn"><a href="#2-yarn" class="headerlink" title="2). yarn"></a>2). yarn</h4><pre class=" language-shell"><code class="language-shell">yarn add hexo-filter-nofollow
</code></pre>
<h3 id="2-启用配置"><a href="#2-启用配置" class="headerlink" title="2. 启用配置"></a>2. 启用配置</h3><p>在根目录下的 <code>_config.yml</code> 中启用配置</p>
<pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># nofollow</span>
<span class="token key atrule">nofollow</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">field</span><span class="token punctuation">:</span> site
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'starriers.starrier.org'</span>
    <span class="token punctuation">-</span> <span class="token string">'github.com/Starrier'</span>
    <span class="token punctuation">-</span> <span class="token string">'github.com/Starriers'</span></code></pre>
<p>配置说明：</p>
<ul>
<li>enable - 是否启用插件，默认值为 true</li>
<li>field - 插件的处理范围，默认值为 site，可选 post 或 site<ul>
<li>post - 仅处理文章内容</li>
<li>site - 处理全站所有页面</li>
</ul>
</li>
<li>exclude - 域名白名单，不同的子域名视为不同的域名（如 www）<ul>
<li>starriers.starrier.org不包括 <a href="http://starriers.starrier.org/">http://starriers.starrier.org</a> 或 starriers.starrier.org</li>
</ul>
</li>
</ul>
<h2 id="三-开启压缩文件"><a href="#三-开启压缩文件" class="headerlink" title="三. 开启压缩文件"></a>三. 开启压缩文件</h2><h3 id="1-下载配置"><a href="#1-下载配置" class="headerlink" title="1. 下载配置"></a>1. 下载配置</h3><pre class=" language-shell"><code class="language-shell">npm install hexo-neat --save</code></pre>
<h3 id="2-开启配置"><a href="#2-开启配置" class="headerlink" title="2. 开启配置"></a>2. 开启配置</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># hexo - neat</span>
<span class="token comment" spellcheck="true"># 开启压缩, 博文压缩</span>
<span class="token key atrule">neat_enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
<span class="token comment" spellcheck="true"># 压缩 html</span>
<span class="token key atrule">neat_html</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>
<span class="token comment" spellcheck="true"># 压缩 css</span>
<span class="token key atrule">neat_css</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'**/*.min.css'</span>
<span class="token comment" spellcheck="true"># 压缩 js</span>
<span class="token key atrule">neat_js</span><span class="token punctuation">:</span>
  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">mangle</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
  <span class="token key atrule">output</span><span class="token punctuation">:</span>
  <span class="token key atrule">compress</span><span class="token punctuation">:</span>
  <span class="token key atrule">exclude</span><span class="token punctuation">:</span>
    <span class="token punctuation">-</span> <span class="token string">'**/*.min.js'</span>
    <span class="token punctuation">-</span> <span class="token string">'**/index.js'</span></code></pre>
<h2 id="四-hexo-search"><a href="#四-hexo-search" class="headerlink" title="四. hexo search"></a>四. hexo search</h2><pre class=" language-shell"><code class="language-shell">npm install hexo-generator-searchdb</code></pre>
<h2 id="五-hexo-keywords"><a href="#五-hexo-keywords" class="headerlink" title="五. hexo keywords"></a>五. hexo keywords</h2><p>关键字优化，为文章添加 HTML meta keywords 关键字描述</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>page<span class="token punctuation">.</span>keywords<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"keywords"</span> content<span class="token operator">=</span><span class="token string">"&lt;%= page.keywords %>,&lt;%= config.keywords %>"</span><span class="token operator">></span>
 <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>keywords<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>meta name<span class="token operator">=</span><span class="token string">"keywords"</span> content<span class="token operator">=</span><span class="token string">"&lt;%= config.keywords %>"</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span></code></pre>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>seo</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo-rss</title>
    <url>/blogs/hexo-ssr.html</url>
    <content><![CDATA[<h1 id="Hexo-RSS-文章推送"><a href="#Hexo-RSS-文章推送" class="headerlink" title="Hexo - RSS - 文章推送"></a>Hexo - RSS - 文章推送</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>使用 SSR 推送新文章给订阅者。</p>
<h2 id="一-下载-hexo-插件"><a href="#一-下载-hexo-插件" class="headerlink" title="一. 下载 hexo 插件"></a>一. 下载 hexo 插件</h2><pre class=" language-npm"><code class="language-npm">npm install hexo-generator-feed</code></pre>
<h2 id="启用"><a href="#启用" class="headerlink" title="启用"></a>启用</h2><pre class=" language-shell"><code class="language-shell">
# 配置 Rss 订阅
Plugins: 
- hexo-generate-feed</code></pre>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>rss</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Hexo 部署 github.io 静态网站 - 起源</title>
    <url>/blogs/hexo-start.html</url>
    <content><![CDATA[<h1 id="用-Hexo-部署-github-io-静态网站-起源"><a href="#用-Hexo-部署-github-io-静态网站-起源" class="headerlink" title="用 Hexo 部署 github.io 静态网站 - 起源"></a>用 Hexo 部署 github.io 静态网站 - 起源</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="特别说明-1"><a href="#特别说明-1" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <code>PR</code> 谢谢~~</p>
<h2 id="一-环境配置"><a href="#一-环境配置" class="headerlink" title="一. 环境配置"></a>一. 环境配置</h2><ol>
<li><p>安装 <code>Node.js</code> 和配置好 <code>Node.js</code> 的环境，输入 <code>node -v</code> 和 <code>npm -v</code>，检查是否安装成功</p>
</li>
<li><p>安装 <code>Git</code> 和配置好 <code>Git</code> 的环境，输入 <code>git --version</code>，检查是否安装成功</p>
</li>
</ol>
<h2 id="二-GitHub-账户注册与新建项目"><a href="#二-GitHub-账户注册与新建项目" class="headerlink" title="二. GitHub 账户注册与新建项目"></a>二. <code>GitHub</code> 账户注册与新建项目</h2><ol>
<li><p>登录 <code>GitHub</code> 官网进行账户注册，注册完成后点击右上角的 + 号的 <code>New repository</code> 新建一个项目，项目名称使用 “账户名.github.io”，并勾选 <code>Initialze this repository with a README</code></p>
</li>
<li><p>在建好的项目右侧的 <code>settings</code> 中，有一个 <code>Github Pages</code>，那儿有一个网址，这就是你刚刚部署的项目，能够通过外网访问它</p>
</li>
</ol>
<h2 id="三-Hexo-安装与配置"><a href="#三-Hexo-安装与配置" class="headerlink" title="三. Hexo 安装与配置"></a>三. <code>Hexo</code> 安装与配置</h2><h4 id="1-安装-Hexo，在合适的地方建立一个文件夹"><a href="#1-安装-Hexo，在合适的地方建立一个文件夹" class="headerlink" title="1. 安装 Hexo，在合适的地方建立一个文件夹"></a>1. 安装 Hexo，在合适的地方建立一个文件夹</h4><p>在该文件夹下打开 <code>Git Bash</code> ，输入以下命令即可安装 <code>Blog</code>：</p>
<pre class=" language-javascript"><code class="language-javascript">npm install hexo <span class="token operator">-</span>g</code></pre>
<p>检查 <code>hexo</code> 是否安装成功</p>
<pre class=" language-javascript"><code class="language-javascript">hexo <span class="token operator">-</span>v</code></pre>
<p>初始化该文件夹，若成功，可看见 <code>start blogging with hexo!</code>:</p>
<pre class=" language-javascript"><code class="language-javascript">  hexo init</code></pre>
<p>安装所需组件</p>
<pre class=" language-js"><code class="language-js"> hexo install</code></pre>
<p>生成静态页面，开始使用 <code>hexo</code></p>
<pre class=" language-js"><code class="language-js">hexo <span class="token function">generate</span><span class="token punctuation">(</span>hexo g<span class="token punctuation">)</span></code></pre>
<p>启动服务器，访问网址即可(若端口被占用，可使用 <code>hexo server -p 端口号</code>)</p>
<pre class=" language-js"><code class="language-js">hexo s</code></pre>
<h4 id="2-将-Hexo-与-Github-Pages-联系起来（如果-Git-已经连接过-Github-可忽略）。-设置-Git-的-user-name-和-email"><a href="#2-将-Hexo-与-Github-Pages-联系起来（如果-Git-已经连接过-Github-可忽略）。-设置-Git-的-user-name-和-email" class="headerlink" title="2. 将 Hexo 与 Github Pages 联系起来（如果 Git 已经连接过 Github 可忽略）。 设置 Git 的 user name 和 email"></a>2. 将 Hexo 与 Github Pages 联系起来（如果 Git 已经连接过 Github 可忽略）。 设置 Git 的 user name 和 email</h4><pre class=" language-javascript"><code class="language-javascript"> <span class="token template-string"><span class="token string">`git config --global user.name "用户名"`</span></span>
 <span class="token template-string"><span class="token string">`git config --global user.email "邮箱"`</span></span>）</code></pre>
<p>检查是否有 .ssh 文件(以下命令非 win 环境)：</p>
<pre class=" language-shell"><code class="language-shell"> cd ~/.ssh</code></pre>
<p>生成密钥：</p>
<pre class=" language-shell"><code class="language-shell">ssh-keygen -t rsa -C "邮箱"</code></pre>
<p>将密钥添加到 ssh-agent</p>
<pre class=" language-shell"><code class="language-shell">eval "$(ssh-agent -s)"
ssh-add ~/.ssh/id_rsa</code></pre>
<p>登录 Github，点击头像下的 settings，添加 ssh，点击 SSH and GPG keys，新建 New SSH key，将 is_rsa.pub 里的内容复制过来</p>
<p>用以下命令查看是否添加成功，出现Hi后加你的用户名就是成功了：</p>
<pre class=" language-shell"><code class="language-shell">ssh -T git@github.com</code></pre>
<h4 id="3-配置-Deployment"><a href="#3-配置-Deployment" class="headerlink" title="3. 配置 Deployment"></a>3. 配置 Deployment</h4><p>在文件夹根目录中找到 <code>_config.yml</code> 文件，在末尾找到 deploy` 并修改</p>
<pre class=" language-yml"><code class="language-yml">  deploy：
    type: git
    repository: git@github.com:用户名/用户名.github.io.git （即用于Clone的SSH的地址）
    branch: master</code></pre>
<p>注意每个冒号后面要空一格（英文格式下）</p>
<h4 id="4-新建博客，"><a href="#4-新建博客，" class="headerlink" title="4. 新建博客，"></a>4. 新建博客，</h4><p>输入 <code>hexo new post &quot;博客名&quot;</code>, 此时在 <strong>source/_posts</strong> 目录下便可以看到新建的文件,在生成、部署文章前，要安装一个扩展:</p>
<pre class=" language-javascript"><code class="language-javascript">npm installhexo<span class="token operator">-</span>deployer<span class="token operator">-</span>git <span class="token operator">--</span>save</code></pre>
<p>安装完成后便可提交到 <code>GitHub</code> 上</p>
<p>编好文章后（Markdown格式），输入以下命令即可:</p>
<pre class=" language-javascript"><code class="language-javascript">hexo deploy（hexo d）</code></pre>
<p>，便部署到GitHub上了。</p>
<p>部署成功后，你的仓库会多出很多文件，而使用  <code>https://用户名.github.io</code> 就可以看到你的网站。</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h3><ol>
<li><p>每次对博客进行修改后需要先用  <code>hexo s</code> 进行界面查看，查看是否修改成功<br>然后使用 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d </code> 来完成部署</p>
</li>
<li><p>在 CMD 命令行中显示 node、npm、hexo 没有此命令时，需要将他们的 bin 的路径部署到环境变量中的系统变量下的 PATH 中</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>hexo</tag>
        <tag>github.io</tag>
      </tags>
  </entry>
  <entry>
    <title>重点内容</title>
    <url>/blogs/important-dong-task.html</url>
    <content><![CDATA[<h2 id="当前网站建设的重点内容"><a href="#当前网站建设的重点内容" class="headerlink" title="当前网站建设的重点内容"></a>当前网站建设的重点内容</h2><h5 id="1-由于目录内容太多，需要对应建设一个-wiki-进行维护"><a href="#1-由于目录内容太多，需要对应建设一个-wiki-进行维护" class="headerlink" title="1. 由于目录内容太多，需要对应建设一个 wiki 进行维护"></a>1. 由于目录内容太多，需要对应建设一个 wiki 进行维护</h5><h5 id="2-文章内容迁移"><a href="#2-文章内容迁移" class="headerlink" title="2. 文章内容迁移"></a>2. 文章内容迁移</h5>]]></content>
      <tags>
        <tag>task</tag>
        <tag>starrier</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 集合 ArrayList 详解</title>
    <url>/blogs/java-basic-collection-arraylist.html</url>
    <content><![CDATA[<h1 id="Java-集合-ArrayList-详解"><a href="#Java-集合-ArrayList-详解" class="headerlink" title="Java 集合 ArrayList 详解"></a>Java 集合 ArrayList 详解</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>函数签名：</p>
<pre class=" language-javascript"><code class="language-javascript"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractList</span><span class="token operator">&lt;</span>E<span class="token operator">></span> 
 <span class="token keyword">implements</span> <span class="token class-name">List</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span>RandomAccess<span class="token punctuation">,</span>Cloneable<span class="token punctuation">,</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</code></pre>
<p><strong>AbastrctList</strong>: 抽象父类，提供了 List 的方法。添加、删除、修改、遍历等。</p>
<p><strong>RandomAccess</strong>： 可随机访问。由 Lis 实现，为 List 提供快速访问功能。在 ArrayList 中，我们可以通过元素的序号快速获取元素对象；这就是快速随机访问。</p>
<p><strong>Clonable</strong>：可拷贝</p>
<p><strong>Serializable</strong> 可序列化</p>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">ArrayList</span><span class="token punctuation">(</span>int capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">ArrayList</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> Collection<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>collection</tag>
        <tag>arraylist</tag>
      </tags>
  </entry>
  <entry>
    <title>java-basic-collection-linked-blocking-queue</title>
    <url>/blogs/java-basic-collection-linked-blocking-queue.html</url>
    <content><![CDATA[<h1 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>LinkedBlockingQueue 由单链表实现，只能从 head 中取元素，向 tail 添加元素。添加元素预计获取元素都有独立的锁，即 LinkedBlockingQueue 是读写分离的，可以并行执行。LinkedBlockingQueue 采用可重入锁（ReentrantLock）来保证并发环境下的线程安全。</p>
<p>函数签名：</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span>E<span class="token operator">></span>
    <span class="token keyword">extends</span> <span class="token class-name">AbstractQueue</span><span class="token operator">&lt;</span>E<span class="token operator">></span>
    <span class="token keyword">implements</span> <span class="token class-name">BlockingDeque</span><span class="token operator">&lt;</span>E<span class="token operator">></span><span class="token punctuation">,</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span></code></pre>
<p>构造器</p>
<ol>
<li>无参构造器(默认的构造器)。默认容量是 Integer.MAX_VALUE，可能存在队列还没有满，但是内存已经满了。</li>
</ol>
<pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">LinkedBlockingDeque</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<ol start="2">
<li>指定大小的构造器</li>
</ol>
<pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token function">LinkedBlockingDeque</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>capacity <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<ol start="3">
<li>接入一个容器的构造器<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">LinkedBlockingDeque</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">E</span><span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
     <span class="token keyword">this</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">addAll</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
</li>
</ol>
<h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><table>
<thead>
<tr>
<th>method</th>
<th>function</th>
</tr>
</thead>
<tbody><tr>
<td>take()</td>
<td>首选，当队列为空时候</td>
</tr>
<tr>
<td>poll()</td>
<td>弹出队列顶部元素，队列为空时，返回空</td>
</tr>
<tr>
<td>peek()</td>
<td>返回队列顶部元素，但顶元素不弹出，队列为空时，返回 null</td>
</tr>
<tr>
<td>remove（object）</td>
<td>移除某个元素，队列为空时，抛出异常。成功移除返回true</td>
</tr>
</tbody></table>
<h5 id="判断队列是否为空"><a href="#判断队列是否为空" class="headerlink" title="判断队列是否为空"></a>判断队列是否为空</h5><p>size() 方法会遍历整个队列，时间复杂度为 O(n)，所以最好选择 isEmpty()</p>
<h2 id="take"><a href="#take" class="headerlink" title="take():"></a>take():</h2><ol>
<li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">takeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
     <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>
     lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
         E x<span class="token punctuation">;</span>
         <span class="token keyword">while</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token function">unlinkFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span>
             notEmpty<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">return</span> x<span class="token punctuation">;</span>
     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
         lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
 <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Java 集合 Set 详解</title>
    <url>/blogs/java-basic-collection-set.html</url>
    <content><![CDATA[<h1 id="Java-集合-Set-详解"><a href="#Java-集合-Set-详解" class="headerlink" title="Java 集合 Set 详解"></a>Java 集合 Set 详解</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="特别说明-1"><a href="#特别说明-1" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<p>Set 不允许包含相同的元素，如果试图把两个相同的元素加入同一个集合中，add 方法返回 false。Set 判断两个对象相同不是使用 == 运算符，而是根据 equals 方法。也就是说，只要两个对象用 equals 比较后返回 true，Set 就不会接受这两个对象。</p>
<h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>不能保证元素的排列顺序，顺序有可能发生变化，不是同步的，集合元素可以是 null，但只能放入一个 null。底层是哈希表（是一个元素为链表的数组）。HashSet 其实使用 HashMap 实现的，HashMap 是 Map 接口的实现类。调用 HashSet 的 add 方法，其实就是在调用 HashMap 中的 put 方法，put 方法主要涉及两个方面。</p>
<ol>
<li><p>对象的 hash 值，通过调用 hash() 得到，这个方法是由 hashCode() 经过操作实现的，由 hashCode() 的值控制。</p>
</li>
<li><p>创建了 hash 表，hash 表会将每一个 hash 值收入，然后比较：</p>
<ol>
<li>先在 hash 表中查找看是否有这个 hash 值（第一次比较，看 hash 表中是否有当前元素的 hahs 值（这个值有 hahsCode 操作的得到），如果没有，直接将这个 hahs 值对应的对象添加到 HashSet 中，如果有，还需要进行第二次比较）。</li>
<li>如果 hash 表有这个 hash 值，那么获取列表中的这个 hash 对应的对象，如果这两个对象的地址值(e.key == key)或者key.equal(e.key)。（第二次比较，如果两个对象的 hahs 值相同，还是不能认为是同一个对象，还要比较两个对象的地址值，或者是 equals() 这里是一个 ||，只要有一个满足相等，就可以认为是同一个元素，不添加）。</li>
</ol>
</li>
<li><p>为什么存储字符串的时候，字符串相同的时候，只存储了一个？因为 String 类重写了 hashCode 和 equals，而 String 类的 hashCode 值和 equals 结果都是由字符串的内容决定的。</p>
</li>
<li><p>如果 HashSet 中收入的是自定义对象，那如何实现唯一呢？</p>
<ol>
<li>通过上述的 String 类的分析，我们知道，HashSet 中实现唯一的两个方法，先是比较 hash 值（这个由 hahsCode 值控制），如果这个值相同，那么再比较地址值或者 equals，所以我们可以通过重写 hahsCode 和 queals 来实现对自定义对象的唯一性判断。</li>
<li>只要重写了 equals，让这个方法比较的是对象的内容，那么就可以排除掉相同的对象。让 hashCode 返回一个常数，这样 hash 就相等了，然后通过 equals 判断，但这样会导致每一个新对象都要和老对象进行比较，太麻烦，所以我们可以仿照 String 类中对 hashCode 重写的方式，同样的有对象的成员变量来决定这个对象的 hashCode 值，equals 也是通过比较对象的成员变量是否相等。这样既可以得到最后的结论。</li>
</ol>
</li>
</ol>
<h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><p>底层数据结构是红黑树（是一个自平衡的二叉树）。TreeSet 是如何保证元素排列方式，以及元素的唯一性呢。</p>
<p>TreeSet 是 SortedSet 接口的唯一实现类，TreeSet 可以确保集合元素处于排序状态，TreeSet 支持两种排序方式，自然排序和定制排序，其中自然排序为默认的排序方式。向 TreeSet 中加入的应该是同一类的对象。TreeSet 判断两个对象不相等的方式是两个对象通过 equals 方法返回 false 或者是通过 CompareTo 方法比较没有返回 0。</p>
<h4 id="自然排序"><a href="#自然排序" class="headerlink" title="自然排序"></a>自然排序</h4><p>自然排序使用要排序元素的 CompareTo(Object object) 方法来比较元素之间的大小关系，然后将元素按照升序排列。Java 提供了一个 Comparable 接口，改接口中定义了一个 compareTo(Object obj) 方法，该方法返回一个整数值，实现了该接口的对象就可以比较大小。</p>
<p>obj.compareTo(obj2) 方法如果返回 0，则说明被比较的两个对象相等，如果返回一个整数，则表明 obj1 大于 obj2，如果是负数，则表明 obj1 小于 obj2。</p>
<p>如果我们将两个对象的 equals 方法总是返回 false，则这两个对象的 compareTo 方法总是返回 0。</p>
<h4 id="定制排序"><a href="#定制排序" class="headerlink" title="定制排序"></a>定制排序</h4><p>自然排序是根据集合元素的大小，以升序排列，如果要定制排序，应该使用 Comparatoer 接口，实现 int compare(a,b)方法。</p>
<h3 id="LinkedLisst"><a href="#LinkedLisst" class="headerlink" title="LinkedLisst"></a>LinkedLisst</h3><p>LinkedHashSet 集合同样是根据元素的 hashCode 值来决定元素的存储位置，但是它同时使用链表维护元素的次序。这样使得元素看起来像是以插入顺序保存的，也就是说，当遍历该集合时，LinkedListSet 将以元素的添加顺序访问集合的元素。LinkedListSet 在迭代访问 Set 中的全部元素时，性能比 HashSet 好，但是插入时性能稍微逊色于 HashSet。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>collection</tag>
        <tag>set</tag>
      </tags>
  </entry>
  <entry>
    <title>java-basic-condition</title>
    <url>/blogs/java-basic-condition.html</url>
    <content><![CDATA[<h1 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>Condition 与 Object 的对比</p>
<table>
<thead>
<tr>
<th>Condition</th>
<th>Object</th>
</tr>
</thead>
<tbody><tr>
<td>awati()</td>
<td>wait()</td>
</tr>
<tr>
<td>signal()</td>
<td>notify()</td>
</tr>
<tr>
<td>signalAll()</td>
<td>notifyAll()</td>
</tr>
</tbody></table>
<p><strong>Note</strong>:</p>
<p>Object  中的这些方法需要和同步锁（“synchronized”）捆绑使用，而 Condition 则是与 “互斥锁/共享锁”捆绑使用。</p>
<p>ReentrantLock 的 Condition 实现了等待/通知模型。Condition 的 await() 方法是是释放锁的。因为如果 await() 不释放锁，那么 singal()  方法就无法被调用。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>basic</tag>
        <tag>condition</tag>
      </tags>
  </entry>
  <entry>
    <title>java 初始化时机</title>
    <url>/blogs/java-basic-initialize-time.html</url>
    <content><![CDATA[<h1 id="Java-初始化时机"><a href="#Java-初始化时机" class="headerlink" title="Java 初始化时机"></a>Java 初始化时机</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="特别说明-1"><a href="#特别说明-1" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<p>Java 初始化时机</p>
<h4 id="1-使用-new-关键字"><a href="#1-使用-new-关键字" class="headerlink" title="1. 使用 new 关键字"></a>1. 使用 new 关键字</h4><blockquote>
<p>由执行类实例创建表达式而引起的对象创建。</p>
</blockquote>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 Java static 关键字</title>
    <url>/blogs/java-basic-static.html</url>
    <content><![CDATA[<h1 id="深入理解-Java-static-关键字"><a href="#深入理解-Java-static-关键字" class="headerlink" title="深入理解 Java static 关键字"></a>深入理解 Java static 关键字</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h3 id="1-修饰成员变量"><a href="#1-修饰成员变量" class="headerlink" title="1. 修饰成员变量"></a>1. 修饰成员变量</h3><h3 id="2-修饰成员方法"><a href="#2-修饰成员方法" class="headerlink" title="2. 修饰成员方法"></a>2. 修饰成员方法</h3><h3 id="3-静态块"><a href="#3-静态块" class="headerlink" title="3. 静态块"></a>3. 静态块</h3><h3 id="4-静态导包"><a href="#4-静态导包" class="headerlink" title="4. 静态导包"></a>4. 静态导包</h3><pre class=" language-Java"><code class="language-Java"> // PrintTest.java
 package org.starrier.test;
 public class PrintTest&#123;
     public static void print(Object object)&#123;
         System.out.println(object);
     &#125;
 &#125;

 // Test.java
 import static org.starrier.test;

 public class Test&#123;
     public static void main(String [] args)&#123;
         print("Hello World");
     &#125;
 &#125;</code></pre>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>用来修饰成员变量，该变量就会成为类的成员，从而实现所有对象对该成员变量的共享。</li>
<li>用来修饰成员方法，将其变为类方法，可以直接使用<strong>类名.方法名</strong>的方式调用，常用于工具类。</li>
<li>静态块，将多个类成员放在一起初始化，是程序更加规整。</li>
<li>静态导包，将类的方法直接导入到当前类，从而直接使用<strong>方法名</strong>即可实现类方法的调用。</li>
</ol>
<p>当 Java 类中包含 static 修饰的静态字段，或者有使用 static｛｝块包裹的代码时，编译后便会在字节码文件中包含一个名为&lt;clinit&gt;() 的方法，JVM 在吃刷阶段便会调用该方法。注意，该方法仅可以被 Java 编译器生成把那个由 JVM 调用，程序开发者无法自定义一个同名方法，更无法直接在 Java 程序中调用。</p>
<p>Java 的初始化顺序：</p>
<p>父类的静态构造成员初始化 ——》 父类的静态代码块 ——》 子类的静态成员初始化 ——》 子类的静态代码块 ——》 父类的代码块 ——》 父类的构造方法 ——》 子类的代码块 ——》 子类的构造方法</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>static</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 java 关键字 String</title>
    <url>/blogs/java-basic-string.html</url>
    <content><![CDATA[<h1 id="深入理解-java-关键字-String"><a href="#深入理解-java-关键字-String" class="headerlink" title="深入理解 java 关键字 String"></a>深入理解 java 关键字 String</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 java 可变参数 - 实战</title>
    <url>/blogs/java-basic-variable-parameter.html</url>
    <content><![CDATA[<h1 id="深入理解-java-可变参数-实战"><a href="#深入理解-java-可变参数-实战" class="headerlink" title="深入理解 java 可变参数 - 实战"></a>深入理解 java 可变参数 - 实战</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>Java 要求实参和形参的数量和类型必须一致，而形参的数目是在方法定义时就已经确定了。重载允许我们扩展参数的类型和数目，但如果需求不同的内容过多，就会产生过多的重载方法。</p>
<p>在这种情况下，我们可以用数组来包裹多个参数，然后将其作为参数进行传递。</p>
<p>在不确定方法需要处理的对象的数量时可以使用可变长参数，会使得方法调用更简单，无需手动创建数组 new T[]{…}。与“数组包裹”的方法相比，真正的实参个数可变的方法，在调用时更为简单，含义也更清楚，但存在自身的限制。</p>
<h3 id="函数签名"><a href="#函数签名" class="headerlink" title="函数签名"></a>函数签名</h3><pre class=" language-text"><code class="language-text">public void test(Integer... args)</code></pre>
<p>只要在一个形参的“类型”与“参数名”之间加上三个连续的“.”（即“…”，英文里的句中省略号），就可以让它和不确定个实参相匹配。而一个带有这样的形参的方法，就是一个实参个数可变的方法。</p>
<h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><ol>
<li>不定项参数必须放在参数列表最后一个</li>
<li>不定项参数只能有一个（多个，必然有一个不是最后一个）。</li>
<li>重载时，运行优先级问题。(系统优先匹配确定参数，然后匹配不确定参数)</li>
<li><strong>不定参数会被 Java 转型成数组，所以本质上是一个二维数组</strong></li>
<li>与数组包裹方法相比，存在泛型不可用。</li>
<li>自动装箱和自动拆箱问题</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token number">3</span><span class="token punctuation">.</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>String <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>String s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span>String s2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">method</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// invoke method(String s1)</span>
    <span class="token function">method</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// invoke method(String s1,String s2);</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token number">4</span><span class="token punctuation">.</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>因为可变参数最后会被编译成数组，所以不能同时存在。可变参数兼容数组，反之不成立。</p>
<pre class=" language-java"><code class="language-java"><span class="token number">5</span><span class="token punctuation">.</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// compile failure</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>T <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
     List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>integer <span class="token operator">-</span><span class="token operator">></span> integer <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>integer <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// compile successfully</span></code></pre>
<p>6.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>INteger <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//Invoke</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// Above of all,compile failure</span></code></pre>
<ol start="7">
<li><p>可变参数不可以与泛型一起使用，会导致 “generic array creation” 错误。</p>
</li>
<li><p>避免带有可变长度的方法重写。</p>
</li>
<li><p>重写带有可变参数的方法。</p>
</li>
</ol>
<pre class=" language-Java"><code class="language-Java">Class Base&#123;
    public void print(String... args)&#123;
        System.out.println("Base----Test");
    &#125;
&#125;

Class Sub extends Base&#123;
    @Override
    public void print(String [] args)&#123;
        System.out.println("Sub-----Test");
    &#125;
&#125;
class variableParameters()&#123;

     public static void main(String [] args)&#123;
         Base base = new Sub();
         base.println("hello"); //pass

         Sub sub = new Sub();
         sub.println("hello"); //error
     &#125;
 &#125;
</code></pre>
<p>base 对象将子类对象做了向上转型，形参列表是由父类决定的，所以可以通过。而 sub 调用自身复写的方法，参数类型不匹配也不会父类去匹配，所以导致类型不匹配错误。</p>
<ol start="10">
<li>Object… 参数问题</li>
</ol>
<pre class=" language-Java"><code class="language-Java">public void test(Object... args)&#123;
    System.out.println(args.length);
&#125;

test(new String[]&#123;"1","2","3"&#125;);//3
test(100,new String[]&#123;"1","2"&#125;);//2
test(new Integer[]&#123;1,2,3&#125;)//3
test(100,new Integer[]&#123;1,2&#125;)//2
test(1,2,3);//3
test(new int[](1,2,3));//1
</code></pre>
<p>int[] 无法转型为 Object[] ,只会被当成一个数组对象。Integer[] 可以转型为 Object[],可以成为一个对象数组。</p>
<ol start="11">
<li>反射方法调用时的注意事项</li>
</ol>
<pre class=" language-Java"><code class="language-Java">public class Test()&#123;
    public static void test(String... args)&#123;
        System.out.println(args.length);
    &#125;

    public static void main(String [] args)&#123;
        String [] varArgs =new String[]&#123;"a","b"&#125;;
        try&#123;
            Method method = Test.class.getmethod("test",String[].class);
            // Object invoke(Object obj,Object...args);
            method.invoke(null,varArgs);// varArgs.length =2 error
            method.invoke(null,(Object[])varArgs);// String[]  转换为 Object[],varArgs.length =2.error.
            method.invoke(null,(Object) varArgs);// 将整个 String [] 转换为 Object，varArgs.length= 1，right.
            method.invoke(null,new Object[]&#123;varArgs&#125;);//Object[] 长度为 1，right。等价于第三个方法调用。
        &#125;catch(Exception e)&#123;
            e.printStackTrace();
        &#125;
    &#125;
&#125;</code></pre>
<ol start="11">
<li>调用的参数也可以是 0(等价于空数组)</li>
</ol>
<pre class=" language-Java"><code class="language-Java">test();</code></pre>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>基础</tag>
        <tag>可变参数</tag>
        <tag>variable parameter</tag>
      </tags>
  </entry>
  <entry>
    <title>java volatile</title>
    <url>/blogs/java-basic-volatile.html</url>
    <content><![CDATA[<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h4 id="Volatile-和-Synchronized-四个不同点："><a href="#Volatile-和-Synchronized-四个不同点：" class="headerlink" title="Volatile 和 Synchronized 四个不同点："></a>Volatile 和 Synchronized 四个不同点：</h4><ol>
<li>粒度不同，前者锁对象和类，后者针对变量。</li>
<li>syn 阻塞，volatile 线程不阻塞</li>
<li>syn 保证三大特性，volatile 不保证原子性</li>
<li>syn 编译器优化，volatile 不优化</li>
</ol>
<h4 id="volatile具备两种特性："><a href="#volatile具备两种特性：" class="headerlink" title="volatile具备两种特性："></a>volatile具备两种特性：</h4><ol>
<li>保证此变量对所有线程的可见性，指一条线程修改了这个变量的值，新值对于其他线程来说是不可见的，但并不是多线程安全的。</li>
<li>禁止指令重排序优化。</li>
</ol>
<h4 id="Volatile-如何保证内存可见性"><a href="#Volatile-如何保证内存可见性" class="headerlink" title="Volatile 如何保证内存可见性:"></a>Volatile 如何保证内存可见性:</h4><ol>
<li>当写一个 volatile 变量时，JVM 会把该线程对应的本地内存中的共享变量刷新到主内存中。</li>
<li>当写一个 volatile 变量时，JVM 会把该线程对应的本地内存置为无效。线程接下来将从主内存中读取共享变量。</li>
</ol>
<p>同步：就是一个任务的完成需要依赖另外一个任务，只有等待被依赖的任务完成后，依赖任务才能完成。</p>
<p>异步：不需要等待被依赖的任务完成，只是通知被依赖的任务要完成什么工作，只要自己任务完成了就算完成了，被依赖的任务是否完成会通知回来。（异步的特点就是通知）。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>basic</tag>
        <tag>volatile</tag>
      </tags>
  </entry>
  <entry>
    <title>java-clean-code-警告压制</title>
    <url>/blogs/java-clean-code-warnning.html</url>
    <content><![CDATA[<h1 id="Java-clean-code-警告压制"><a href="#Java-clean-code-警告压制" class="headerlink" title="Java-clean-code-警告压制"></a>Java-clean-code-警告压制</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一-列表"><a href="#一-列表" class="headerlink" title="一. 列表"></a>一. 列表</h2><table>
<thead>
<tr>
<th>值</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>all</code></td>
<td>抑制所有警告</td>
</tr>
<tr>
<td><code>boxing</code></td>
<td>抑制与封装/拆装作业相关的警告</td>
</tr>
<tr>
<td><code>cast</code></td>
<td>抑制与强制转型作业相关的警告</td>
</tr>
<tr>
<td><code>dep-ann</code></td>
<td>抑制与淘汰注释相关的警告</td>
</tr>
<tr>
<td><code>deprecation</code></td>
<td>抑制与淘汰的相关警告</td>
</tr>
<tr>
<td><code>fallthrough</code></td>
<td>抑制与 <code>switch</code> 陈述式中遗漏 <code>break</code> 相关的警告</td>
</tr>
<tr>
<td><code>finally</code></td>
<td>抑制与未传回finally区块相关的警告</td>
</tr>
<tr>
<td><code>hiding</code></td>
<td>抑制与隐藏变数的区域变数相关的警告</td>
</tr>
<tr>
<td><code>incomplete-switch</code></td>
<td>抑制与 <code>switch</code> 陈述式（<code>enum case</code>）中遗漏项目相关的警告</td>
</tr>
<tr>
<td><code>javadoc</code></td>
<td>抑制与 <code>javadoc</code> 相关的警告</td>
</tr>
<tr>
<td><code>nls</code></td>
<td>抑制与非 <code>nls</code> 字串文字相关的警告</td>
</tr>
<tr>
<td><code>null</code></td>
<td>抑制与空值分析相关的警告</td>
</tr>
<tr>
<td><code>rawtypes</code></td>
<td>抑制与使用 <code>raw</code> 类型相关的警告</td>
</tr>
<tr>
<td><code>resource</code></td>
<td>抑制与使用 <code>Closeable</code> 类型的资源相关的警告</td>
</tr>
<tr>
<td><code>restriction</code></td>
<td>抑制与使用不建议或禁止参照相关的警告</td>
</tr>
<tr>
<td><code>serial</code></td>
<td>抑制与可序列化的类别遗漏 <code>serialVersionUID</code> 栏位相关的警告</td>
</tr>
<tr>
<td><code>static-access</code></td>
<td>抑制与静态存取不正确相关的警告</td>
</tr>
<tr>
<td><code>static-method</code></td>
<td>抑制与可能宣告为 <code>static</code> 的方法相关的警告</td>
</tr>
<tr>
<td><code>super</code></td>
<td>抑制与置换方法相关但不含 <code>super</code> 呼叫的警告</td>
</tr>
<tr>
<td><code>synthetic-acces</code></td>
<td>抑制与内部类别的存取未最佳化相关的警告</td>
</tr>
<tr>
<td><code>sync-override</code></td>
<td>抑制因为置换同步方法而遗漏同步化的警告</td>
</tr>
<tr>
<td><code>unchecked</code></td>
<td>抑制与未检查的作业相关的警告</td>
</tr>
<tr>
<td><code>unqualified-field-access</code></td>
<td>抑制与栏位存取不合格相关的警告</td>
</tr>
<tr>
<td><code>unused</code></td>
<td>抑制与未用的程式码及停用的程式码相关的警告</td>
</tr>
</tbody></table>
<h2 id="二-示例"><a href="#二-示例" class="headerlink" title="二. 示例"></a>二. 示例</h2><h3 id="1-all"><a href="#1-all" class="headerlink" title="1. all"></a>1. <code>all</code></h3>]]></content>
      <tags>
        <tag>java</tag>
        <tag>clean-code</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 并发编程目录</title>
    <url>/blogs/java-concurrent%20programming.html</url>
    <content><![CDATA[<h1 id="Java-并发编程目录"><a href="#Java-并发编程目录" class="headerlink" title="Java 并发编程目录"></a>Java 并发编程目录</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一-互斥"><a href="#一-互斥" class="headerlink" title="一. 互斥"></a>一. 互斥</h2><h3 id="1-无锁"><a href="#1-无锁" class="headerlink" title="1. 无锁"></a>1. 无锁</h3><h3 id="2-互斥锁"><a href="#2-互斥锁" class="headerlink" title="2. 互斥锁"></a>2. 互斥锁</h3><h2 id="二-协作"><a href="#二-协作" class="headerlink" title="二. 协作"></a>二. 协作</h2><ol>
<li><p>信号量</p>
</li>
<li><p>管程</p>
</li>
<li><p><code>CountDownLatch</code></p>
</li>
<li><p><code>CyclicBarrier</code></p>
</li>
<li><p><code>Phaser</code></p>
</li>
<li><p><code>Exchanger</code></p>
</li>
</ol>
<h2 id="三-协同分工"><a href="#三-协同分工" class="headerlink" title="三. 协同分工"></a>三. 协同分工</h2>]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java-features-module-system</title>
    <url>/blogs/java-features-module-system.html</url>
    <content><![CDATA[<h1 id="Java-Features-Module-System-JDK-9"><a href="#Java-Features-Module-System-JDK-9" class="headerlink" title="Java Features - Module System -JDK 9"></a>Java Features - Module System -JDK 9</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一-背景"><a href="#一-背景" class="headerlink" title="一. 背景"></a>一. 背景</h2><p>Java 8 以前，我们使用 maven 或者 gradle 管理 jar 包时，可能会因为某一个小方法而必须引入一整个对应的 jar 包，这就导致当前 jar 包的 classpath 路径名会非常长，从而形成 jar hell。</p>
<h2 id="二-module-system-的目标"><a href="#二-module-system-的目标" class="headerlink" title="二. module system 的目标"></a>二. module system 的目标</h2><p>Java 9 引入 Model System，您可以将 Java 应用程序视为具有明确定义的边界和这些模块之间依赖关系的交互模块的集合。 模块系统的开发具有以下目标：</p>
<ol>
<li>可靠的配置</li>
<li>强封装</li>
<li>模块化JDK/JRE</li>
</ol>
<p>Java 9 中的模块系统脱胎于 OpenJDK 的 Jigsaw 项目。Jigsaw的设计目标是：</p>
<ul>
<li><p>为了让开发者构建和维护一个大型的库或应用程序更容易</p>
</li>
<li><p>-提高javaSE平台及JDK实现的安全性和可维护性；</p>
</li>
<li><p>提升应用的性能；</p>
</li>
<li><p>在javase及JDK平台，让应用更小以便于部署于更小的计算单元及紧密的云部署系统。</p>
</li>
</ul>
<h2 id="三-如何使用"><a href="#三-如何使用" class="headerlink" title="三. 如何使用"></a>三. 如何使用</h2><p>为了解决 jar hell 的问题，同时达到目标，module system 实际上是在 package 的级别上又封装了一层。</p>
<h3 id="1-引入-module-info-java"><a href="#1-引入-module-info-java" class="headerlink" title="1. 引入 module-info.java"></a>1. 引入 module-info.java</h3><p>我们需要对应的 package 的目录下引入<code> module-info.java</code> 文件。</p>
<h3 id="2-在-文件中，写入相关信息"><a href="#2-在-文件中，写入相关信息" class="headerlink" title="2. 在 文件中，写入相关信息"></a>2. 在 文件中，写入相关信息</h3><pre class=" language-java"><code class="language-java">module test<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  export com<span class="token punctuation">.</span>test<span class="token punctuation">;</span>
  require java<span class="token punctuation">.</span>security<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<ul>
<li><p>test  为当前 module 名。</p>
</li>
<li><p>export 为暴露的模块名</p>
</li>
<li><p>require  为当前模块需要依赖的 module 名。</p>
</li>
</ul>
<h3 id="四-module-种类"><a href="#四-module-种类" class="headerlink" title="四. module 种类"></a>四. module 种类</h3>]]></content>
      <tags>
        <tag>java</tag>
        <tag>jdk</tag>
        <tag>jdk9</tag>
        <tag>features</tag>
        <tag>module-system</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 Java 函数式编程</title>
    <url>/blogs/java-function-principle.html</url>
    <content><![CDATA[<h1 id="深入理解-Java-函数式编程"><a href="#深入理解-Java-函数式编程" class="headerlink" title="深入理解 Java 函数式编程"></a>深入理解 Java 函数式编程</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一-Functional-Interface"><a href="#一-Functional-Interface" class="headerlink" title="一. Functional Interface"></a>一. Functional Interface</h2><blockquote>
<p>函数式接口</p>
</blockquote>
<p>Java 8 引入了一个新的注解 <code>@FunctionalInterface</code>，<br>c</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>functional</tag>
        <tag>function</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm - java - 内存模型</title>
    <url>/blogs/java-memory-module.html</url>
    <content><![CDATA[<h1 id="Java-虚拟机内存模型"><a href="#Java-虚拟机内存模型" class="headerlink" title="Java 虚拟机内存模型"></a>Java 虚拟机内存模型</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一-组成"><a href="#一-组成" class="headerlink" title="一. 组成"></a>一. 组成</h2><h3 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1.  程序计数器"></a>1.  程序计数器</h3><p>程序计数器是一个很小的内存区域，不再 RAM 上，而是直接划在 CPU 上。JVM 在解释字节码（.class）文件时，存储当前线程执行的字节码行号，只是一种概念模型，各种 JVM 所采用的方法不一样。字节码解释工作时，就是通过改变程序计数器的值来去下一条要执行的指令，分支，循环，跳转、线程恢复等基础功能都是依赖此技术区完成的。</p>
<p>由于 Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p>
<p>如果线程正在执行的是一个 Java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是 Natvie 方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在 Java 虚拟机规范中没有规定任何 OutOfMemoryError 情况的区域。</p>
<h3 id="2-JVM-栈"><a href="#2-JVM-栈" class="headerlink" title="2.JVM 栈"></a>2.JVM 栈</h3><p>与程序计数器一样，Java 虚拟机栈（Java Virtual Machine Stacks）也是线程私有的，<br>它的生命周期与线程相同。虚拟机栈描述的是 Java 方法执行的内存模型：每个方法被执<br>行的时候都会同时创建一个栈帧（Stack Frame）用于存储局部变量表、操作栈、动态<br>链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在<br>虚拟机栈中从入栈到出栈的过程。</p>
<p>经常有人把Java 内存区分为堆内存（Heap）和栈内存（Stack），这种分法比较粗<br>糙，Java 内存区域的划分实际上远比这复杂。这种划分方式的流行只能说明大多数程序<br>员最关注的、与对象内存分配关系最密切的内存区域是这两块。其中所指的“堆”在后<br>面会专门讲述，而所指的“栈”就是现在讲的虚拟机栈，或者说是虚拟机栈中的局部变<br>量表部分。</p>
<p>局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、<br>float、long、double）、对象引用（reference 类型，它不等同于对象本身，根据不同的虚拟机实现，它可能是一个指向对象起始地址的引用指针，也可能指向一个代表对象的句柄或<br>者其他与此对象相关的位置）和returnAddress 类型（指向了一条字节码指令的地址）。<br>其中64 位长度的long 和double 类型的数据会占用2 个局部变量空间（Slot），其余<br>的数据类型只占用1 个。局部变量表所需的内存空间在编译期间完成分配，当进入一个<br>方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间<br>不会改变局部变量表的大小。</p>
<p>在Java 虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大<br>于虚拟机所允许的深度，将抛出StackOverflowError 异常；如果虚拟机栈可以动态扩展<br>（当前大部分的Java 虚拟机都可动态扩展，只不过Java 虚拟机规范中也允许固定长度的<br>虚拟机栈），当扩展时无法申请到足够的内存时会抛出OutOfMemoryError 异常。</p>
<h3 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3. 本地方法栈"></a>3. 本地方法栈</h3><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用是非常相似的，其<br>区别不过是虚拟机栈为虚拟机执行Java 方法（也就是字节码）服务，而本地方法栈则<br>是为虚拟机使用到的Native 方法服务。虚拟机规范中对本地方法栈中的方法使用的语<br>言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至<br>有的虚拟机（譬如Sun HotSpot 虚拟机）直接就把本地方法栈和虚拟机栈合二为一。<br>与虚拟机栈一样，本地方法栈区域也会抛出StackOverflowError 和OutOfMemoryError<br>异常。</p>
<h3 id="4-堆"><a href="#4-堆" class="headerlink" title="4. 堆"></a>4. 堆</h3><p>对于大多数应用来说，Java 堆（Java Heap）是Java 虚拟机所管理的内存中最大的<br>一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的<br>唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java 虚<br>拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配①，但是随着JIT 编译器<br>的发展与逃逸分析技术的逐渐成熟，栈上分配、标量替换②优化技术将会导致一些微妙<br>的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。<br>Java 堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC 堆”（Garbage<br>Collected Heap，幸好国内没翻译成“垃圾堆”）。如果从内存回收的角度看，由于现在<br>收集器基本都是采用的分代收集算法，所以Java 堆中还可以细分为：新生代和老年代；<br>再细致一点的有Eden 空间、From Survivor 空间、To Survivor 空间等。如果从内存分配<br>的角度看，线程共享的Java 堆中可能划分出多个线程私有的分配缓冲区（Thread Local<br>Allocation Buffer，TLAB）。不过，无论如何划分，都与存放内容无关，无论哪个区域，<br>存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配<br>内存。在本章中，我们仅仅针对内存区域的作用进行讨论，Java 堆中的上述各个区域的<br>分配和回收等细节将会是下一章的主题。</p>
<p>根据Java 虚拟机规范的规定，Java 堆可以处于物理上不连续的内存空间中，只要<br>逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小<br>的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过-Xmx<br>和-Xms 控制）。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出<br>OutOfMemoryError 异常。</p>
<h3 id="运行时常量"><a href="#运行时常量" class="headerlink" title="运行时常量"></a>运行时常量</h3><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有<br>类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant Pool<br>Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放<br>到方法区的运行时常量池中。</p>
<p>Java 虚拟机对Class 文件的每一部分（自然也包括常量池）的格式都有严格的规<br>定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会被虚拟机认可、<br>装载和执行。但对于运行时常量池，Java 虚拟机规范没有做任何细节的要求，不同的<br>提供商实现的虚拟机可以按照自己的需要来实现这个内存区域。不过，一般来说，除<br>了保存Class 文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常<br>量池中。</p>
<p>运行时常量池相对于Class 文件常量池的另外一个重要特征是具备动态性，Java 语<br>言并不要求常量一定只能在编译期产生，也就是并非预置入Class 文件中常量池的内容<br>才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发<br>人员利用得比较多的便是String 类的intern() 方法。</p>
<p>既然运行时常量池是方法区的一部分，自然会受到方法区内存的限制，当常量池无<br>法再申请到内存时会抛出OutOfMemoryError 异常</p>
<h3 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5. 方法区"></a>5. 方法区</h3><h3 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h3><p>直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是Java<br>虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用，而且也可能导致<br>OutOfMemoryError 异常出现，所以我们放到这里一起讲解。<br>在JDK 1.4 中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）<br>与缓冲区（Buffer）的I/O 方式，它可以使用 Native 函数库直接分配堆外内存，然<br>后通过一个存储在 Java 堆里面的 DirectByteBuffer 对象作为这块内存的引用进行<br>操作。这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来<br>回复制数据。</p>
<p>显然，本机直接内存的分配不会受到 Java 堆大小的限制，但是，既然是内存，则<br>肯定还是会受到本机总内存（包括 RAM 及 SWAP 区或者分页文件）的大小及处理器<br>寻址空间的限制。服务器管理员配置虚拟机参数时，一般会根据实际内存设置 -Xmx<br>等参数信息，但经常会忽略掉直接内存，使得各个内存区域的总和大于物理内存限制<br>（包括物理上的和操作系统级的限制），从而导致动态扩展时出现 OutOfMemoryError<br>异常。</p>
<p>逻辑内存模型我们已经看到了，那当我们建立一个对象的时候是怎么进行访问的呢？<br>在 Java 语言中，对象访问是如何进行的？对象访问在 Java 语言中无处不在，是最普通的程序行为，但即使是最简单的访问，也会却涉及 Java 栈、Java 堆、方法区这三个最重要内存区<br>域之间的关联关系，如下面的这句代码：</p>
<pre class=" language-Java"><code class="language-Java">Object obj = new Object();</code></pre>
<p>假设这句代码出现在方法体中，那 <code>Object obj</code> 这部分的语义将会反映到 Java 栈<br>的本地变量表中，作为一个 reference 类型数据出现。而 <code>new Object()</code>这部分的语义<br>将会反映到 Java 堆中，形成一块存储了 Object 类型所有实例数据值（Instance Data，对<br>象中各个实例字段的数据）的结构化内存，根据具体类型以及虚拟机实现的对象内存布<br>局（Object Memory Layout）的不同，这块内存的长度是不固定的。另外，在 Java 堆中<br>还必须包含能查找到此对象类型数据（如对象类型、父类、实现的接口、方法等）的地<br>址信息，这些类型数据则存储在方法区中。</p>
<p>由于 reference 类型在 Java 虚拟机规范里面只规定了一个指向对象的引用，并没有<br>定义这个引用应该通过哪种方式去定位，以及访问到 Java 堆中的对象的具体位置，因此<br>不同虚拟机实现的对象访问方式会有所不同，主流的访问方式有两种：使用句柄和直接<br>指针。</p>
<p>如果使用句柄访问方式，Java 堆中将会划分出一块内存来作为句柄池，reference<br>中存储的就是对象的句柄地址，而句柄中包含了对象实例数据和类型数据各自的<br>具体地址信息，如下图所示。</p>
<p>如果使用直接指针访问方式，Java 堆对象的布局中就必须考虑如何放置访问类型<br>数据的相关信息，reference 中直接存储的就是对象地址，如下图所示</p>
<p>这两种对象的访问方式各有优势，使用句柄访问方式的最大好处就是 reference 中存<br>储的是稳定的句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只<br>会改变句柄中的实例数据指针，而 reference 本身不需要被修改。<br>使用直接指针访问方式的最大好处就是速度更快，它节省了一次指针定位的时间开<br>销，由于对象的访问在 Java 中非常频繁，因此这类开销积少成多后也是一项非常可观的</p>
<p>执行成本。就本书讨论的主要虚拟机 Sun HotSpot 而言，它是使用第二种方式进行对象访问的，但从整个软件开发的范围来看，各种语言和框架使用句柄来访问的情况也十分常见。</p>
<p>下面我们来看几个示例</p>
<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><p><a href="https://www.cnblogs.com/fubaizhaizhuren/p/4976839.html">https://www.cnblogs.com/fubaizhaizhuren/p/4976839.html</a></p>
<p><a href="https://blog.csdn.net/anjoyandroid/article/details/78609971">https://blog.csdn.net/anjoyandroid/article/details/78609971</a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
        <tag>jmm</tag>
      </tags>
  </entry>
  <entry>
    <title>java-features-stream 底层原理</title>
    <url>/blogs/java-stream-principle.html</url>
    <content><![CDATA[<h1 id="Java-Stream-底层原理"><a href="#Java-Stream-底层原理" class="headerlink" title="Java Stream 底层原理"></a>Java Stream 底层原理</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>Stream 并行流 使用条件</p>
<ul>
<li>独立：每个元素的计算都不依赖或影响任何其他元素的计算</li>
<li>无干扰：功能（function）执行的时候不会修改基础的数据源</li>
<li>无状态</li>
</ul>
<p>Stream 并行流底层使用的是 fork/join 框架。我们可以自定义并行流的最大线程数。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>stream</tag>
        <tag>principle</tag>
        <tag>原理</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 Java 线程池 - 实战</title>
    <url>/blogs/java-thread-threadpool.html</url>
    <content><![CDATA[<h1 id="深入理解-Java-线程池-实战"><a href="#深入理解-Java-线程池-实战" class="headerlink" title="深入理解 Java 线程池 - 实战"></a>深入理解 Java 线程池 - 实战</h1><h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<h2 id="一-Java-线程池详解"><a href="#一-Java-线程池详解" class="headerlink" title="一. Java 线程池详解"></a>一. Java 线程池详解</h2><h3 id="1-corePoolSize："><a href="#1-corePoolSize：" class="headerlink" title="1.corePoolSize："></a>1.<strong>corePoolSize</strong>：</h3><p>线程池的核心池大小，在创建线程池之后，线程池默认没有任何线程。当有任务过来时，才会去创建线程并执行任务。直到创建的线程数量达到 corePoolSize。之后，再有任务进来时，就会被放入队列中。corePoolSize 表示允许线程池中允许同时运行的最大线程数。</p>
<p>如果执行了线程池的 prestartAllCoreThread() 方法，线程池会提前创建并启动所有核心线程。</p>
<h3 id="2-maximumPoolSize："><a href="#2-maximumPoolSize：" class="headerlink" title="2.maximumPoolSize："></a>2.<strong>maximumPoolSize</strong>：</h3><p>线程池允许的最大线程数，他表示最大能创建多少个线程。maximunPoolSize 肯定是大于等于 corePoolSize。</p>
<h3 id="3-keepAliveTime："><a href="#3-keepAliveTime：" class="headerlink" title="3. keepAliveTime："></a>3. <strong>keepAliveTime</strong>：</h3><p>表示线程没有任务时，最多保持多久然后停止。默认情况下，只有线程池中的线程数大于 corePoolSize 时，keepAliveTime 才会起作用。即，当线程池中的线程数大于 corePoolSize 并且一个线程空闲时间达到了 keepAliveTime 时，那么就是会 shutdown。</p>
<h3 id="4-Unit："><a href="#4-Unit：" class="headerlink" title="4. Unit："></a>4. <strong>Unit</strong>：</h3><p>keepAliveTime 的单位。</p>
<h3 id="5-workQueue："><a href="#5-workQueue：" class="headerlink" title="5. workQueue："></a>5. <strong>workQueue</strong>：</h3><p>一个阻塞队列，用来存储等待执行的任务，当线程池中的线程数超过它的 corePoolSize 时，线程会进入阻塞队列进行阻塞等待。通过 workQueue，线程池实现了阻塞功能。</p>
<h3 id="6-threadFactory："><a href="#6-threadFactory：" class="headerlink" title="6. threadFactory："></a>6. <strong>threadFactory</strong>：</h3><p>线程工厂，用来创建线程。</p>
<h3 id="7-hannler："><a href="#7-hannler：" class="headerlink" title="7. hannler："></a>7. <strong>hannler</strong>：</h3><p>表示拒绝处理任务时的策略。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>thread</tag>
        <tag>threadpool</tag>
        <tag>多线程，线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 可变参数</title>
    <url>/blogs/java-variable-parameter.html</url>
    <content><![CDATA[<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>Java 要求实参和形参的数量和类型必须一致，而形参的数目是在方法定义时就已经确定了。重载允许我们扩展参数的类型和数目，但如果需求不同的内容过多，就会产生过多的重载方法。</p>
<p>在这种情况下，我们可以用数组来包裹多个参数，然后将其作为参数进行传递。</p>
<p>在不确定方法需要处理的对象的数量时可以使用可变长参数，会使得方法调用更简单，无需手动创建数组 new T[]{…}。与“数组包裹”的方法相比，真正的实参个数可变的方法，在调用时更为简单，含义也更清楚，但存在自身的限制。</p>
<h3 id="函数签名"><a href="#函数签名" class="headerlink" title="函数签名"></a>函数签名</h3><pre class=" language-text"><code class="language-text">public void test(Integer... args)</code></pre>
<p> 只要在一个形参的“类型”与“参数名”之间加上三个连续的“.”（即“…”，英文里的句中省略号），就可以让它和不确定个实参相匹配。而一个带有这样的形参的方法，就是一个实参个数可变的方法。</p>
<h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><ol>
<li>不定项参数必须放在参数列表最后一个</li>
<li>不定项参数只能有一个（多个，必然有一个不是最后一个）。</li>
<li>重载时，运行优先级问题。(系统优先匹配确定参数，然后匹配不确定参数)</li>
<li><strong>不定参数会被 Java 转型成数组，所以本质上是一个二维数组</strong></li>
<li>与数组包裹方法相比，存在泛型不可用。</li>
<li>自动装箱和自动拆箱问题</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token number">3</span><span class="token punctuation">.</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>String <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>String s1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span>String s2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">method</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// invoke method(String s1)</span>
    <span class="token function">method</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span><span class="token string">"test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// invoke method(String s1,String s2);</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<pre class=" language-java"><code class="language-java"><span class="token number">4</span><span class="token punctuation">.</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> </code></pre>
<p>因为可变参数最后会被编译成数组，所以不能同时存在。可变参数兼容数组，反之不成立。</p>
<pre class=" language-java"><code class="language-java"><span class="token number">5</span><span class="token punctuation">.</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>T<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// compile failure</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>T <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
     List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> integers <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         integers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>integer <span class="token operator">-</span><span class="token operator">></span> integer <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                 <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>integer <span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// compile successfully</span></code></pre>
<p>6.</p>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>INteger <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//Invoke</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment" spellcheck="true">// Above of all,compile failure</span></code></pre>
<ol start="7">
<li><p>可变参数不可以与泛型一起使用，会导致 “generic array creation” 错误。</p>
</li>
<li><p>避免带有可变长度的方法重写。</p>
</li>
<li><p>重写带有可变参数的方法。</p>
</li>
</ol>
<pre class=" language-Java"><code class="language-Java">Class Base&#123;
    public void print(String... args)&#123;
        System.out.println("Base----Test");
    &#125;
&#125;

Class Sub extends Base&#123;
    @Override
    public void print(String [] args)&#123;
        System.out.println("Sub-----Test");
    &#125;
&#125;
class variableParameters()&#123;

     public static void main(String [] args)&#123;
         Base base = new Sub();
         base.println("hello"); //pass

         Sub sub = new Sub();
         sub.println("hello"); //error
     &#125;
 &#125;
</code></pre>
<p>base 对象将子类对象做了向上转型，形参列表是由父类决定的，所以可以通过。而 sub 调用自身复写的方法，参数类型不匹配也不会父类去匹配，所以导致类型不匹配错误。</p>
<ol start="10">
<li>Object… 参数问题</li>
</ol>
<pre class=" language-Java"><code class="language-Java">public void test(Object... args)&#123;
    System.out.println(args.length);
&#125;

test(new String[]&#123;"1","2","3"&#125;);//3
test(100,new String[]&#123;"1","2"&#125;);//2
test(new Integer[]&#123;1,2,3&#125;)//3
test(100,new Integer[]&#123;1,2&#125;)//2
test(1,2,3);//3
test(new int[](1,2,3));//1
</code></pre>
<p>int[] 无法转型为 Object[] ,只会被当成一个数组对象。Integer[] 可以转型为 Object[],可以成为一个对象数组。</p>
<ol start="11">
<li>反射方法调用时的注意事项</li>
</ol>
<pre class=" language-Java"><code class="language-Java">public class Test()&#123;
    public static void test(String... args)&#123;
        System.out.println(args.length);
    &#125;

    public static void main(String [] args)&#123;
        String [] varArgs =new String[]&#123;"a","b"&#125;;
        try&#123;
            Method method = Test.class.getmethod("test",String[].class);
            // Object invoke(Object obj,Object...args);
            method.invoke(null,varArgs);// varArgs.length =2 error
            method.invoke(null,(Object[])varArgs);// String[]  转换为 Object[],varArgs.length =2.error.
            method.invoke(null,(Object) varArgs);// 将整个 String [] 转换为 Object，varArgs.length= 1，right.
            method.invoke(null,new Object[]&#123;varArgs&#125;);//Object[] 长度为 1，right。等价于第三个方法调用。
        &#125;catch(Exception e)&#123;
            e.printStackTrace();
        &#125;
    &#125;
&#125;</code></pre>
<ol start="11">
<li>调用的参数也可以是 0(等价于空数组)</li>
</ol>
<pre class=" language-Java"><code class="language-Java">test();</code></pre>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解诶 JVM - 逃逸分析</title>
    <url>/blogs/jvm-escape-analyse.html</url>
    <content><![CDATA[<h1 id="深入理解诶-JVM-逃逸分析"><a href="#深入理解诶-JVM-逃逸分析" class="headerlink" title="深入理解诶 JVM - 逃逸分析"></a>深入理解诶 JVM - 逃逸分析</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<blockquote>
<p>JVM 中的优化技术</p>
</blockquote>
<h3 id="什么是逃逸？"><a href="#什么是逃逸？" class="headerlink" title="什么是逃逸？"></a>什么是逃逸？</h3><p>逃逸是指在某个方法之内创建的对象，除了在方法体之内被引用之外，还在方法体之外被其它变量引用到；这样带来的后果是在该方法执行完毕之后，该方法中创建的对象将无法被GC回收，由于其被其它变量引用。正常的方法调用中，方法体中创建的对象将在执行完毕之后，将回收其中创建的对象；故由于无法回收，即成为逃逸。</p>
<p>逃逸分析的基本行为就是分析对象动态作用域：当一个对象在方法中被定义后，它可能会被外部方法所引用。比如，作为调用参数传递到其他地方中，称为方法逃逸。</p>
<p>可以被外部线程访问到，比如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。</p>
<p>如果可以证明一个对象不会逃逸到方法或线程外，那么这个变量可以进行一些高效的优化。</p>
<pre class=" language-Java"><code class="language-Java"> public static StringBuffer create(String a,String b)&#123;
      StringBuffer stringBuffer = new StringBuffer();
      stringBuffer.append(a);
      stringBuffer.append(b);
      return stringBuffer.toString();
 &#125;</code></pre>
<p>在不直接返回 <code>stringBuffer</code> 的情况下，StringBuffer 是不会逃逸出方法的。</p>
<pre class=" language-Java"><code class="language-Java"> public T t;

 public void methodA()&#123;
     T t1 = variableEscape)();
     methodB();
 &#125;

 public T variableEscapee()&#123;
     T t2 =new T();
     return t2;
 &#125;

 pulic void methodB()&#123;
     t=new T();
 &#125;</code></pre>
<p>方法 <code>variableEscape()</code> 的内部对象 t2 的引用返回给 <code>methodA</code> 方法中的变量 v1，<code>methdoB</code> 的内部对象赋值给了全局变量 t，这两种场景都发生了（引用）逃逸。</p>
<p>可以通过 JVM 参数设置开启逃逸分析：</p>
<pre class=" language-Java"><code class="language-Java"> -xx:+DoEscapeAnalysis</code></pre>
<h3 id="栈上分配"><a href="#栈上分配" class="headerlink" title="栈上分配"></a>栈上分配</h3><p>Java 对象是在堆上分配的，垃圾回收机制会回收堆上不再使用的对象，但筛选可回收对象以及整理内存都会消耗时间。如果通过逃逸分析可以确定对象不会逃逸出方法之外，那么就可以将对象分配在栈上，这样对象所占用的空间就会随着栈帧出栈而销毁，这样就减轻了垃圾回收的压力。</p>
<p><strong>注意</strong>：栈上分配受制于栈空间大小。自我迭代等对空间有较大需求的操作会导致栈溢出。</p>
<h4 id="1-同步消除"><a href="#1-同步消除" class="headerlink" title="1. 同步消除"></a>1. 同步消除</h4><p>逃逸分析可以判断某个对象是否始终只被一个线程访问，如果只被一个线程访问，那么对该对象的同步操作就可以转化成没有同步保护的操作，可以提高并发和性能。</p>
<h4 id="2-标量替换"><a href="#2-标量替换" class="headerlink" title="2. 标量替换"></a>2. 标量替换</h4><p>JVM 中的原始数据类型（基础类型和引用类型等）都不能在进一步分解，它们成为标量。如果一个对象可以继续分解，那么它就成为聚合量，Java 中的<strong>对象</strong>是典型的聚合量。如果逃逸分析证明一个对象不会被外部访问，且该对象可分解，那么程序执行时，就可以直接创建若干个被该方法使用到的成员变量来代替。拆分后的变量可以被单独分享和优化，可以各自分别在栈帧和寄存器上分配空间，原本的对象就无需整体分配空间了。</p>
<h4 id="3-锁消除"><a href="#3-锁消除" class="headerlink" title="3. 锁消除"></a>3. 锁消除</h4><pre class=" language-Java"><code class="language-Java"> public static void alloc()&#123;
     byte[] a = new byte[50];
     synchronized(a)&#123;
         b[0]=1;
     &#125;
 &#125;

 public static void main(String [] args)&#123;
    long b = System.curentTimeMillis();
    for(int i =0;i<10000;i++)&#123;
        alloc();
    &#125;
    long c = System.currentTimeMillis();
    System.out.println(c-b);
 &#125;</code></pre>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><p>JVM 为对象分配的空间，并不一定都在堆上，有可能分配在栈上，也可能两者都不在。具体情况由 JVM 自行优化。但逃逸分析存在时间消耗，所以性能提升并不明显。</p>
]]></content>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm-gc-zgc</title>
    <url>/blogs/jvm-gc-zgc.html</url>
    <content><![CDATA[<h1 id="Java-虚拟机-ZGC-简介"><a href="#Java-虚拟机-ZGC-简介" class="headerlink" title="Java 虚拟机 ZGC 简介"></a>Java 虚拟机 ZGC 简介</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>查看 Jdk 使用的 GC</p>
<pre class=" language-java"><code class="language-java">java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintCommandLineFlags <span class="token operator">-</span>version</code></pre>
<p>ZGC 特点：</p>
<ol>
<li>暂停时间不超过 10</li>
</ol>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
        <tag>zgc</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 jvm - JIT 即时编译器</title>
    <url>/blogs/jvm-jit.html</url>
    <content><![CDATA[<h1 id="深入理解-jvm-JIT-即时编译器"><a href="#深入理解-jvm-JIT-即时编译器" class="headerlink" title="深入理解 jvm - JIT 即时编译器"></a>深入理解 jvm - JIT 即时编译器</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>JVM 及时编译 JIT</p>
<h2 id="C1"><a href="#C1" class="headerlink" title="C1"></a>C1</h2><h2 id="C2"><a href="#C2" class="headerlink" title="C2"></a>C2</h2><h2 id="分层编译"><a href="#分层编译" class="headerlink" title="分层编译"></a>分层编译</h2><ol>
<li><p>第 0 层：程序解释执行，默认开启性能监控功能（Profiling），如果不开启，可触发第二层编译；</p>
</li>
<li><p>第 1 层：可称为 C1 编译，将字节码编译为本地代码，进行简单、可靠的优化，不开启 Profiling；</p>
</li>
<li><p>第 2 层：也称为 C1 编译，开启 Profiling，仅执行带方法调用次数和循环回边执行次数 profiling 的 C1 编译；</p>
</li>
<li><p>第 3 层：也称为 C1 编译，执行所有带 Profiling 的 C1 编译；</p>
</li>
<li><p>第 4 层：可称为 C2 编译，也是将字节码编译为本地代码，但是会启用一些编译耗时较长的优化，甚至会根据性能监控信息进行一些不可靠的激进优化。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>jvm</tag>
        <tag>jit</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm-parameter-command</title>
    <url>/blogs/jvm-parameter-command.html</url>
    <content><![CDATA[<h2 id="JVM-Command"><a href="#JVM-Command" class="headerlink" title="JVM-Command"></a>JVM-Command</h2><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h3 id="内存相关"><a href="#内存相关" class="headerlink" title="内存相关"></a><strong>内存相关</strong></h3><ol>
<li>表示设置 JVM 启动内存的最小值为 20M，必须以 M 为单位：</li>
</ol>
<pre class=" language-Java"><code class="language-Java">-Xms20M</code></pre>
<ol start="2">
<li>表示设置 JVM 启动内存的最大值为 20M，必须以 M 为单位。将 -Xmx 和 -Xms 设置为一样可以避免 JVM 内存自动扩展。打的项目 -Xmx 和 -Xms 一般设置为 10G 20G 或者更大。</li>
</ol>
<pre class=" language-Java"><code class="language-Java">-Xmx20M</code></pre>
<ol start="3">
<li>表示输出虚拟机中 GC 的详细情况：</li>
</ol>
<pre class=" language-Java"><code class="language-Java">-verbose:gc</code></pre>
<ol start="4">
<li>表示可以设置虚拟机栈的大小为 128 K</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token operator">-</span>Xss128k</code></pre>
<ol start="5">
<li>表示设置本地方法栈的大小为 128 k。但 HotSpot 并不区分虚拟机栈和本地方方法栈，因此对于 HotSpot 来说这个参数是无效的：</li>
</ol>
<pre class=" language-Java"><code class="language-Java">-Xoss128k</code></pre>
<ol start="6">
<li><p>表示 JVM 初始分配的永久代的最大容量，必须以 M 为单位，大部分情况下这个参数默认为 64 M。</p>
<p>```Java</p>
</li>
</ol>
<p>-XX:PermSize=10M</p>
<pre><code>
7. 表示 JVM 允许分配的永久代的最大容量，必须以 M 为单位，大部分情况下这个参数默认为 64 M

```Java
-XX:MaxPermSize=10M</code></pre>
<h3 id="垃圾回收管理"><a href="#垃圾回收管理" class="headerlink" title="垃圾回收管理"></a>垃圾回收管理</h3><ol>
<li><p>表示关闭 JVM 对类的垃圾回收</p>
<p>```Java</p>
</li>
</ol>
<p>-Xnoclassgc</p>
<pre><code>
2. 表示可以看到每次 GC 前后堆内存布局

```Java
-XX:+PrintHeapAtGC</code></pre>
<ol start="3">
<li>在控制台打印 GC 信息</li>
</ol>
<pre class=" language-Java"><code class="language-Java">-XX:+PrintGC</code></pre>
<ol start="4">
<li>表示在控制台打印 GC 的具体细节</li>
</ol>
<pre class=" language-Java"><code class="language-Java">-XX:PrintGCDetails</code></pre>
<ol start="5">
<li><p>表示让 JVM 使用 G1 垃圾收集器</p>
<p>```Java</p>
</li>
</ol>
<p>-XX:+UseG1GC</p>
<pre><code>
6. 表示年轻代的大小

``` Java
-Xmn</code></pre>
<ol start="7">
<li>设置年轻代（包括 Eden 和两个 Survivor 区）与年老代的比值（除去持久代）。设置为 4，则年轻代与年老代所占比值为 1：4，年轻代占整个堆栈的 1/5</li>
</ol>
<pre class=" language-Java"><code class="language-Java">-XX:NewRatio=4</code></pre>
<ol start="8">
<li>设置年轻代中 Eden 区与 Survivor 区的大小比值。设置为 4，则两个 Survivor 区与一个 Eden 区的比值为 2:4，则一个 Survivor 区占整个年轻代的1/6</li>
</ol>
<pre class=" language-Java"><code class="language-Java">-XX:SurvivorRatio=4</code></pre>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm-reference-types</title>
    <url>/blogs/jvm-reference-types.html</url>
    <content><![CDATA[<h1 id="JVM-四种引用类型"><a href="#JVM-四种引用类型" class="headerlink" title="JVM 四种引用类型"></a>JVM 四种引用类型</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>本文实践代码可以参阅 <a href="https://github.com/Starriers/CodeCombat">CodeCombat</a> 的 <a href="https://github.com/Starriers/CodeCombat/tree/master/JVM/src/main/java/org/starrier/codecombat">JVM</a>。</p>
<h3 id="1-强引用"><a href="#1-强引用" class="headerlink" title="1. 强引用"></a>1. 强引用</h3><p>强引用是程序中一般使用的引用类型，强引用的对象是可触及的，不会被回收。相对的，弱引用，软引用，虚引用的对象是可触及的，在一定情况下，是可以被回收的。</p>
<pre class=" language-Java"><code class="language-Java">StringBuffer str = new StringBuffer("Hello World");</code></pre>
<p>以上代码中，局部变量 str 将被分配在栈上，而对象 StringBuffer 实例对象将被分配在堆上。局部变量 str 指向 StringBuffer 实例所在的堆空间，通过 str 可以操作该实例，那么 str 就是 StringBuffer 实例的强引用。</p>
<p>如果此时再进行</p>
<pre class=" language-java"><code class="language-java">StringBuffer str1 <span class="token operator">=</span> str<span class="token punctuation">;</span></code></pre>
<p>那么 str 所指向的对象也将被 str1 所指向，同时在局部变量表上会分配空间存放 str1 变量。此时，StringBuffer 实例就有两个引用。对引用进行 “==” 操作时，表示比较对象所指向的堆空间是否相同，不表示量操作数所指向的对象是否想等。</p>
<p><strong>特点</strong>：</p>
<ol>
<li>强引用可以直接访问目标对象</li>
<li>强引用所指向的对象在任何时候都不会被系统回收，虚拟机宁愿抛出 OOM 异常，也不会回收强引用所指向的对象。</li>
<li>强引用可能导致内存泄露。</li>
</ol>
<h3 id="2-软引用"><a href="#2-软引用" class="headerlink" title="2. 软引用"></a>2. 软引用</h3><p>如果一个对象只具有软引用，在内存足够的情况下，垃圾回收区不会回收它，如果内存空间不足，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内敏感的告诉缓存。</p>
<p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JVM 就会把这个软引用加入到与之关联的引用队列中。</p>
<h3 id="3-弱引用"><a href="#3-弱引用" class="headerlink" title="3. 弱引用"></a>3. 弱引用</h3><p>弱引用与软引用的区别：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描所管辖的内存区域时，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。</p>
<p>弱引用对象可以和一个引用队列一起使用，如果弱引用所引用的对象被垃圾回收，JVM 就会把这个弱引用加入到与之关联的引用队列中。</p>
<h3 id="4-虚引用"><a href="#4-虚引用" class="headerlink" title="4. 虚引用"></a>4. 虚引用</h3><p>如果一个对象仅持有虚引用，那么它和没有任何引用一样，在任何时候都可能被垃圾回收。虚引用主要用来跟踪对象被垃圾回收的活动。虚引用与弱引用和软引用的区别在于：虚引用必须和引用队列一起使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象后，将这个虚引用加入引用队列，以通知应用程序对象的回收情况。</p>
<p><strong>注意</strong></p>
<p>软引用和弱引用都适合用来保存那些可有可无的缓存数据。如果这么做，当系统内存不足时，这些缓存就会被回收，不会导致内存溢出。而当内存资源充足时，这些缓存书籍有可以存在相当长的时间，从而起到加速系统的作用。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Java JVM  tools 简介</title>
    <url>/blogs/jvm-tools-introduce.html</url>
    <content><![CDATA[<h1 id="Java-JVM-tools-简介"><a href="#Java-JVM-tools-简介" class="headerlink" title="Java JVM  tools 简介"></a>Java JVM  tools 简介</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="Java-JVM-工具"><a href="#Java-JVM-工具" class="headerlink" title="Java JVM 工具"></a>Java JVM 工具</h2><h2 id="1-jps"><a href="#1-jps" class="headerlink" title="1. jps"></a>1. jps</h2><h2 id="2-jstack"><a href="#2-jstack" class="headerlink" title="2. jstack"></a>2. jstack</h2><h2 id="3-jstat"><a href="#3-jstat" class="headerlink" title="3. jstat"></a>3. jstat</h2><h2 id="4-jmap"><a href="#4-jmap" class="headerlink" title="4. jmap"></a>4. jmap</h2><h2 id="5-jhat"><a href="#5-jhat" class="headerlink" title="5. jhat"></a>5. jhat</h2><h2 id="6-jvisualvm"><a href="#6-jvisualvm" class="headerlink" title="6. jvisualvm"></a>6. jvisualvm</h2><h2 id="7-jconsole"><a href="#7-jconsole" class="headerlink" title="7. jconsole"></a>7. jconsole</h2><h2 id="8-jconsole"><a href="#8-jconsole" class="headerlink" title="8. jconsole"></a>8. jconsole</h2><h2 id="9-Memory-Analyzer"><a href="#9-Memory-Analyzer" class="headerlink" title="9. Memory Analyzer"></a>9. Memory Analyzer</h2><h2 id="系统相关工具"><a href="#系统相关工具" class="headerlink" title="系统相关工具"></a>系统相关工具</h2><h3 id="1-top"><a href="#1-top" class="headerlink" title="1. top"></a>1. top</h3><blockquote>
<p>查看系统负载，以及系统资源情况</p>
</blockquote>
<h3 id="2-ps"><a href="#2-ps" class="headerlink" title="2. ps"></a>2. ps</h3><blockquote>
<p>查看系统进程命令</p>
</blockquote>
<h3 id="3-netstat"><a href="#3-netstat" class="headerlink" title="3. netstat"></a>3. netstat</h3><blockquote>
<p>网络端口统计</p>
</blockquote>
<h3 id="4-df-du"><a href="#4-df-du" class="headerlink" title="4. df,du"></a>4. df,du</h3><blockquote>
<p>磁盘文件查看命令，</p>
</blockquote>
<h2 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h2><h3 id="1-grep"><a href="#1-grep" class="headerlink" title="1. grep"></a>1. grep</h3><h3 id="2-find"><a href="#2-find" class="headerlink" title="2. find"></a>2. find</h3><h3 id="3-tail"><a href="#3-tail" class="headerlink" title="3. tail"></a>3. tail</h3><h3 id="4-less-more-cat"><a href="#4-less-more-cat" class="headerlink" title="4. less,more,cat"></a>4. less,more,cat</h3><h3 id="5-awk"><a href="#5-awk" class="headerlink" title="5. awk"></a>5. awk</h3><h3 id="6-sed"><a href="#6-sed" class="headerlink" title="6. sed"></a>6. sed</h3><blockquote>
<p>文本替换工具</p>
</blockquote>
]]></content>
      <tags>
        <tag>jvm</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>k8s-components</title>
    <url>/blogs/k8s-components.html</url>
    <content><![CDATA[<h1 id="Kubernents-components-简介"><a href="#Kubernents-components-简介" class="headerlink" title="Kubernents - components 简介"></a>Kubernents - components 简介</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>K8s 集群组件</p>
<table>
<thead>
<tr>
<th>组件名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>etcd</td>
<td>一个高可用的 KV 存储和服务发现系统</td>
</tr>
<tr>
<td>flannel</td>
<td>实现跨主机的容器网络通信</td>
</tr>
<tr>
<td>kube-apiServer</td>
<td>提供 k8s 集群的 API 调用</td>
</tr>
<tr>
<td>kube-controller-manager</td>
<td>确保集群服务</td>
</tr>
<tr>
<td>kubelet</td>
<td>调度容器，分配到 Node</td>
</tr>
<tr>
<td>kube-proxy</td>
<td>提供网络代理服务</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>k8s</tag>
      </tags>
  </entry>
  <entry>
    <title>linux-cat</title>
    <url>/blogs/linux-cat.html</url>
    <content><![CDATA[<h2 id="Linux-cat"><a href="#Linux-cat" class="headerlink" title="Linux cat"></a>Linux cat</h2><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>命令的用途是连接文件或标准输入并打印，这个命令常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。</p>
]]></content>
  </entry>
  <entry>
    <title>linux-menu</title>
    <url>/blogs/linux-menu.html</url>
    <content><![CDATA[<h1 id="Linux-目录简介"><a href="#Linux-目录简介" class="headerlink" title="Linux - 目录简介"></a>Linux - 目录简介</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<table>
<thead>
<tr>
<th></th>
<th>可分享的（shareable）</th>
<th>不可分享的</th>
</tr>
</thead>
<tbody><tr>
<td>不可变的（static）</td>
<td>/usr(软件放置处)</td>
<td>/etc (配置文件)</td>
</tr>
<tr>
<td></td>
<td>/opt（第三方软件）</td>
<td>/boot（开机及内核文件）</td>
</tr>
</tbody></table>
<p>：根目录，一般根目录下只存放目录，不要存放件，/etc、/bin、/dev、/lib、/sbin应该和根目录放置在一个分区中</p>
<p>img</p>
<p>/bin: /usr/bin: 可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等。</p>
<p>/boot：放置linux系统启动时用到的一些文件。/boot/vmlinuz 为 linux 的内核文件，以及 /boot/gurb。建议单独分区，分区大小100M即可</p>
<p>/dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱 mount /dev/cdrom /mnt。</p>
<p>/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有 /etc/inittab、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d修改配置文件之前记得备份。</p>
<p>注：/etc/X11 存放与 x windows 有关的设置。</p>
<p>/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，<del>表示当前用户的家目录，</del>edu 表示用户 edu 的家目录。建议单独分区，并设置较大的磁盘空间，方便用户存放数据</p>
<p>/lib: /usr/lib: /usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助，比较重要的目录为 /lib/modules。</p>
<p>/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下，通常这个目录会自动出现在装置目录下。如加载硬盘于 /disk 中，此目录下就会自动产生目录 /disk/lost+found</p>
<p>/mnt: /media：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，也不一定，可以选择任意位置进行挂载。</p>
<p>/opt：给主机额外安装软件所摆放的目录。如：FC4使用的Fedora 社群开发软件，如果想要自行安装新的 KDE 桌面软件，可以将该软件安装在该目录下。以前的 Linux 系统中，习惯放置在 /usr/local 目录下</p>
<p>/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有 /proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等。</p>
<p>/root：系统管理员root的家目录，系统第一个启动的分区为 /，所以最好将 /root和 /放置在一个分区下。</p>
<p>/sbin: /usr/sbin: /usr/local/sbin：放置系统管理员使用的可执行命令，如fdisk、shutdown、mount 等。与 /bin 不同的是，这几个目录是给系统管理员 root使用的命令，一般用户只能”查看”而不能设置和使用。</p>
<p>/tmp：一般用户或正在执行的程序临时存放文件的目录,任何人都可以访问,重要数据不可放置在此目录下</p>
<p>/srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 /srv/www 内。</p>
<p>/usr：应用程序存放目录，/usr/bin 存放应用程序，/usr/share 存放共享数据，/usr/lib 存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。/usr/local: 存放软件升级包。/usr/share/doc: 系统说明文件存放目录。/usr/share/man: 程序说明文件存放目录，使用 man ls 时会查询 /usr/share/man/man1/ls.1.gz 的内容建议单独分区，设置较大的磁盘空间</p>
<p>/var：放置系统执行过程中经常变化的文件，如随时更改的日志文件 /var/log，/var/log/message：所有的登录文件存放目录，/var/spool/mail：邮件存放的目录，/var/run:程序或服务启动后，其PID存放在该目录下。建议单独分区，设置较大的磁盘空间</p>
<p>一切皆文件<br>Linux 对数据文件(.mp3、.bmp)，程序文件(.c、.h、*.o)，设备文件（LCD、触摸屏、鼠标），网络文件( socket ) 等的管理都抽象为文件，使用统一的方式方法管理。</p>
<p>文件分类：</p>
<p>1）普通文件( 数据文件 )</p>
<p>普通文件是用于存放数据、程序等信息的文件，一般都长期地存放在外存储器（磁盘）中。普通文件又分为文本文件和二进制文件。</p>
<p>2）目录文件</p>
<p>目录文件是文件系统中一个目录所包含的目录项所组成的文件。</p>
<p>3）设备文件</p>
<p>设备文件是用于为操作系统与设备提供连接的一种文件。在Linux系统中将设备作为文件来处理，操作设备就像是操作普通文件一样。每一个设备对应一个设备文件，存放在 /dev 目录中。</p>
<p>5）链接文件</p>
<p>似于 windows 下的快捷方式，链接又可以分为软链接（符号链接）和硬链接。</p>
<p>6）管道文件</p>
<p>管道文件主要用于在进程间传递数据的一种特殊文件。</p>
<p>7）套接口文件</p>
<p>主要用于不同计算机间网络通信的一种特殊文件。</p>
<p>img</p>
]]></content>
  </entry>
  <entry>
    <title>linux-mysql</title>
    <url>/blogs/linux-mysql.html</url>
    <content><![CDATA[<h1 id="Linux-环境下-MySQL-数据库操作"><a href="#Linux-环境下-MySQL-数据库操作" class="headerlink" title="Linux 环境下 MySQL 数据库操作"></a>Linux 环境下 MySQL 数据库操作</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>导出数据库</p>
<p>scp</p>
<p><code>scp username@ip:mysql 路径/x.tar.gz ./</code></p>
<p>cd ~ </p>
<pre class=" language-sql"><code class="language-sql">mysqldump <span class="token operator">-</span>u databaseusername <span class="token operator">-</span>p databaseName <span class="token operator">></span> x<span class="token punctuation">.</span>sql</code></pre>
<p>scp  username@ip:path ./</p>
<p>Note: </p>
<ul>
<li>username 为服务器用户名</li>
<li>ip 为服务器公网 IP，存在 domain 时，可以使用 domain 替代</li>
<li>./ 可以修改，当前意义为，存储在当前目录下</li>
</ul>
<p>MySQL command import</p>
<pre class=" language-sql"><code class="language-sql">source path<span class="token operator">/</span>x<span class="token punctuation">.</span>sql</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Linux 下文件的打包与压缩</title>
    <url>/blogs/linux-package.html</url>
    <content><![CDATA[<h1 id="Linux-下文件的打包与压缩"><a href="#Linux-下文件的打包与压缩" class="headerlink" title="Linux 下文件的打包与压缩"></a>Linux 下文件的打包与压缩</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<table>
<thead>
<tr>
<th>工具</th>
<th>文件扩展名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>bzip2</td>
<td>.bz2</td>
<td>采用 Burrows-Wheeler 块排序文本压缩算法和霍夫曼编码</td>
</tr>
<tr>
<td>compress</td>
<td>.Z</td>
<td>原始的 Unix 文件压缩工具，逐渐消失中</td>
</tr>
<tr>
<td>gzip</td>
<td>.gz</td>
<td>GUN 压缩工具，用 Lempel-Ziv 编码</td>
</tr>
<tr>
<td>zip</td>
<td>.zip</td>
<td>Win 上的 PKZIP 工具的 unix 实现</td>
</tr>
</tbody></table>
<h2 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h2><ol>
<li>bzip2</li>
</ol>
<blockquote>
<ol>
<li>bzip2 用于压缩文件</li>
<li>bzcat 用来显示压缩文本文件内容</li>
<li>bunzip2 用来解压缩 .bz2 文件</li>
<li>bzip2recover 用来尝试恢复损坏的压缩文件</li>
</ol>
</blockquote>
<ol start="2">
<li>bzcat</li>
</ol>
<blockquote>
<p>用来显示压缩的文本文件内容</p>
</blockquote>
<ol start="3">
<li>bunzip2</li>
</ol>
<blockquote>
<p>用来解压缩 .bz2 文件</p>
</blockquote>
<h3 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h3><table>
<thead>
<tr>
<th>功能</th>
<th>全名</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-A</td>
<td>–concatenate</td>
<td>将一个已有 tar 归档文件追加到另一个已有 tar 归档文件</td>
</tr>
<tr>
<td>-c</td>
<td>–create</td>
<td>创建一个新的 tar 归档文件</td>
</tr>
</tbody></table>
<h2 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h2><pre class=" language-linux"><code class="language-linux"> tar
      c  创建
      f  指定归档文件名称
      t  显示归档文件中的内容
      r  向归档文件中添加文件
      --get 取出单个文件
      --delete 删除单个文件
      x   取出归档文件中的所有内容
      -C  指定解档目录
      -z  gz 格式压缩
      -j  bz2 格式压缩
      -J  xz 格式压缩</code></pre>
<h2 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h2><ol>
<li>gz</li>
<li>gzip etc.tar  压缩成 gz 格式</li>
<li>gunzip etc。tar.gz 压缩成 gz 格式压缩包</li>
<li>tar zcf etc.tar.gz /etc 把文件归档为 tar 并压缩成 gz （将打包和压缩合并成一步）</li>
<li>tar zxf etc.tar.gz 解压并解档 gz 格式压缩包（将打包解压到当前目录）</li>
</ol>
<pre><code>--gzip bin.tar  （将打包好的 bin.tar 压缩成 gz 格式，压缩完成后，之前的打包消失）</code></pre>
]]></content>
  </entry>
  <entry>
    <title>文章目录 - 理论 - 中间件</title>
    <url>/blogs/middle-intruduct.html</url>
    <content><![CDATA[<h1 id="目录-理论-中间件"><a href="#目录-理论-中间件" class="headerlink" title="目录 - 理论 -  中间件"></a>目录 - 理论 -  中间件</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一-缓存中间件"><a href="#一-缓存中间件" class="headerlink" title="一. 缓存中间件"></a>一. 缓存中间件</h2><h3 id="1-Redis"><a href="#1-Redis" class="headerlink" title="1. Redis"></a>1. Redis</h3><ul>
<li><a href="https://starrier.starrier.org/2021/01/12/redis-lua/">redis-lua</a></li>
<li><a href="https://starrier.starrier.org/2021/01/12/redis-hyperloglog/">redis-hyperloglog</a></li>
</ul>
<h2 id="二-容器技术"><a href="#二-容器技术" class="headerlink" title="二. 容器技术"></a>二. 容器技术</h2><h3 id="1-Docker"><a href="#1-Docker" class="headerlink" title="1. Docker"></a>1. Docker</h3><h3 id="2-Kubernetes"><a href="#2-Kubernetes" class="headerlink" title="2. Kubernetes"></a>2. Kubernetes</h3><h2 id="三-NoSQL-数据库"><a href="#三-NoSQL-数据库" class="headerlink" title="三. NoSQL 数据库"></a>三. NoSQL 数据库</h2><h2 id="1-ElasticSearch"><a href="#1-ElasticSearch" class="headerlink" title="1. ElasticSearch"></a>1. ElasticSearch</h2><h2 id="四-Spring-Framework"><a href="#四-Spring-Framework" class="headerlink" title="四. Spring Framework"></a>四. Spring Framework</h2><h3 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h3><h5 id="1-Spring-Bean"><a href="#1-Spring-Bean" class="headerlink" title="1. Spring Bean"></a>1. Spring Bean</h5><ul>
<li><a href="">spring-bean-BeanFactory</a></li>
<li><a href="">spring-bean-FactoryBean</a></li>
<li><a href="">spring-bean-BeanPostProcessor</a></li>
<li><a href="">spring-bean-注入</a></li>
</ul>
<h5 id="2-Spring-IOC"><a href="#2-Spring-IOC" class="headerlink" title="2. Spring IOC"></a>2. Spring IOC</h5><ul>
<li><a href="">spring-ioc-概述</a></li>
<li><a href="">spring-ioc-原理</a></li>
<li><a href="">spring-ioc-初始化</a></li>
<li><a href="">spring-ioc-依赖注入</a></li>
</ul>
<h5 id="3-Spring-AOP"><a href="#3-Spring-AOP" class="headerlink" title="3. Spring AOP"></a>3. Spring AOP</h5><ul>
<li><a href="">spring-aop-概述</a></li>
<li><a href="">spring-aop-原理</a></li>
<li><a href="">spring-aop-AopProxy</a></li>
<li><a href="">spring-aop-拦截器</a></li>
<li><a href="">spring-aop-高级特性</a></li>
</ul>
<h5 id="4-Spring-事务"><a href="#4-Spring-事务" class="headerlink" title="4. Spring 事务"></a>4. Spring 事务</h5><ul>
<li><a href="">spring-事务概述</a></li>
<li><a href="">spring-事务原理</a></li>
<li><a href="">spring-事务处理器</a></li>
</ul>
<h5 id="5-Spring-数据库相关"><a href="#5-Spring-数据库相关" class="headerlink" title="5. Spring 数据库相关"></a>5. Spring 数据库相关</h5><ul>
<li><a href="">spring-database-概述</a></li>
<li><a href="">spring-database-jdbc</a></li>
<li><a href="">spring-database-hibernate</a></li>
<li><a href="">spring-database-mybatis</a></li>
</ul>
<h5 id="6-Spring-MVC"><a href="#6-Spring-MVC" class="headerlink" title="6. Spring MVC"></a>6. Spring MVC</h5><ul>
<li><a href="">spring-mvc-概述</a></li>
<li><a href="">spring-mvc-初始化</a></li>
<li><a href="">spring-mvc-原理</a></li>
<li><a href="">spring-mvc-视图</a></li>
</ul>
<h1 id="Machine-Learning"><a href="#Machine-Learning" class="headerlink" title="Machine Learning"></a>Machine Learning</h1><p>-<a href="">梯度下降</a></p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul>
<li><a href="https://starrier.starrier.org/blogs/utils-git-commit-revert.html">使用 git-convert 回滚已经提交的 commit</a></li>
<li><a href="https://starrier.starrier.org/blogs/git-rest.html">使用 git-reset 进行版本</a></li>
<li><a href="https://starrier.starrier.org/blogs/utils-git-commit-author.html">git-commit 修改提交的 commit 信息 author</a></li>
<li><a href="https://starrier.starrier.org/blogs/utils-git-commit-refactor.html">git-commit 已提交 commit 记录的重写</a></li>
<li><a href=""></a></li>
<li><a href=""></a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>机器学习算法 - 深入理解 Embedding</title>
    <url>/blogs/ml-algorithm-embedding.html</url>
    <content><![CDATA[<h1 id="机器学习算法-深入理解-Embedding"><a href="#机器学习算法-深入理解-Embedding" class="headerlink" title="机器学习算法 - 深入理解 Embedding"></a>机器学习算法 - 深入理解 Embedding</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
  </entry>
  <entry>
    <title>机器学习算法 - Gradient Boosting 梯度提升</title>
    <url>/blogs/ml-algorithm-gradient-boosting.html</url>
    <content><![CDATA[<h1 id="机器学习算法-梯度提升-Gradient-Boosting"><a href="#机器学习算法-梯度提升-Gradient-Boosting" class="headerlink" title="机器学习算法 - 梯度提升 - Gradient Boosting"></a>机器学习算法 - 梯度提升 - Gradient Boosting</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>machine-learning</tag>
      </tags>
  </entry>
  <entry>
    <title>ml-gan</title>
    <url>/blogs/ml-gan.html</url>
    <content><![CDATA[<h1 id="机器学习-GAN-简介"><a href="#机器学习-GAN-简介" class="headerlink" title="机器学习 - GAN -简介"></a>机器学习 - GAN -简介</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>ml</tag>
        <tag>AI</tag>
        <tag>GAN</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 RocketMQ 事务原理 - 实战</title>
    <url>/blogs/mq-rocket-transaction.html</url>
    <content><![CDATA[<h1 id="深入理解-RocketMQ-事务原理-实战"><a href="#深入理解-RocketMQ-事务原理-实战" class="headerlink" title="深入理解 RocketMQ 事务原理 - 实战"></a>深入理解 RocketMQ 事务原理 - 实战</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>RocketMQ</tag>
        <tag>rocketmq</tag>
        <tag>transaction</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis 缓存</title>
    <url>/blogs/mybatis-cache.html</url>
    <content><![CDATA[<h1 id="MyBaits-缓存"><a href="#MyBaits-缓存" class="headerlink" title="MyBaits 缓存"></a>MyBaits 缓存</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p><code>MyBatis</code> 的一些关键特性（例如通过 <code>&lt;association&gt;</code> 和 <code>&lt;collection&gt;</code> 建立级联映射<br>避免循环引用（circular references）、加速重复嵌套查询等）都是基于 <code>MyBatis</code> 一级缓存实现的，而且 <code>MyBatis</code> 结果集映射相关代码重度依赖 <code>CacheKey</code>，所以目前 <code>MyBatis</code> 不支持关闭一级缓存。</p>
]]></content>
      <tags>
        <tag>mybatis</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 MyBatis - PooledDataSource</title>
    <url>/blogs/mybatis-pooled-data-source.html</url>
    <content><![CDATA[<h1 id="深入理解-MyBatis-PooledDataSource"><a href="#深入理解-MyBatis-PooledDataSource" class="headerlink" title="深入理解 MyBatis - PooledDataSource"></a>深入理解 MyBatis - PooledDataSource</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>我们在进行数据库链接操作时，会通过 <code>JDBC</code>  的 <code>connection</code> 进行数据库操作。但是频繁的创建和销毁 <code>connection</code> 会影响执行效率。因此 <code>MyBatis</code> 中存在连接池技术</p>
<ul>
<li><code>pooled</code></li>
<li><code>unpooled</code> </li>
</ul>
<h3 id="PooledDataSource-分析"><a href="#PooledDataSource-分析" class="headerlink" title="PooledDataSource 分析"></a><code>PooledDataSource</code> 分析</h3><p>数据库基础配置以及事务的隔离级别</p>
<pre class=" language-java"><code class="language-java">
  <span class="token keyword">private</span> String driver<span class="token punctuation">;</span>
  <span class="token keyword">private</span> String url<span class="token punctuation">;</span>
  <span class="token keyword">private</span> String username<span class="token punctuation">;</span>
  <span class="token keyword">private</span> String password<span class="token punctuation">;</span>

  <span class="token keyword">private</span> Boolean autoCommit<span class="token punctuation">;</span>
  <span class="token keyword">private</span> Integer defaultTransactionIsolationLevel<span class="token punctuation">;</span></code></pre>
<p>初始化时，会加载并注册驱动</p>
<pre class=" language-java"><code class="language-java">  <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    Enumeration<span class="token operator">&lt;</span>Driver<span class="token operator">></span> drivers <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getDrivers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>drivers<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      Driver driver <span class="token operator">=</span> drivers<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      registeredDrivers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> driver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p>获取数据库的连接时，会调用以下方法</p>
<ol>
<li> 构造配置文件，用户名和密码，准备链接</li>
<li> 加载驱动，准备链接</li>
<li> 获取数据库连接</li>
<li> 对连接进行配置</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UnpooledDataSource</span> <span class="token keyword">implements</span> <span class="token class-name">DataSource</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

  <span class="token keyword">private</span> Connection <span class="token function">doGetConnection</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    Properties props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>driverProperties <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      props<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>driverProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>password <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      props<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">doGetConnection</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

  <span class="token keyword">private</span> Connection <span class="token function">doGetConnection</span><span class="token punctuation">(</span>Properties properties<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">initializeDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Connection connection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">configureConnection</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p>初始化驱动</p>
<pre class=" language-java"><code class="language-java">  <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">initializeDriver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registeredDrivers<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> driverType<span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>driverClassLoader <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          driverType <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> driverClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          driverType <span class="token operator">=</span> Resources<span class="token punctuation">.</span><span class="token function">classForName</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// DriverManager requires the driver to be loaded via the system ClassLoader.</span>
        <span class="token comment" spellcheck="true">// http://www.kfu.com/~nsayer/Java/dyn-jdbc.html</span>
        Driver driverInstance <span class="token operator">=</span> <span class="token punctuation">(</span>Driver<span class="token punctuation">)</span>driverType<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DriverProxy</span><span class="token punctuation">(</span>driverInstance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registeredDrivers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>driver<span class="token punctuation">,</span> driverInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SQLException</span><span class="token punctuation">(</span><span class="token string">"Error setting driver on UnpooledDataSource. Cause: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p> 对链接进行配置，查看是否是自动提交，是否存在配置的事务隔离级别</p>
<pre class=" language-java"><code class="language-java">  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">configureConnection</span><span class="token punctuation">(</span>Connection conn<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>autoCommit <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> autoCommit <span class="token operator">!=</span> conn<span class="token punctuation">.</span><span class="token function">getAutoCommit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span>autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultTransactionIsolationLevel <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      conn<span class="token punctuation">.</span><span class="token function">setTransactionIsolation</span><span class="token punctuation">(</span>defaultTransactionIsolationLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
      <tags>
        <tag>mybatis</tag>
        <tag>源码</tag>
        <tag>source-code</tag>
      </tags>
  </entry>
  <entry>
    <title>minify-html 使用详解</title>
    <url>/blogs/npm-minify-html.html</url>
    <content><![CDATA[<h1 id="minify-html-使用详解"><a href="#minify-html-使用详解" class="headerlink" title="minify-html 使用详解"></a>minify-html 使用详解</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>plugin GitHub 地址：<a href="https://github.com/kangax/html-minifier">minify-html</a></p>
<p><code>npm</code> 安装</p>
<pre class=" language-npm"><code class="language-npm">npm install html-minifier</code></pre>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>seo</tag>
        <tag>minify-html</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式 - 建造者模式</title>
    <url>/blogs/pattern-design-builder.html</url>
    <content><![CDATA[<h1 id="设计模式-建造者模式"><a href="#设计模式-建造者模式" class="headerlink" title="设计模式 - 建造者模式"></a>设计模式 - 建造者模式</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>各个具体的建造者相互独立，有利于系统的扩展。</li>
<li>客户端不必知道产品内部的组成细节，便于控制细节风险。</li>
</ol>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ol>
<li>产品的组成部分必须相同，这限制了其使用范围。</li>
<li>如果产品的内部变化复杂，该模式会增加很多的建造者类。</li>
</ol>
<p>建造者模式和工厂模式的关注的不同，建造者模式注重零部件的组装过程，而工厂方法模式更注重零部件的创建过程，但两者可以结合使用。</p>
<h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><h3 id="产品角色"><a href="#产品角色" class="headerlink" title="产品角色"></a>产品角色</h3><p>他是包含多个组成部分的复杂对象，是由建造者来创建其各个组成部件。</p>
<h3 id="抽象建造者"><a href="#抽象建造者" class="headerlink" title="抽象建造者"></a>抽象建造者</h3><p>它是一个包含创建产品各个子部件的抽象方法的 接口，通常还包含一个返回复杂产品的方法。</p>
<h3 id="具体建造者"><a href="#具体建造者" class="headerlink" title="具体建造者"></a>具体建造者</h3><p>实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。</p>
<h3 id="指挥者"><a href="#指挥者" class="headerlink" title="指挥者"></a>指挥者</h3><p>它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol>
<li>创建的对象较复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是稳定的。</li>
<li>创建复杂对象的算法独立于该对象的组成部分已经它们的装配方式，即产品的构建过程和最终的表示是独立的。</li>
</ol>
<h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>建造者模式在应用过程中可以根据需要改变，如果创建的产品种类只有一种，只需要一个具体的建造者，这是可以省略掉抽象建造者，甚至可以忽略指挥者的角色。</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2>]]></content>
      <tags>
        <tag>pattern-design</tag>
        <tag>builder</tag>
      </tags>
  </entry>
  <entry>
    <title>高并发 - 缓存问题处理方案</title>
    <url>/blogs/problems-cache.html</url>
    <content><![CDATA[<h1 id="高并发-缓存问题处理方案"><a href="#高并发-缓存问题处理方案" class="headerlink" title="高并发 - 缓存问题处理方案"></a>高并发 - 缓存问题处理方案</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="特别说明-1"><a href="#特别说明-1" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><h3 id="可能是因为数据未加载到缓存中，或者缓存同一时间大面积的失效，从而导致所有请求都去查数据库，导致数据库CPU和内存负载过高，甚至宕机。"><a href="#可能是因为数据未加载到缓存中，或者缓存同一时间大面积的失效，从而导致所有请求都去查数据库，导致数据库CPU和内存负载过高，甚至宕机。" class="headerlink" title="可能是因为数据未加载到缓存中，或者缓存同一时间大面积的失效，从而导致所有请求都去查数据库，导致数据库CPU和内存负载过高，甚至宕机。"></a>可能是因为数据未加载到缓存中，或者缓存同一时间大面积的失效，从而导致所有请求都去查数据库，导致数据库CPU和内存负载过高，甚至宕机。</h3><ol>
<li>加锁计数（即限制并发的数量，可以用 semphore）或者起一定数量的队列来避免缓存失效时大量请求并发到数据库。但这种方式会降低吞吐量。</li>
<li>分析用户行为，然后失效时间均匀分布。或者在失效时间的基础上再加1~5分钟的随机数。</li>
<li>如果是某台缓存服务器宕机，则考虑做主备。</li>
</ol>
<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><h3 id="指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库中查询"><a href="#指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库中查询" class="headerlink" title="指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库中查询"></a>指用户查询数据，在数据库没有，自然在缓存中也不会有。这样就导致用户查询的时候，在缓存中找不到，每次都要去数据库中查询</h3><ol>
<li>如果查询数据库也为空，直接设置一个默认值存放到缓存，这样第二次到缓冲中获取就有值了，而不会继续访问数据库。设置一个过期时间或者当有值的时候将缓存中的值替换掉即可。</li>
<li>可以给key设置一些格式规则，然后查询之前先过滤掉不符合规则的Key。</li>
</ol>
<h2 id="缓存并发"><a href="#缓存并发" class="headerlink" title="缓存并发"></a>缓存并发</h2><h3 id="如果网站并发访问高，一个缓存如果失效，可能出现多个进程同时查询DB，同时设置缓存的情况，如果并发确实很大，这也可能造成DB压力过大，还有缓存频繁更新的问题"><a href="#如果网站并发访问高，一个缓存如果失效，可能出现多个进程同时查询DB，同时设置缓存的情况，如果并发确实很大，这也可能造成DB压力过大，还有缓存频繁更新的问题" class="headerlink" title="如果网站并发访问高，一个缓存如果失效，可能出现多个进程同时查询DB，同时设置缓存的情况，如果并发确实很大，这也可能造成DB压力过大，还有缓存频繁更新的问题"></a>如果网站并发访问高，一个缓存如果失效，可能出现多个进程同时查询DB，同时设置缓存的情况，如果并发确实很大，这也可能造成DB压力过大，还有缓存频繁更新的问题</h3><ol>
<li>对缓存查询加锁，如果KEY不存在，就加锁，然后查DB入缓存，然后解锁；其他进程如果发现有锁就等待，然后等解锁后返回数据或者进入DB查询。</li>
</ol>
<h2 id="缓存预热"><a href="#缓存预热" class="headerlink" title="缓存预热"></a>缓存预热</h2><h3 id="目的就是在系统上线前，将数据加载到缓存中。解决思路"><a href="#目的就是在系统上线前，将数据加载到缓存中。解决思路" class="headerlink" title="目的就是在系统上线前，将数据加载到缓存中。解决思路"></a>目的就是在系统上线前，将数据加载到缓存中。解决思路</h3><ol>
<li>数据量不大的话，在系统启动的时候直接加载。</li>
<li>自己写个简单的缓存预热程序。</li>
</ol>
<h2 id="缓存算法"><a href="#缓存算法" class="headerlink" title="缓存算法"></a>缓存算法</h2><ol>
<li>FIFO算法：First in First out，先进先出。原则：一个数据最先进入缓存中，则应该最早淘汰掉。也就是说，当缓存满的时候，应当把最先进入缓存的数据给淘汰掉。</li>
<li>LFU算法：Least Frequently Used，最不经常使用算法。</li>
<li>LRU算法：Least Recently Used，近期最少使用算法。</li>
<li>LRU和LFU的区别。LFU算法是根据在一段时间里数据项被使用的次数选择出最少使用的数据项，即根据使用次数的差异来决定。而LRU是根据使用时间的差异来决定的</li>
</ol>
]]></content>
      <tags>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title>reactive api 功能</title>
    <url>/blogs/reactive-api.html</url>
    <content><![CDATA[<h1 id="reactive-api-功能"><a href="#reactive-api-功能" class="headerlink" title="reactive api 功能"></a>reactive api 功能</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>An API for asynchronous programming<br>with observable streams</p>
<ul>
<li>asynchronous programming</li>
<li>observable streams</li>
<li>API</li>
</ul>
<h2 id="java-的异步编程"><a href="#java-的异步编程" class="headerlink" title="java 的异步编程"></a>java 的异步编程</h2><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 获取一个执行器</span>
        ExecutorService executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Future<span class="token operator">&lt;</span>String<span class="token operator">></span> future <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 提交之后立即执行</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">"complete"</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment" spellcheck="true">// 处理其他任务</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token comment" spellcheck="true">// 调用future.get() 获取执行结果(这居然是一个可能阻塞的调用！)</span>
            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
</code></pre>
<p>JDK8中，提供了CompletableFuture，这是对Future的扩展功能，帮助我们简化异步编程的复杂性，提供了函数式编程的能力，可以通过回调的方式处理计算结果，并且提供了转换和组合的方法。这也说明Java一直在想办法提供更好的异步操作模型。</p>
<p>讲到这里，我们应该能够了解，无论是编程语言还是系统，所能提供的异步编程模型都存在一些问题：</p>
<p>某些模型不完善，依然会导致阻塞的风险<br>对于线程，同步等问题的抽象不够，导致无法应对复杂业务逻辑<br>在异步代码的编写上，也不如同步代码那样容易理解</p>
<h2 id="RxJava-技术背景"><a href="#RxJava-技术背景" class="headerlink" title="RxJava 技术背景"></a>RxJava 技术背景</h2><h2 id="RxJava-能带来什么"><a href="#RxJava-能带来什么" class="headerlink" title="RxJava 能带来什么"></a>RxJava 能带来什么</h2><ul>
<li>优点</li>
<li>缺点</li>
</ul>
<h2 id="RxJava-的开源实践"><a href="#RxJava-的开源实践" class="headerlink" title="RxJava 的开源实践"></a>RxJava 的开源实践</h2><h2 id="RxJava-的事例"><a href="#RxJava-的事例" class="headerlink" title="RxJava 的事例"></a>RxJava 的事例</h2><ul>
<li>ReactiveX首先从Iterable这种Pull模型的身上推导出了更容易支持异步的Push模型。</li>
<li>基于Push,打造出了数据流的概念，Everything is stream</li>
<li>基于数据流设计简洁高效的异步操作流程</li>
</ul>
<p>Reactor 在 SpringBoot 中的应用</p>
]]></content>
      <tags>
        <tag>reactive</tag>
        <tag>api</tag>
      </tags>
  </entry>
  <entry>
    <title>响应式编程简介</title>
    <url>/blogs/reactive-introduce.html</url>
    <content><![CDATA[<h1 id="响应式编程简介"><a href="#响应式编程简介" class="headerlink" title="响应式编程简介"></a>响应式编程简介</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="响应式宣言"><a href="#响应式宣言" class="headerlink" title="响应式宣言"></a>响应式宣言</h2><p><a href="https://www.reactivemanifesto.org/zh-CN">https://www.reactivemanifesto.org/zh-CN</a></p>
]]></content>
      <tags>
        <tag>reactive</tag>
        <tag>rx</tag>
      </tags>
  </entry>
  <entry>
    <title>响应式编程 - ReactiveX 模型推导</title>
    <url>/blogs/reactive-reduction.html</url>
    <content><![CDATA[<h1 id="响应式编程-ReactiveX-模型推导"><a href="#响应式编程-ReactiveX-模型推导" class="headerlink" title="响应式编程 - ReactiveX 模型推导"></a>响应式编程 - ReactiveX 模型推导</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h1 id="响应式编程-ReactiveX-模型推导-1"><a href="#响应式编程-ReactiveX-模型推导-1" class="headerlink" title="响应式编程  - ReactiveX 模型推导"></a>响应式编程  - ReactiveX 模型推导</h1><p>从 迭代器推导出</p>
<p>Java 中的异步编程</p>
<ol>
<li>使用 CallBack</li>
</ol>
<blockquote>
<p>流程复杂，嵌套时，会导致 回调地狱</p>
</blockquote>
<ol start="2">
<li>使用 Future</li>
</ol>
<blockquote>
<p>JDK 8 之前，Future 为阻塞模型，JDK 8  后新增 API CompletableFuture 类，这个类是 Future 也是一个 CompletionStage，CompletableFuture 支持 then 的级联操作。提供可操作的功能相对简单。</p>
</blockquote>
]]></content>
      <tags>
        <tag>reactive</tag>
      </tags>
  </entry>
  <entry>
    <title>reactor-mono</title>
    <url>/blogs/reactor-mono.html</url>
    <content><![CDATA[<h1 id="Reactor"><a href="#Reactor" class="headerlink" title="Reactor"></a>Reactor</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>Reactor 有两种类型：Flux<T> 和 Mono<T>。Flux 类似于 RxJava 的 Observable，它可以触发零到多个事件，并根据实际情况结束处理或触发错误。我们可以从返回类型获知一个方法：发射并忘记或者请求等待(Mono)/处理一个包含多个数据项的流(Flux)。</p>
<p>Flux 和 Mono 主要用途是在于把对象合并到更高层次的流中，搜易一般来说，在现有代码上应用响应式模式，不应该把 <code>long getCount()</code> 这样的方法转换成 <code>Mono&lt;Long&gt; getCount()</code>。</p>
<p><img src="https://docs.spring.io/spring-framework/docs/5.0.0.BUILD-SNAPSHOT/spring-framework-reference/html/images/webflux-overview.png" alt="SpringWebFlux"></p>
<h3 id="Router-Function"><a href="#Router-Function" class="headerlink" title="Router Function"></a>Router Function</h3><p>对标注 <code>@Controller</code>,<code>@RequestMapping</code> 等标准的 Spring MVC 注解，提供一套函数式风格的 API，用于创建 Router， Handler 和 Filter。</p>
<h3 id="WebFlux"><a href="#WebFlux" class="headerlink" title="WebFlux"></a>WebFlux</h3><p>核心组件，协调上下游各个组件，提供响应式编程支持。可以平衡请求或响应率，即，响应堵塞时，会同时堵塞请求。</p>
<p>背压，是一种通过传输（通知）接受者可以消费多少元素来调节生产的机制（消费决定生产）；TCP 具有字节抽象而不是逻辑元素抽象。我们通常所说的背压控制是控制向网络发送/接收的逻辑原件的数量。即使 TCP 有自己的流控制，这个流控制仍然是字节而不是逻辑元素。</p>
<h3 id="Reactive-Streams"><a href="#Reactive-Streams" class="headerlink" title="Reactive Streams"></a>Reactive Streams</h3><p>一种支持背压（Backpressure）的异步数据流处理标准，主流实现有 RxJava 和 Reator，Spring WebFlux 默认继承的是 Reactor。（Reactor 类似于 RxJava 2.0）</p>
<h2 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h2><p>file.getName(),null,InspectPlanListExportTO.class,getExcelType(),null</p>
<p>existInspectStandard != null &amp;&amp; inspectStandard.getInspectStandardPO().getId() != existInspectStandard.getId()</p>
<p> for (InspectPlanProcedureRelationPO inspectPlanProcedureRelationPO : this.inspectPlanProcedureRelationPOs) {<br>            inspectPlanProcedureRelationPO.setInspectPlanId(this.inspectPlanPO.getId());<br>        }</p>
]]></content>
      <tags>
        <tag>Reactor</tag>
      </tags>
  </entry>
  <entry>
    <title>redis-cluster</title>
    <url>/blogs/redis-cluster.html</url>
    <content><![CDATA[<h1 id="redis-cluster"><a href="#redis-cluster" class="headerlink" title="redis-cluster"></a>redis-cluster</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<p>Redis 的主从复制，主要有两种方式</p>
<ul>
<li>通过在配置文件 redis.conf 中设置 slaveof 方式（永久）</li>
<li>直接在客户端执行 slaveof ip port 的方式（临时）；</li>
</ul>
<h2 id="主从一致性原理"><a href="#主从一致性原理" class="headerlink" title="主从一致性原理"></a>主从一致性原理</h2><h3 id="全量复制"><a href="#全量复制" class="headerlink" title="全量复制"></a>全量复制</h3><p>检测消息丢失的方法我们说，用消息队列最尴尬的情况不是丢消息，而是消息丢了还不知道。一般而言，一个新的系统刚刚上线，各方面都不太稳定，需要一个磨合期，这个时候，特别需要监控到你的系统中是否有消息丢失的情况。如果是 IT 基础设施比较完善的公司，一般都有分布式链路追踪系统，使用类似的追踪系统可以很方便地追踪每一条消息。如果没有这样的追踪系统，这里我提供一个比较简单的方法，来检查是否有消息丢失的情况。我们可以利用消息队列的有序性来验证是否有消息丢失。原理非常简单，在 Producer 端，我们给每个发出的消息附加一个连续递增的序号，然后在 Consumer 端来检查这个序号的连续性。如果没有消息丢失，Consumer 收到消息的序号必然是连续递增的，或者说收到的消息，其中的序号必然是上一条消息的序号 +1。如果检测到序号不连续，那就是丢消息了。还可以通过缺失的序号来确定丢失的是哪条消息，方便进一步排查原因。大多数消息队列的客户端都支持拦截器机制，你可以利用这个拦截器机制，在 Producer 发送消息之前的拦截器中将序号注入到消息中，在 Consumer 收到消息的拦截器中检测序号的连续性，这样实现的好处是消息检测的代码不会侵入到你的业务代码中，待你的系统稳定后，也方便将这部分检测的逻辑关闭或者删除。如果是在一个分布式系统中实现这个检测方法，有几个问题需要你注意。首先，像 Kafka 和 RocketMQ 这样的消息队列，它是不保证在 Topic 上的严格顺序的，只能保证分区上的消息是有序的，所以我们在发消息的时候必须要指定分区，并且，在每个分区单独检测消息序号的连续性。如果你的系统中 Producer 是多实例的，由于并不好协调多个 Producer 之间的发送顺序，所以也需要每个 Producer 分别生成各自的消息序号，并且需要附加上 Producer 的标识，在 Consumer 端按照每个 Producer 分别来检测序号的连续性。Consumer 实例的数量最好和分区数量一致，做到 Consumer 和分区一一对应，这样会比较方便地在 Consumer 内检测消息序号的连续性。</p>
]]></content>
      <tags>
        <tag>redis</tag>
        <tag>redis-cluter</tag>
      </tags>
  </entry>
  <entry>
    <title>redis-hyperloglog</title>
    <url>/blogs/redis-hyperloglog.html</url>
    <content><![CDATA[<h1 id="Redis-HyperLogLog"><a href="#Redis-HyperLogLog" class="headerlink" title="Redis - HyperLogLog"></a>Redis - HyperLogLog</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>HyperLogLog 使用动态字符串存储数据，为了区别普通的 SDS，在头部固定了字节 <code>HYLL</code></p>
<p>HyperLogLog 底层数据结构</p>
<pre class=" language-c"><code class="language-c"><span class="token keyword">struct</span> hllhdr <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 固定值 HYLL</span>
    <span class="token keyword">char</span> magic<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">/* "HYLL" */</span>
    <span class="token comment" spellcheck="true">// 编码格式 HLL_DENSE 和 HLL_SPARSE</span>
    uint8_t encoding<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* HLL_DENSE or HLL_SPARSE. */</span>
    uint8_t notused<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Reserved for future use, must be zero. */</span>
    uint8_t card<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Cached cardinality, little endian. */</span>
    uint8_t registers<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* Data bytes. */</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre>
<p>HLL  存储分为两部分：hllhdr 和 registers。</p>
<p>registers: 用来存储组数据，<br>hllhdr: 为 HLL 的头部信息，</p>
<p>其中encoding来标识使用的编码，可以简单理解为空分组较多时使用稀疏编码存储，空分组较少时使用密集编码存储，内部计算使用HLL_RAW编码，因为数据总是增加的，所以一般只存在稀疏编码转为密集编码。</p>
<h2 id="HLL-的命名"><a href="#HLL-的命名" class="headerlink" title="HLL 的命名"></a>HLL 的命名</h2><ul>
<li>pfadd</li>
<li>pfcount</li>
<li>pfmerge</li>
</ul>
<h3 id="PFADD"><a href="#PFADD" class="headerlink" title="PFADD"></a>PFADD</h3><ol>
<li>功能：</li>
</ol>
<p>pfadd 用来讲一个或多个元素添加到指定的 HLL 中。Redis 不保存元素本身，而是将元素散列后，找到对应分组并比较计数值，如果大于旧值则更新，反之则不更新。</p>
<blockquote>
<p>PFADD key element [element element …]</p>
</blockquote>
<ol start="2">
<li>原理</li>
</ol>
<p>将所有元素添加到之地当的 HLL 数据结构中。如果对应的近似基数发生变化，则返回 <code>1</code>，否则返回 <code>0</code>。如果指定的 key 不存在，则会自动创建一个空的 HLL 数据结构并执行添加操作。不知道 element 的情况下，如果 key 不存在，也会创建一个新的 HLL 数据结构并返回 <code>1</code>。否则什么也不做，并返回 <code>0</code>。</p>
<ol start="3">
<li>源码实现原理</li>
</ol>
<p>TODO 待处理</p>
]]></content>
      <tags>
        <tag>redis</tag>
        <tag>hyperloglog</tag>
      </tags>
  </entry>
  <entry>
    <title>redis-lua 简介</title>
    <url>/blogs/redis-lua.html</url>
    <content><![CDATA[<h1 id="Redis-Lua-简介"><a href="#Redis-Lua-简介" class="headerlink" title="Redis  Lua 简介"></a>Redis  Lua 简介</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p><code>redis.call()</code>; 将返回一个错误给调用者</p>
<p><code>redis.pcall()</code>: 将捕获的错误以 <code>LUA</code> 表的形式返回。</p>
<h2 id="Redis-Lua-优势"><a href="#Redis-Lua-优势" class="headerlink" title="Redis Lua 优势"></a><code>Redis Lua</code> 优势</h2><p>1.减少网络开销：本来5次网络请求的操作，可以用一个请求完成，原先5次请求的逻辑放在 <code>redis</code> 服务器上完成。使用脚本，减少了网络往返时延。</p>
<p>2.原子操作：<code>Redis</code> 会将整个脚本作为一个整体执行，中间不会被其他命令插入。</p>
<p>3.复用：客户端发送的脚本会永久存储在 <code>Redis</code> 中，意味着其他客户端可以复用这一脚本而不需要使用代码完成同样的逻辑。</p>
<h2 id="Redis-注意事项"><a href="#Redis-注意事项" class="headerlink" title="Redis 注意事项"></a>Redis 注意事项</h2><ol>
<li><p><code>Lua</code> 无返回值导致阻塞时，整个 <code>Redis</code> 不可用。</p>
</li>
<li><p><code>Lua</code> 实现核心内容即可，言简意赅。</p>
</li>
<li><p><code>Lua</code> 中不应该存在常量 <code>Key</code>，这样会导致每次执行时都会在脚本字典中新建一个条目，应该使用全局变量数组 <code>KEYS</code> 和 <code>ARGV</code>, <code>KEYS</code> 和 <code>ARGV</code> 的索引都从 <code>1</code> 开始。</p>
</li>
<li><p>传递给 <code>lua</code> 脚本的键列表应该包括可能会读取或者写入的所有键。传入全部的键使得在使用各种分片或者集群技术时，其他软件可以在应用层检查所有的数据是不是都在同一个分片里面。另外集群版 <code>redis</code> 也会对将要访问的 <code>key</code> 进行检查，如果不在同一个服务器里面，那么 <code>redis</code> 将会返回一个错误。（决定使用集群版之前应该考虑业务拆分），参数列表无所谓。。</p>
</li>
<li><p><code>lua</code> 和 <code>redis</code> 命令，事务一样都是原子，的已经进行了数据写入的 <code>lua</code> 脚本将无法中断，只能使用 <code>SHUTDOWN NOSAVE</code> 杀死 <code>Redis</code> 服务器。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>redis</tag>
        <tag>lua</tag>
      </tags>
  </entry>
  <entry>
    <title>RSocket 简介</title>
    <url>/blogs/rsocket-introduce.html</url>
    <content><![CDATA[<h1 id="RSocket-简介"><a href="#RSocket-简介" class="headerlink" title="RSocket 简介"></a>RSocket 简介</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<p>响应式reactive是Java中高效应用的下一个前沿，但它目前主要有两个障碍：数据访问和网络。RSocket是一种新的第7层语言无关的应用网络协议（解决后者），它由Facebook，Netifi和Pivotal等工程师开发，提供Java，JavaScript，C ++和Kotlin等实现，RSocket与Servlet并不是同类的产品。</p>
]]></content>
      <tags>
        <tag>reactive</tag>
        <tag>rsocket</tag>
      </tags>
  </entry>
  <entry>
    <title>响应式编程 - RxJava - Disposable</title>
    <url>/blogs/rxJava-disposable.html</url>
    <content><![CDATA[<h1 id="响应式白城-RxJava-Disposable"><a href="#响应式白城-RxJava-Disposable" class="headerlink" title="响应式白城 - RxJava - Disposable"></a>响应式白城 - RxJava - Disposable</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h3 id="1-Disposable-有两个方法"><a href="#1-Disposable-有两个方法" class="headerlink" title="1. Disposable 有两个方法"></a>1. Disposable 有两个方法</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 取消订阅</span>
 <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment" spellcheck="true">// 判断订阅状态</span>
 <span class="token keyword">boolean</span> <span class="token function">isDisposed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>在 RxJava 中，在数据流结束后，如果不取消订阅，则可能会导致内存泄露。我们可以通过使用 Disposable 来取消订阅关系。在 RxJava 中，<code>onError</code> 和 <code>onComplete</code> 中，都存在 <code>this::dispose</code>。这也是为什么  <code>onError</code> 和 <code>onComplete</code> 不能同时存在的原因。</p>
<h3 id="2-CompositeDisposable"><a href="#2-CompositeDisposable" class="headerlink" title="2. CompositeDisposable"></a>2. CompositeDisposable</h3><p>CompositeDisposable 类是一个存放 Disposable 的 hash 容器，对放入其中的 disposable 会将其解除订阅。如果在添加是，容器内已经被解除，那么新增的会被阻断。</p>
<p>在使用的时候，我们使用容器，调用，<code>add </code>或者 <code>addAll</code>，容器退出时，调用 <code>clear</code> 方法即可将容器内的关系解除。</p>
]]></content>
      <tags>
        <tag>reactive</tag>
        <tag>rxjava</tag>
        <tag>响应式编程</tag>
      </tags>
  </entry>
  <entry>
    <title>密码学简介</title>
    <url>/blogs/security-password.html</url>
    <content><![CDATA[<h1 id="密码学简介"><a href="#密码学简介" class="headerlink" title="密码学简介"></a>密码学简介</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<h1 id="密码学"><a href="#密码学" class="headerlink" title="密码学"></a>密码学</h1><h2 id="一-密码学的四个目标"><a href="#一-密码学的四个目标" class="headerlink" title="一. 密码学的四个目标"></a>一. 密码学的四个目标</h2><h4 id="1-机密性（隐私性）"><a href="#1-机密性（隐私性）" class="headerlink" title="1. 机密性（隐私性）"></a>1. 机密性（隐私性）</h4><p>在网络中传递的是一连串无意义的数据，只有通过指定秘钥才能获取真正的数据，密钥是算法的关键。</p>
<h4 id="2-完整性"><a href="#2-完整性" class="headerlink" title="2. 完整性"></a>2. 完整性</h4><p>密码学中，主要使用消息验证码 (MAC) 算法保证完整性。</p>
<h4 id="3-身份验证"><a href="#3-身份验证" class="headerlink" title="3. 身份验证"></a>3. 身份验证</h4><p>一般使用数字签名来确认通信双方的身份，是否是指定通信对象。</p>
<h4 id="4-不可抵赖性"><a href="#4-不可抵赖性" class="headerlink" title="4. 不可抵赖性"></a>4. 不可抵赖性</h4><p>数字签名可以避免抵赖，即消息发送方身份。</p>
]]></content>
  </entry>
  <entry>
    <title>sit-optimize-applicable-device</title>
    <url>/blogs/sit-optimize-applicable-device.html</url>
    <content><![CDATA[<h1 id="网站优化-设备适配优化"><a href="#网站优化-设备适配优化" class="headerlink" title="网站优化 - 设备适配优化"></a>网站优化 - 设备适配优化</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="1-PC"><a href="#1-PC" class="headerlink" title="1. PC"></a>1. PC</h2><p>如果该网页只适合在电脑上进行浏览，例如（<a href="http://starrier.org/">http://starrier.org/</a> ），</p>
<p>在html中加入如下meta：</p>
<pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicable-device<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  </code></pre>
<h2 id="2-Mobile-移动端"><a href="#2-Mobile-移动端" class="headerlink" title="2. Mobile 移动端"></a>2. Mobile 移动端</h2><p>如果该网页只适合在移动设备上进行浏览，例如（<a href="http://m.starrier.org/">http://m.starrier.org/</a> ），</p>
<p>在 html中加入如下meta：</p>
<pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicable-device<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mobile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> </code></pre>
<h2 id="3-PC-amp-amp-移动端都适配"><a href="#3-PC-amp-amp-移动端都适配" class="headerlink" title="3. PC &amp;&amp; 移动端都适配"></a>3. PC &amp;&amp; 移动端都适配</h2><p>如果网页采用了响应式网页设计，例如（<a href="http://starrier.starrier.org/%EF%BC%89">http://starrier.starrier.org/）</a> 不需要经过url自适配跳转就可以根据浏览器的屏幕大小自适应的展现合适的效果，同时适合在移动设备和电脑上进行浏览</p>
<p>在html中加入如下meta：  </p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>applicable-device<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pc,mobile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
</code></pre>
]]></content>
      <tags>
        <tag>seo</tag>
      </tags>
  </entry>
  <entry>
    <title>网站站点优化</title>
    <url>/blogs/sit-optimize-html.html</url>
    <content><![CDATA[<h1 id="网站站点优化"><a href="#网站站点优化" class="headerlink" title="网站站点优化"></a>网站站点优化</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="1-添加-meta-元属性"><a href="#1-添加-meta-元属性" class="headerlink" title="1. 添加 meta 元属性"></a>1. 添加 <code>meta</code> 元属性</h2><h2 id="2-html-添加-language"><a href="#2-html-添加-language" class="headerlink" title="2. html 添加 language"></a>2. html 添加 language</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<p>link <a href="https://web.dev/html-has-lang/?utm_source=lighthouse&amp;utm_medium=cli">https://web.dev/html-has-lang/?utm_source=lighthouse&amp;utm_medium=cli</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>seo</tag>
        <tag>site</tag>
        <tag>optimize</tag>
      </tags>
  </entry>
  <entry>
    <title>网站优化 - SEO - referrer</title>
    <url>/blogs/sit-optimize-referrer.html</url>
    <content><![CDATA[<h1 id="网站优化-SEO-使用-meta-referrer"><a href="#网站优化-SEO-使用-meta-referrer" class="headerlink" title="网站优化 - SEO - 使用 meta-referrer"></a>网站优化 - SEO - 使用 <code>meta-referrer</code></h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>head 中添加</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>origin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre>
<p>参考文章</p>
<p><a href="https://blog.csdn.net/ccfxue/article/details/53119936">https://blog.csdn.net/ccfxue/article/details/53119936</a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>seo</tag>
        <tag>referrer</tag>
      </tags>
  </entry>
  <entry>
    <title>Starrier&#39;s Blog 站点说明</title>
    <url>/blogs/site-introduce.html</url>
    <content><![CDATA[<h1 id="站点建设"><a href="#站点建设" class="headerlink" title="站点建设"></a>站点建设</h1><h2 id="一-项目背景"><a href="#一-项目背景" class="headerlink" title="一. 项目背景"></a>一. 项目背景</h2><h4 id="1-关于当前已发布文章的缺陷说明"><a href="#1-关于当前已发布文章的缺陷说明" class="headerlink" title="1. 关于当前已发布文章的缺陷说明"></a>1. 关于当前已发布文章的缺陷说明</h4><p>当前已发布的文章，主要是为了做文章迁移。参见 <a href="https://github.com/Starrier/starrier.github.io/issues/2">issuse</a></p>
<h4 id="2-关于文章发布内容的说明"><a href="#2-关于文章发布内容的说明" class="headerlink" title="2. 关于文章发布内容的说明"></a>2. 关于文章发布内容的说明</h4><p>所有文章，所属领域，只会发布一篇，并作持续内容的最新更新。</p>
<h4 id="3-关于站点建设问题"><a href="#3-关于站点建设问题" class="headerlink" title="3. 关于站点建设问题"></a>3. 关于站点建设问题</h4><p>如果所发布文章有疑问，或者愿意一起建设的，可以提 <a href="https://github.com/Starrier/starrier.github.io/issues">PR</a></p>
<p><strong>谢谢阅读</strong></p>
<p>(*￣︶￣)  喵喵喵 ~~</p>
<p>如有文章侵权相关，侵权立删，联系人：</p>
<p><a href="https://github.com/Starrier">Starrier</a></p>
<p><a href="https://github.com/Imperater">Imperater</a></p>
<p>团队邮箱：</p>
<p><a href="mailto:&#x73;&#x74;&#x61;&#x72;&#114;&#x69;&#x65;&#x72;&#x40;&#115;&#116;&#x61;&#x72;&#114;&#x69;&#x65;&#x72;&#46;&#x6f;&#x72;&#103;">&#x73;&#x74;&#x61;&#x72;&#114;&#x69;&#x65;&#x72;&#x40;&#115;&#116;&#x61;&#x72;&#114;&#x69;&#x65;&#x72;&#46;&#x6f;&#x72;&#103;</a></p>
<p>个人邮箱：</p>
<p><a href="mailto:&#x73;&#116;&#x61;&#114;&#x72;&#105;&#x65;&#x72;&#x73;&#64;&#x73;&#x74;&#x61;&#114;&#114;&#105;&#101;&#114;&#x2e;&#x6f;&#114;&#x67;">&#x73;&#116;&#x61;&#114;&#x72;&#105;&#x65;&#x72;&#x73;&#64;&#x73;&#x74;&#x61;&#114;&#114;&#105;&#101;&#114;&#x2e;&#x6f;&#114;&#x67;</a></p>
<p><a href="mailto:&#x69;&#109;&#x70;&#x65;&#114;&#97;&#116;&#x6f;&#114;&#64;&#115;&#116;&#x61;&#114;&#114;&#105;&#x65;&#x72;&#x2e;&#x6f;&#x72;&#103;">&#x69;&#109;&#x70;&#x65;&#114;&#97;&#116;&#x6f;&#114;&#64;&#115;&#116;&#x61;&#114;&#114;&#105;&#x65;&#x72;&#x2e;&#x6f;&#x72;&#103;</a>  ||  <a href="mailto:&#105;&#109;&#x70;&#x65;&#x72;&#97;&#x74;&#x65;&#114;&#64;&#x73;&#x74;&#x61;&#114;&#114;&#105;&#101;&#x72;&#46;&#x6f;&#114;&#x67;">&#105;&#109;&#x70;&#x65;&#x72;&#97;&#x74;&#x65;&#114;&#64;&#x73;&#x74;&#x61;&#114;&#114;&#105;&#101;&#x72;&#46;&#x6f;&#114;&#x67;</a></p>
]]></content>
      <tags>
        <tag>Starrier</tag>
        <tag>Imperator</tag>
      </tags>
  </entry>
  <entry>
    <title>译文 - 提高 10 倍性能：优化静态网站</title>
    <url>/blogs/site-static-seo.html</url>
    <content><![CDATA[<h1 id="译-提高-10-倍性能：优化静态网站"><a href="#译-提高-10-倍性能：优化静态网站" class="headerlink" title="[译] 提高 10 倍性能：优化静态网站"></a>[译] 提高 10 倍性能：优化静态网站</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<blockquote>
<ul>
<li>原文地址：<a href="https://hackernoon.com/optimizing-a-static-site-d5ab6899f249">10x Performance Increases: Optimizing a Static Site</a></li>
<li>原文作者：<a href="https://hackernoon.com/@jonluca?source=post_header_lockup">JonLuca De Caro</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner">掘金翻译计划</a></li>
<li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/TODO1/optimizing-a-static-site.md">https://github.com/xitu/gold-miner/blob/master/TODO1/optimizing-a-static-site.md</a></li>
<li>译者：<a href="https://github.com/Starriers">Starriers</a></li>
<li>校对者：<a href="https://github.com/dandyxu">dandyxu</a>、<a href="https://github.com/Hopsken">Hopsken</a></li>
</ul>
</blockquote>
<h1 id="提高-10-倍性能：优化静态网站"><a href="#提高-10-倍性能：优化静态网站" class="headerlink" title="提高 10 倍性能：优化静态网站"></a>提高 10 倍性能：优化静态网站</h1><p>几个月前，我在国外旅行，想给朋友看我个人（静态）网站上的一个链接。我试着浏览我的网站，但花费的时间比我预期的要长。网站绝对没有任何动态内容–只有动画和一些响应式设计，而且内容始终保持不变。 我对结果感到震惊，DOMContentLoaded 要 4 s，整个页面加载要 6.8 s。有 20 项关于<strong>静态网站</strong>的请求（总数据的 1MB）被转移。我习惯了从洛杉矶到我在旧金山的服务器之间用 1 GB/s 的低延迟互联网连接，这使得这个怪物看起来像闪电一样快。在意大利，8 MB/s 的速度让情况变得完全不同。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/8/162a4a354ba3f527?w=800&h=505&f=png&s=153445"></p>
<p>这是我第一次尝试优化。到目前为止，每次我想添加一个库或者资源时，我都只是将它引入并使用 <strong>src=””</strong> 指向它。从缓存到内联，再到延迟加载，对任何形式的性能我都没有给予关注。</p>
<p>我开始寻找有相似经历的人。不幸的是，许多有关静态优化的文献很快就过时–那些来自 2010 或者 2011 年的建议，要么是在讨论库，要么做一些根本不再试用的假设，要么就是不断地重复某些相同的准则。</p>
<p>不过我确实找到了两个很好的信息源 – <a href="https://hpbn.co/">高性能浏览器网络</a>和 <a href="https://danluu.com/octopress-speedup/">Dan Luu 类似的静态网站优化经历</a>。尽管在剥离格式和内容方面还不如 Dan，但是我确实成功地让我的页面加载速度提高了大约 10 倍。DOMContentLoaded 大约需要五分之一秒，而整个页面加载只有 388 ms（实际上有点不准确，下文将解释延迟加载的原因）。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/8/162a4a3561be31e1?w=800&h=572&f=png&s=126355"></p>
<h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><p>过程的第一步是对网站进行分析梳理，我想弄清楚哪些地方花费了最长的时间，以及如何最好地并行化一切。我运行了各种工具来分析我的网站，并在世界各地测试它，包括：</p>
<ul>
<li>  <a href="https://tools.pingdom.com/">https://tools.pingdom.com/</a></li>
<li>  <a href="http://www.webpagetest.org/">www.webpagetest.org/</a></li>
<li>  <a href="https://tools.keycdn.com/speed">https://tools.keycdn.com/speed</a></li>
<li>  <a href="https://developers.google.com/web/tools/lighthouse/">https://developers.google.com/web/tools/lighthouse/</a></li>
<li>  <a href="https://developers.google.com/speed/pagespeed/insights/">https://developers.google.com/speed/pagespeed/insights/</a></li>
<li>  <a href="https://webspeedtest.cloudinary.com/">https://webspeedtest.cloudinary.com/</a></li>
</ul>
<p>其中一些提供了改进建议，但当静态站点有 50 个请求时，您只能做这么多 – 从 90 年代遗留下来的间隔 gif 到不再使用的资源（我加载了 6 种字体但只使用了 1 种字体）。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/8/162a4a3567665f00?w=800&h=864&f=png&s=286748"></p>
<p>我的网站时间线 – 我在 Web Archive(译者注：一家提供网站历史快照的服务商)上测试了这个却没有截取原始图片，可是它看起来和我几个月前看到的还是很相似。</p>
<p>我想改进我所能控制的一切 – 从 JavaScript 的内容和速度到实际的 Web 服务器（Ngnix）和 DNS 设置。</p>
<h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="简化与合并资源"><a href="#简化与合并资源" class="headerlink" title="简化与合并资源"></a>简化与合并资源</h4><p>我注意到的第一件事是，不管是对于 CSS 还是 JS，我都向各种网站发起十几个请求（没有任何形式的 HTTP keepalive），其中还有一些是 https 请求。这增加了对各种 CDN 或 服务器的多次往返，一些 JS 文件正在请求其他文件，这导致了上面所示的阻塞级联。</p>
<p>我使用 <a href="https://webpack.js.org/">webpack</a> 将所有资源合并到一个 js 文件中。每当我对内容进行更改时，它都会自动简化并将我的所有依赖项转换为单文件。</p>
<pre><code>const UglifyJsPlugin = require(&#39;uglifyjs-webpack-plugin&#39;);
const ZopfliPlugin = require(&quot;zopfli-webpack-plugin&quot;);

module.exports = &#123;
  entry: &#39;./js/app.js&#39;,
  mode: &#39;production&#39;,
  output: &#123;
    path: __dirname + &#39;/dist&#39;,
    filename: &#39;bundle.js&#39;
  &#125;,
  module: &#123;
    rules: [&#123;
      test: /\.css$/,
      loaders: [&#39;style-loader&#39;, &#39;css-loader&#39;]
    &#125;, &#123;
      test: /(fonts|images)/,
      loaders: [&#39;url-loader&#39;]
    &#125;]
  &#125;,
  plugins: [new UglifyJsPlugin(&#123;
    test: /\.js($|\?)/i
  &#125;), new ZopfliPlugin(&#123;
    asset: &quot;[path].gz[query]&quot;,
    algorithm: &quot;zopfli&quot;,
    test: /\.(js|html)$/,
    threshold: 10240,
    minRatio: 0.8
  &#125;)]

&#125;;</code></pre>
<p>我尝试了各种不同的配置。现在，这个 bundle.js 文件在我网站的 <code>&lt;head&gt;</code> 中，并且处于阻塞状态。它的最终大小是 829 kb，包括每个非图像资源（字体、css、所有的库、依赖项以及 js）。绝大多数字体使用的是 font-awesome，它们占 829 kb 中的 724。</p>
<p>我浏览了 Font Awesome 库，除了我要使用的 fa-github、fa-envelope 和 fa-code 三个图标外，其他的所有图标都已经删除。我使用叫做 <a href="http://fontello.com/">fontello</a> 的服务来提取我需要的图标。新的大小只有 94 kb。</p>
<p>按照目前网站的构建方式，如果我们只有样式表，它看起来是不正确的，所以我接受了单个 bundle.js 的阻塞特性。加载时间为 118 ms，比之前提高了一个数量级。</p>
<p>这也带来了一些额外的好处–我不再指向第三方资源或 CDN，因此用户不需要：（1）执行对该资源的 DNS 查询，（2）执行 https 握手，（3）等待该资源被完整地下载。</p>
<p>虽然 CDN 和分布式缓存对于大规模的分布式网站可能是有意义的，但对于我的小型静态网站来说却没有意义。是否需要优化这额外的 100 ms 左右时间是值得权衡的。</p>
<h4 id="压缩资源"><a href="#压缩资源" class="headerlink" title="压缩资源"></a>压缩资源</h4><p>我加载了一个 8 MB 大小的头像，然后以 10% 的宽高比显示它。这不仅仅是缺少优化，这几乎<strong>是忽略了用户对带宽使用</strong>。</p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/8/162a4a3541bc520c?w=800&h=217&f=png&s=79121"></p>
<p>我使用 <a href="https://webspeedtest.cloudinary.com/">https://webspeedtest.cloudinary.com/</a> 来压缩所有的图像 – 它还建议我切换到  <a href="https://developers.google.com/speed/webp/">webp</a>，但我希望尽可能多的与其他浏览器进行兼容，所以我坚持使用 jpg。尽管完全有可能建立一个只将 webp 交付给支持它的浏览器系统，但我希望尽可能地保持简单，添加抽象层的好处似乎并不明显。</p>
<h4 id="改进-Web-Server-—-HTTP2-TLS-等"><a href="#改进-Web-Server-—-HTTP2-TLS-等" class="headerlink" title="改进 Web Server — HTTP2, TLS 等"></a>改进 Web Server — HTTP2, TLS 等</h4><p>我做的第一件事是过度到 https – 一开始，我在 80 端口运行 Ngnix，只服务于来自 /var/www/html 的文件。</p>
<pre><code>server&#123;
    listen 80;
    server_name jonlu.ca www.jonlu.ca;

    root /var/www/html;
    index index.html index.htm;
    location ~ /.git/ &#123;
          deny all;
    &#125;
    location ~ / &#123;
        allow all;
    &#125;
&#125;</code></pre>
<p>首先设置 https 并将所有 http 请求重定向到 https。我从 <a href="https://letsencrypt.org/">Let’s Encrypt</a> (一个刚开始签署通配符证书的伟大组织！<a href="https://community.letsencrypt.org/t/acme-v2-and-wildcard-certificate-support-is-live/55579">wildcard certificates</a> )那里获得了自己的 TLS 证书。</p>
<pre><code>server &#123;
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name jonlu.ca www.jonlu.ca;

    root /var/www/html;
    index index.html index.htm;

    location ~ /.git &#123;
        deny all;
    &#125;

    location / &#123;
        allow all;
    &#125;

    ssl_certificate /etc/letsencrypt/live/jonlu.ca/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/jonlu.ca/privkey.pem; # managed by Certbot
&#125;</code></pre>
<p>只要添加 http2 的指令，Ngnix 就能够利用 HTTP 最新特性的所有优点。注意，如果要利用 HTTP2（以前的 SPDY），您<strong>必须</strong>使用 HTTPS，在<a href="https://hpbn.co/http2/">这里</a>阅读更多内容。</p>
<p>您还可以利用 HTTP2 push 指令，使用 <strong>http2</strong> push images/Headshot.jpg；</p>
<p>注意：启用 gzip 和 TLS 可能会使您面临 <a href="https://en.wikipedia.org/wiki/BREACH">BREACH</a> 风险。由于这是一个静态网站，而 BREACH 实际的风险很低，所以保持压缩状态让我感觉舒服。</p>
<h4 id="利用缓存和压缩指令"><a href="#利用缓存和压缩指令" class="headerlink" title="利用缓存和压缩指令"></a>利用缓存和压缩指令</h4><p>仅通过使用 Ngnix 还能完成什么呢？首先是缓存和压缩指令。</p>
<p>我之前一直都是发送未经压缩的原始 HTML。只需要一个单独的 <strong>gzip</strong>；是的，我就可以从 16000 字节减少到 8000 字节，减少 50%。</p>
<p>实际上，我们能够进一步改进这个数字，如果将 Ngnix 的 <strong>gzip</strong> 静态设置为开启，它会事先查找所有请求文件的预压缩版本。这与我们上面的 webpack 配置结合在一起 – 我们可以在构建时使用 <a href="https://github.com/webpack-contrib/zopfli-webpack-plugin">ZopflicPlugin</a> 预压缩所有文件！这节省了计算资源，并允许我们在不牺牲速度的情况下最大限度地实现压缩。</p>
<p>此外，我的站点变化很少，所以我希望尽可能长时间地缓存资源。这样，在以后的访问中，用户就不需要重新下载所有资源（特别是 bundle.js）。</p>
<p>我更新的服务器配置如下所示。请注意，我不会涉及我所做的所有更改，例如 TCP 设置更改、gzip 指令和文件缓存。如果您想了解更多，请<a href="https://www.nginx.com/blog/tuning-nginx/">阅读这篇关于 Ngnix 调优的文章</a>。</p>
<pre><code>worker_processes auto;
pid /run/nginx.pid;
worker_rlimit_nofile 30000;

events &#123;
    worker_connections 65535;
    multi_accept on;
    use epoll;
&#125;

http &#123;

    ##
    # Basic Settings
    ##

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Turn of server tokens specifying nginx version
    server_tokens off;

    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    add_header Referrer-Policy &quot;no-referrer&quot;;

    ##
    # SSL Settings
    ##

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_dhparam /location/to/dhparam.pem;
    ssl_ciphers &#39;ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA&#39;;

    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security &#39;max-age=31536000; includeSubDomains; preload&#39;;

    ssl_certificate /location/to/fullchain.pem;
    ssl_certificate_key /location/to/privkey.pem;

    ##
    # Logging Settings
    ##

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    ##
    # Gzip Settings
    ##

    gzip on;
    gzip_disable &quot;msie6&quot;;

    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/x-icon;
    gzip_min_length 256;

    ##
    # Virtual Host Configs
    ##

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;
&#125;</code></pre>
<p>以及相应的服务器块</p>
<pre><code>server &#123;
    listen 443 ssl http2;

    server_name jonlu.ca www.jonlu.ca;

    root /var/www/html;
    index index.html index.htm;

    location ~ /.git/ &#123;
        deny all;
    &#125;

    location ~* /(images|js|css|fonts|assets|dist) &#123;
        gzip_static on; # 告诉 Nginx 首先查找所有请求文件的压缩版本。
        expires 15d; # 15 day expiration for all static assets
    &#125;

&#125;</code></pre>
<h4 id="延迟加载"><a href="#延迟加载" class="headerlink" title="延迟加载"></a>延迟加载</h4><p>最后我的实际网站有一个小的变化，它所带来的优化是不可忽视的。有 5 张图片直到您按下相应选项卡后才能看到，但它们是与其他所有内容同时加载的（因为它们位于 <code>&lt;img src=”…”&gt;</code> 标签中）。</p>
<p>我编写了一个简短的脚本，用 <strong>lazyload 类</strong>修改每个元素的属性。只有单击相应的框后才会加载这些图像。</p>
<pre><code>$(document).ready(function() &#123;
    $(&quot;#about&quot;).click(function() &#123;
        $(&#39;#about &gt; .lazyload&#39;).each(function() &#123;
            // set the img src from data-src
            $(this).attr(&#39;src&#39;, $(this).attr(&#39;data-src&#39;));
        &#125;);
    &#125;);

    $(&quot;#articles&quot;).click(function() &#123;
        $(&#39;#articles &gt; .lazyload&#39;).each(function() &#123;
            // set the img src from data-src
            $(this).attr(&#39;src&#39;, $(this).attr(&#39;data-src&#39;));
        &#125;);
    &#125;);

&#125;);</code></pre>
<p>因此一旦文档完成加载，它将修改 <code>&lt;img&gt;</code> 标签，使他们从 <code>&lt;img data-src=”…”&gt;</code> 转到 <code>&lt;img src=”…”&gt;</code> 然后将其加载到后台。</p>
<h4 id="未来的改进"><a href="#未来的改进" class="headerlink" title="未来的改进"></a>未来的改进</h4><p>还有一些其他的更改可以提高页面加载速度 – 最显著的是使用 Service Workers 缓存并拦截所有请求，让站点甚至脱机运行，在 CDN 上缓存内容，这样用户就不需要在 SF 中对服务器进行完整的往返操作。这些都是有价值的改变，但对于个人静态网站来说并不是特别重要，因为它是一个在线简历（关于我）的页面。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>这使我的页面加载时间从第一次加载的 8 s 提高到 350 ms，之后的页面加载速度达到了 200 ms。我真的建议阅读<a href="https://hpbn.co/#toc">高性能浏览器网络</a> – 您可以很快就阅读完它，它提供了对现代互联网的一个非常好的概述，并在互联网模型的每一层都进行了优化。</p>
<p><strong>我遗漏了什么事情吗？是否有任何违反最优做法？或者可以改善我的叙述内容甚至是其他方面？请随时指正 –</strong> <a href="https://medium.com/@jonluca"><em>JonLuca De Caro</em></a><strong>！</strong></p>
<p><img src="https://user-gold-cdn.xitu.io/2018/4/8/162a4a35452205a1?w=800&h=400&f=png&s=37767"></p>
<hr>
<blockquote>
<p><a href="https://github.com/xitu/gold-miner">掘金翻译计划</a> 是一个翻译优质互联网技术文章的社区，文章来源为 <a href="https://juejin.im/">掘金</a> 上的英文分享文章。内容覆盖 <a href="https://github.com/xitu/gold-miner#android">Android</a>、<a href="https://github.com/xitu/gold-miner#ios">iOS</a>、<a href="https://github.com/xitu/gold-miner#%E5%89%8D%E7%AB%AF">前端</a>、<a href="https://github.com/xitu/gold-miner#%E5%90%8E%E7%AB%AF">后端</a>、<a href="https://github.com/xitu/gold-miner#%E5%8C%BA%E5%9D%97%E9%93%BE">区块链</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%A7%E5%93%81">产品</a>、<a href="https://github.com/xitu/gold-miner#%E8%AE%BE%E8%AE%A1">设计</a>、<a href="https://github.com/xitu/gold-miner#%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>等领域，想要查看更多优质译文请持续关注 <a href="https://github.com/xitu/gold-miner">掘金翻译计划</a>、<a href="http://weibo.com/juejinfanyi">官方微博</a>、<a href="https://zhuanlan.zhihu.com/juejinfanyi">知乎专栏</a>。</p>
</blockquote>
]]></content>
      <tags>
        <tag>github</tag>
        <tag>Starrier</tag>
        <tag>juejin</tag>
      </tags>
  </entry>
  <entry>
    <title>深入分析与理解 spring-cloud-hystrix - HystrixCommand</title>
    <url>/blogs/spring-cloud-hystrix-hystrixcommand.html</url>
    <content><![CDATA[<h1 id="深入分析与理解-spring-cloud-hystrix-HystrixCommand"><a href="#深入分析与理解-spring-cloud-hystrix-HystrixCommand" class="headerlink" title="深入分析与理解 spring-cloud-hystrix - HystrixCommand"></a>深入分析与理解 spring-cloud-hystrix - HystrixCommand</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<h2 id="EnableCircuitBreaker"><a href="#EnableCircuitBreaker" class="headerlink" title="@EnableCircuitBreaker"></a><code>@EnableCircuitBreaker</code></h2><p><code>@EnableHystrix</code>:</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@EnableCircuitBreaker</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableHystrix</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p><code>@EnableCircuitBreaker</code> :</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>EnableCircuitBreakerImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableCircuitBreaker</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p><code>@EnableHystrix</code> 是对 <code>@EnableCircuitBreaker</code> 的增强。</p>
<p>HystrixCommandAspect 通过 AOP 拦截所有的 <code>@HystrixCommand</code> 注解的方法，从而使得 @HystrixCommand 能够集成到 SpringBoot 中。</p>
<p>HystrixCommandAspect：</p>
<ol>
<li>hystrixCommandAnnotationPointcut() 定义拦截 HystrixCommand</li>
<li>hystrixCollapserAnnotationPointcut() 定义拦截 HystrixCollapser</li>
<li>方法 methodsAnnotatedWithHystrixCommand(…) 通过 @Around(…) 拦截所有 HystrixCommand 和 HystrixCollapser 注解的方法。</li>
</ol>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HystrixCommandAspect</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand)"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hystrixCommandAnnotationPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.netflix.hystrix.contrib.javanica.annotation.HystrixCollapser)"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hystrixCollapserAnnotationPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

  <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"hystrixCommandAnnotationPointcut() || hystrixCollapserAnnotationPointcut()"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Object <span class="token function">methodsAnnotatedWithHystrixCommand</span><span class="token punctuation">(</span><span class="token keyword">final</span> ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 获取拦截的Method</span>
        Method method <span class="token operator">=</span> <span class="token function">getMethodFromTarget</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
        Validate<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"failed to get method from joinPoint: %s"</span><span class="token punctuation">,</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 只有被HystrixCommand和HystrixCollapser注解的方法才执行后续操作</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>HystrixCommand<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> method<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>HystrixCollapser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"method cannot be annotated with HystrixCommand and HystrixCollapser "</span> <span class="token operator">+</span>
                    <span class="token string">"annotations at the same time"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 根据拦截方法的注解HystrixCommand或HystrixCollapser分别获取CommandMetaHolderFactory或者CollapserMetaHolderFactory类</span>
        MetaHolderFactory metaHolderFactory <span class="token operator">=</span> META_HOLDER_FACTORY_MAP<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>HystrixPointcutType<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 将拦截方法封装到MetaHolder中</span>
        MetaHolder metaHolder <span class="token operator">=</span> metaHolderFactory<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 根据metaHolder生成相应的HystrixCommand，包含生成hystrix执行时需要的配置信息，这些配置信息来自默认配置或我们自定义的属性</span>
        HystrixInvokable invokable <span class="token operator">=</span> HystrixCommandFactory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>
        ExecutionType executionType <span class="token operator">=</span> metaHolder<span class="token punctuation">.</span><span class="token function">isCollapserAnnotationPresent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                metaHolder<span class="token punctuation">.</span><span class="token function">getCollapserExecutionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> metaHolder<span class="token punctuation">.</span><span class="token function">getExecutionType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        Object result<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
           <span class="token comment" spellcheck="true">// 根据是否是Observable执行CommandExecutor.execute()方法，executeObservable最后也会执行CommandExecutor.execute()方法</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>metaHolder<span class="token punctuation">.</span><span class="token function">isObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                result <span class="token operator">=</span> CommandExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>invokable<span class="token punctuation">,</span> executionType<span class="token punctuation">,</span> metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                result <span class="token operator">=</span> <span class="token function">executeObservable</span><span class="token punctuation">(</span>invokable<span class="token punctuation">,</span> executionType<span class="token punctuation">,</span> metaHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HystrixBadRequestException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">?</span> e<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> e<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">HystrixRuntimeException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token function">hystrixRuntimeExceptionToThrowable</span><span class="token punctuation">(</span>metaHolder<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

…<span class="token punctuation">.</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<p>@EnableCircuitBreaker 和 @EnableCircuitBreakerImportSelctor</p>
<p>HystrixCircuitBreakerConfiguration 的执行：</p>
<pre class=" language-java"><code class="language-java">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>client<span class="token punctuation">.</span>circuitbreaker<span class="token punctuation">.</span>EnableCircuitBreaker<span class="token operator">=</span>\
org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>netflix<span class="token punctuation">.</span>hystrix<span class="token punctuation">.</span>HystrixCircuitBreakerConfiguration</code></pre>
<p>通过 @Import 来初始化 EnableCircuitBreakerImportSelector 类，可以参见 @EnableCircuitBreaker.</p>
<p>EnableCircuitBreakerImportSelector 是 SpringFactoryImportSelector 子类。此类在初始化后，会执行 selectImports(AnnotationMetadata metadata) 的方法。此方法会根据注解启动的注解（这里指 <code>@EnableCircuitBreaker</code>）从spring.factories 文件中获取其配置需要初始化 <code>@Configuration</code> 类（这里是 org.springframework.cloud.netflix.hystrix.HystrixCircuitBreakerConfiguration），从而最终初始化 HystrixCommandAspect 类，从而实现拦截 HystrixCommand` 的功能</p>
<p>以上就是通过 <code>@EnableCircuitBreake</code> 可以开启 Hystrix 的原理。</p>
]]></content>
      <tags>
        <tag>spring-cloud</tag>
        <tag>hystrix</tag>
        <tag>hystrix-command</tag>
      </tags>
  </entry>
  <entry>
    <title>深入理解 Spring Cloud Hystrix 原理</title>
    <url>/blogs/spring-cloud-hystrix-principle.html</url>
    <content><![CDATA[<h1 id="深入理解-Spring-Cloud-Hystrix-原理"><a href="#深入理解-Spring-Cloud-Hystrix-原理" class="headerlink" title="深入理解 Spring Cloud Hystrix 原理"></a>深入理解 Spring Cloud Hystrix 原理</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
]]></content>
      <tags>
        <tag>spring-cloud</tag>
        <tag>hystrix</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>深入分析与理解 Spring MVC 原理</title>
    <url>/blogs/spring-mvc-principle.html</url>
    <content><![CDATA[<h1 id="深入分析与理解-Spring-MVC-原理"><a href="#深入分析与理解-Spring-MVC-原理" class="headerlink" title="深入分析与理解 Spring MVC 原理"></a>深入分析与理解 Spring MVC 原理</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<h4 id="SpringMVC-流程："><a href="#SpringMVC-流程：" class="headerlink" title="SpringMVC 流程："></a>SpringMVC 流程：</h4><ol>
<li>用户发送请求至前端控制器 DispatcherServlet</li>
<li>DispatcherServlet 首都奥请求调用 HandlerMapping 处理器映射器。</li>
<li>处理器映射器找到具体的处理器（可以根据 xml 配置、注解进行查找），生成处理器对象以及处理器拦截器（如果有则生成）一并返回给 DispatcherServlet。</li>
<li>DispatcherServlet 调用 HandlerAdapter处理器适配器。</li>
<li>HandlerAdapter 经过适配器调用具体的处理器（Controller，也叫后端控制器）。</li>
<li>Controller 执行完成返回 ModelAndView</li>
<li>HandlerAdapter 将 controller 执行结果 ModelAndView 返回给 DispatcherServlet。</li>
<li>DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。</li>
<li>ViewReslover 解析后返回具体的 View。</li>
<li>DispatcherServlet 根据 View 进行渲染视图（即将模型数据填充至视图中）。</li>
<li>DispatcherServlet 响应用户。</li>
</ol>
]]></content>
      <tags>
        <tag>spring</tag>
        <tag>spring-mvc</tag>
        <tag>mvc</tag>
      </tags>
  </entry>
  <entry>
    <title>单元测试 - Mockito - powermock - 异常测试</title>
    <url>/blogs/test-mockito-exception.html</url>
    <content><![CDATA[<h1 id="单元测试-Mockito-powermock-异常测试"><a href="#单元测试-Mockito-powermock-异常测试" class="headerlink" title="单元测试 - Mockito - powermock - 异常测试"></a>单元测试 - Mockito - powermock - 异常测试</h1><blockquote>
<ul>
<li>原文地址：<a href="https://starrier.starrier.org/blogs/test-mockito-exception.html">https://starrier.starrier.org/blogs/test-mockito-exception.html</a></li>
<li>原文作者：<a href="https://github.com/imperater">imperater</a></li>
<li>本文永久链接：<a href="https://starrier.starrier.org/blogs/test-mockito-exception.html">https://starrier.starrier.org/blogs/test-mockito-exception.html</a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<blockquote>
<ol>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-method.html">单元测试 - Mockito - powermock - 实例函数调用</a></p>
</li>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-static.html">单元测试 - Mockito - powermock - 静态方法</a></p>
</li>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-exception.html">单元测试 - Mockito - powermock - 异常测试</a></p>
</li>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-private.html">单元测试 - Mockito - powermock - 内部私有函数</a></p>
</li>
</ol>
</blockquote>
<h2 id="一-引入-maven-坐标"><a href="#一-引入-maven-坐标" class="headerlink" title="一. 引入 maven 坐标"></a>一. 引入 maven 坐标</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.powermock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>powermock-api-mockito<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>powermock.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.powermock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>powermock-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>powermock.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.powermock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>powermock-module-junit4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>powermock.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<blockquote>
<p>具体的版本，可去 maven 中心仓库自行查找自己想要的</p>
</blockquote>
<h2 id="二-Mock-异常"><a href="#二-Mock-异常" class="headerlink" title="二. Mock 异常"></a>二. Mock 异常</h2><h3 id="1-mock-异常的发生"><a href="#1-mock-异常的发生" class="headerlink" title="1. mock 异常的发生"></a>1. mock 异常的发生</h3><pre class=" language-java"><code class="language-java">Mockito<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>Mockito<span class="token punctuation">.</span><span class="token function">anyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>或者使用</p>
<pre class=" language-java"><code class="language-java"> Mockito<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>Mockito<span class="token punctuation">.</span><span class="token function">anyObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">thenThrow</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="2-对异常进行断言"><a href="#2-对异常进行断言" class="headerlink" title="2. 对异常进行断言"></a>2. 对异常进行断言</h3><h4 id="1）-使用-Test-注解"><a href="#1）-使用-Test-注解" class="headerlink" title="1）. 使用 @Test 注解"></a>1）. 使用 <code>@Test</code> 注解</h4><p>在测试类上加上注解，<code>expected</code> 中的异常为具体的  <code>mock</code>  异常。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span>expected <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></code></pre>
<h4 id="2）-使用-try-catch"><a href="#2）-使用-try-catch" class="headerlink" title="2）. 使用 try-catch"></a>2）. 使用 <code>try-catch</code></h4><h4 id="3）-使用-Rule-结合-JUnit-的-ExpectedException-类"><a href="#3）-使用-Rule-结合-JUnit-的-ExpectedException-类" class="headerlink" title="3）.  使用 @Rule  结合 JUnit 的 ExpectedException 类"></a>3）.  使用 <code>@Rule</code>  结合 <code>JUnit</code> 的 <code>ExpectedException</code> 类</h4><ul>
<li><p>声明全局变量，且为 <code>public</code> 类型</p>
<pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Rule</span>
  <span class="token keyword">public</span> ExpectedException exception <span class="token operator">=</span> ExpectedException<span class="token punctuation">.</span><span class="token function">none</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
</li>
<li><p>在调用方法前，使用断言</p>
</li>
</ul>
<pre class=" language-java"><code class="language-java">exception<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>IOException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <tags>
        <tag>test</tag>
        <tag>mockito</tag>
        <tag>powermock</tag>
      </tags>
  </entry>
  <entry>
    <title>单元测试 - Mockito - powermock -实例函数调用</title>
    <url>/blogs/test-mockito-method.html</url>
    <content><![CDATA[<h1 id="单元测试-Mockito-powermock-实例函数调用"><a href="#单元测试-Mockito-powermock-实例函数调用" class="headerlink" title="单元测试 - Mockito - powermock -实例函数调用"></a>单元测试 - Mockito - powermock -实例函数调用</h1><blockquote>
<ul>
<li>原文地址：<a href="https://starrier.starrier.org/blogs/test-mockito-method.html">https://starrier.starrier.org/blogs/test-mockito-method.html</a></li>
<li>原文作者：<a href="https://github.com/imperater">imperater</a></li>
<li>本文永久链接：<a href="https://starrier.starrier.org/blogs/test-mockito-method.html">https://starrier.starrier.org/blogs/test-mockito-method.html</a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<blockquote>
<ol>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-method.html">单元测试 - Mockito - powermock - 实例函数调用</a> </p>
</li>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-static.html">单元测试 - Mockito - powermock - 静态方法</a> </p>
</li>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-exception.html">单元测试 - Mockito - powermock - 异常测试</a></p>
</li>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-private.html">单元测试 - Mockito - powermock - 内部私有函数</a></p>
</li>
</ol>
</blockquote>
<h2 id="一-引入-Maven-坐标"><a href="#一-引入-Maven-坐标" class="headerlink" title="一. 引入 Maven 坐标"></a>一. 引入 Maven 坐标</h2><pre class=" language-xml"><code class="language-xml">       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.powermock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>powermock-api-mockito<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>powermock.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.powermock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>powermock-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>powermock.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.powermock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>powermock-module-junit4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>powermock.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<blockquote>
<p>具体的版本，可去 maven 中心仓库自行查找自己想要的</p>
</blockquote>
<h2 id="二-测试类声明"><a href="#二-测试类声明" class="headerlink" title="二 测试类声明"></a>二 测试类声明</h2><p>在当前的测试类上，引入下列代码。其中 <code>@PrepareForTest</code>  用于声明所需要引入的静态类（如工具类）。详情参见：<a href="https://starrier.starrier.org/blogs/test-mockito-static.html">单元测试 - Mockito - powermock - 静态方法</a></p>
<pre class=" language-[java]"><code class="language-[java]">@RunWith(PowerMockRunner.class)
@PowerMockRunnerDelegate()
@PowerMockIgnore(&#123;"javax.management.*", "javax.net.ssl.*"&#125;)
@PrepareForTest(&#123;     
&#125;)</code></pre>
<h2 id="三-注入实例"><a href="#三-注入实例" class="headerlink" title="三. 注入实例"></a>三. 注入实例</h2><p>注入对应的实例变量，包括待测试的类以及对应类所引用的实例（需要被 mock 的方法）</p>
<pre class=" language-[java]"><code class="language-[java]">    //  待测试的类
    @InjectMocks
    private TargetService targetService;

    //  需要被 mock 的实例方法
    @Mock
    private TargetDao targetDao;

    // mock 初始化
    @Before
    public void before() throws Exception &#123;
        MockitoAnnotations.initMocks(this);
        MemberModifier
                .field(TargetService.class, "targetDao")
                .set(targetService, targetDao);
    &#125;</code></pre>
<h2 id="四-在-test-中，引入-mock-的数据"><a href="#四-在-test-中，引入-mock-的数据" class="headerlink" title="四.  在 test 中，引入 mock 的数据"></a>四.  在 test 中，引入 mock 的数据</h2><pre class=" language-[java]"><code class="language-[java]"> @Test
 public void saveCertificatePolicy()&#123;
   Mockito
     .when(targetDao.insert(Mockito.any(TargetMapping.class)))
    .thenReturn(new TargetEntity());
   &#125;</code></pre>
<h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><ol>
<li> 如果 Mockito 中，包含多个参数，则要么都为实际参数，要么都是 Mockito 所构造的参数，否则会报错。</li>
<li> 如果对于返回值 <code>thenReturn</code> 需要指定的数据，则自行自己定义并放入即可。</li>
</ol>
]]></content>
      <tags>
        <tag>test</tag>
        <tag>mockito</tag>
        <tag>powermock</tag>
      </tags>
  </entry>
  <entry>
    <title>单元测试 - Mockito - powermock - 内部私有函数</title>
    <url>/blogs/test-mockito-private.html</url>
    <content><![CDATA[<h1 id="单元测试-Mockito-powermock-内部私有函数"><a href="#单元测试-Mockito-powermock-内部私有函数" class="headerlink" title="单元测试 - Mockito - powermock - 内部私有函数"></a>单元测试 - Mockito - powermock - 内部私有函数</h1><blockquote>
<ul>
<li>原文地址：<a href="https://starrier.starrier.org/blogs/test-mockito-private.html">https://starrier.starrier.org/blogs/test-mockito-private.html</a></li>
<li>原文作者：<a href="https://github.com/imperater">imperater</a></li>
<li>本文永久链接：<a href="https://starrier.starrier.org/blogs/test-mockito-private.html">https://starrier.starrier.org/blogs/test-mockito-private.html</a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<blockquote>
<ol>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-method.html">单元测试 - Mockito - powermock - 实例函数调用</a></p>
</li>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-static.html">单元测试 - Mockito - powermock - 静态方法</a></p>
</li>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-exception.html">单元测试 - Mockito - powermock - 异常测试</a></p>
</li>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-private.html">单元测试 - Mockito - powermock - 内部私有函数</a></p>
</li>
</ol>
</blockquote>
<h2 id="第一种方式："><a href="#第一种方式：" class="headerlink" title="第一种方式："></a>第一种方式：</h2><blockquote>
<p>部分版本可能会有问题，未深究。</p>
</blockquote>
<h2 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h2><h5 id="1-首先，我们需要引入相关-maven-依赖。"><a href="#1-首先，我们需要引入相关-maven-依赖。" class="headerlink" title="1. 首先，我们需要引入相关 maven 依赖。"></a>1. 首先，我们需要引入相关 maven 依赖。</h5><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.powermock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>powermock-api-mockito<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>powermock.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.powermock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>powermock-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>powermock.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.powermock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>powermock-module-junit4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>powermock.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h4 id="2-使用注解-Spy-进行方法注入"><a href="#2-使用注解-Spy-进行方法注入" class="headerlink" title="2. 使用注解 @Spy 进行方法注入"></a>2. 使用注解 <code>@Spy</code> 进行方法注入</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Spy</span>
<span class="token keyword">private</span> TestService mockService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h4 id="3-在方法中引用"><a href="#3-在方法中引用" class="headerlink" title="3. 在方法中引用"></a>3. 在方法中引用</h4><pre class=" language-java"><code class="language-java">Whitebox<span class="token punctuation">.</span><span class="token function">invokeMethod</span><span class="token punctuation">(</span>powerMock<span class="token punctuation">,</span> <span class="token string">"getCarOperationService"</span><span class="token punctuation">,</span> vehicleGuidePriceParam<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <tags>
        <tag>test</tag>
        <tag>mockito</tag>
        <tag>powermock</tag>
      </tags>
  </entry>
  <entry>
    <title>单元测试 - Mockito - powermock - 静态方法</title>
    <url>/blogs/test-mockito-static.html</url>
    <content><![CDATA[<h1 id="单元测试-Mockito-powermock-静态方法"><a href="#单元测试-Mockito-powermock-静态方法" class="headerlink" title="单元测试 - Mockito - powermock - 静态方法"></a>单元测试 - Mockito - powermock - 静态方法</h1><blockquote>
<ul>
<li>原文地址：<a href="https://starrier.starrier.org/blogs/test-mockito-static.html">https://starrier.starrier.org/blogs/test-mockito-static.html</a></li>
<li>原文作者：<a href="https://github.com/imperater">imperater</a></li>
<li>本文永久链接：<a href="https://starrier.starrier.org/blogs/test-mockito-static.html">https://starrier.starrier.org/blogs/test-mockito-static.html</a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<blockquote>
<ol>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-method.html">单元测试 - Mockito - powermock - 实例函数调用</a></p>
</li>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-static.html">单元测试 - Mockito - powermock - 静态方法</a></p>
</li>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-exception.html">单元测试 - Mockito - powermock - 异常测试</a></p>
</li>
<li><p><a href="https://starrier.starrier.org/blogs/test-mockito-private.html">单元测试 - Mockito - powermock - 内部私有函数</a></p>
</li>
</ol>
</blockquote>
<h5 id="1-首先，我们需要引入相关-maven-依赖。"><a href="#1-首先，我们需要引入相关-maven-依赖。" class="headerlink" title="1. 首先，我们需要引入相关 maven 依赖。"></a>1. 首先，我们需要引入相关 maven 依赖。</h5><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.powermock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>powermock-api-mockito<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>powermock.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.powermock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>powermock-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>powermock.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.powermock<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>powermock-module-junit4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$<span class="token entity" title="&#123;">&amp;#123;</span>powermock.version<span class="token entity" title="&#125;">&amp;#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<blockquote>
<p>具体 pom 版本，可去 maven 中心仓库选择。</p>
</blockquote>
<h5 id="1-我们需要在测试类上加上需要使用静态类的-class"><a href="#1-我们需要在测试类上加上需要使用静态类的-class" class="headerlink" title="1. 我们需要在测试类上加上需要使用静态类的 class"></a>1. 我们需要在测试类上加上需要使用静态类的 class</h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@PrepareForTest</span><span class="token punctuation">(</span>Utils<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<h5 id="2-在对应需要测试的地方，加上-mock-静态方法的逻辑"><a href="#2-在对应需要测试的地方，加上-mock-静态方法的逻辑" class="headerlink" title="2.  在对应需要测试的地方，加上 mock 静态方法的逻辑"></a>2.  在对应需要测试的地方，加上 mock 静态方法的逻辑</h5><pre class=" language-java"><code class="language-java">  PowerMockito<span class="token punctuation">.</span><span class="token function">mockStatic</span><span class="token punctuation">(</span>RedisProviderHelper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  Mockito<span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>Utils<span class="token punctuation">.</span><span class="token function">getUtils</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
]]></content>
      <tags>
        <tag>test</tag>
        <tag>mockito</tag>
        <tag>powermock</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA - plugin - JRebel</title>
    <url>/blogs/tools-idea-plugins-jrebel.html</url>
    <content><![CDATA[<h1 id="IDEA-plugin-JRebel"><a href="#IDEA-plugin-JRebel" class="headerlink" title="IDEA - plugin - JRebel"></a>IDEA - plugin - JRebel</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<h1 id="IDEA-工具"><a href="#IDEA-工具" class="headerlink" title="IDEA  工具"></a>IDEA  工具</h1><h2 id="JRebel"><a href="#JRebel" class="headerlink" title="JRebel"></a>JRebel</h2><h5 id="1-生成-GUID-的网址"><a href="#1-生成-GUID-的网址" class="headerlink" title="1. 生成 GUID 的网址"></a>1. 生成 GUID 的网址</h5><p><a href="https://www.guidgen.com/">https://www.guidgen.com/</a></p>
<h5 id="2-用这个网址-生成的-GUID-激活"><a href="#2-用这个网址-生成的-GUID-激活" class="headerlink" title="2. 用这个网址 + 生成的 GUID 激活"></a>2. 用这个网址 + 生成的 GUID 激活</h5><p><a href="https://jrebel.qekang.com/">https://jrebel.qekang.com/</a></p>
<pre class=" language-shell"><code class="language-shell">https://jrebel.qekang.com/cb2546bb-9d43-4115-bf4b-10539349efed</code></pre>
<h5 id="3-设置离线模式-来防止失效"><a href="#3-设置离线模式-来防止失效" class="headerlink" title="3. 设置离线模式 来防止失效"></a>3. 设置离线模式 来防止失效</h5><p>File -&gt; Settings -&gt; JRebel -&gt; [Work offline]按钮</p>
]]></content>
      <tags>
        <tag>tools</tag>
        <tag>idea</tag>
        <tag>plugin</tag>
      </tags>
  </entry>
  <entry>
    <title>日常工具-端口占用-Mac-Wind</title>
    <url>/blogs/utils-command-life-port.html</url>
    <content><![CDATA[<h1 id="日常工具-端口占用-Mac-Wind"><a href="#日常工具-端口占用-Mac-Wind" class="headerlink" title="日常工具-端口占用-Mac-Wind"></a>日常工具-端口占用-Mac-Wind</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一-Mac-环境"><a href="#一-Mac-环境" class="headerlink" title="一. Mac 环境"></a>一. Mac 环境</h2><h3 id="1-根据指定端口，查找占用端口的进程的-pid"><a href="#1-根据指定端口，查找占用端口的进程的-pid" class="headerlink" title="1. 根据指定端口，查找占用端口的进程的 pid"></a>1. 根据指定端口，查找占用端口的进程的 pid</h3><pre class=" language-shell"><code class="language-shell">lsof -i:4000</code></pre>
<h5 id="Result"><a href="#Result" class="headerlink" title="Result:"></a>Result:</h5><pre class=" language-shell"><code class="language-shell">starrier:starrier.github.io starrier$ lsof -i:4000
COMMAND  PID     USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME
node    1879 starrier   46u  IPv6 0x8546bfa6d2b2dd07      0t0  TCP *:terabase (LISTEN)</code></pre>
<h3 id="2-解除端口与进程的关联"><a href="#2-解除端口与进程的关联" class="headerlink" title="2. 解除端口与进程的关联"></a>2. 解除端口与进程的关联</h3><pre class=" language-shell"><code class="language-shell">kill -9 1897</code></pre>
<h4 id="lsof-更多的使用方式，参见-lsof-command-命令用法"><a href="#lsof-更多的使用方式，参见-lsof-command-命令用法" class="headerlink" title="lsof 更多的使用方式，参见 lsof command 命令用法"></a><code>lsof</code> 更多的使用方式，参见 <a href="">lsof command 命令用法</a></h4>]]></content>
      <tags>
        <tag>command</tag>
        <tag>utils</tag>
      </tags>
  </entry>
  <entry>
    <title>utils-gava-lists</title>
    <url>/blogs/utils-gava-lists.html</url>
    <content><![CDATA[<h1 id="工具-Guava-深入理解-Guava-Lists-原理与实战"><a href="#工具-Guava-深入理解-Guava-Lists-原理与实战" class="headerlink" title="工具 - Guava - 深入理解 Guava  Lists 原理与实战"></a>工具 - Guava - 深入理解 Guava  Lists 原理与实战</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
  </entry>
  <entry>
    <title>使用 git cherry-pick 获取指定提交内容</title>
    <url>/blogs/utils-git-cherry-pick.html</url>
    <content><![CDATA[<h1 id="使用-git-cherry-pick-获取指定提交内容"><a href="#使用-git-cherry-pick-获取指定提交内容" class="headerlink" title="使用 git cherry-pick 获取指定提交内容"></a>使用 git cherry-pick 获取指定提交内容</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<p>简而言之，<code>cherry-pick</code> 就是从不同的分支中捡出一个单独的 commit，并把它和你当前的分支合并。如果你以并行方式在处理两个或以上分支，你可能会发现一个在全部分支中都有的 bug。如果你在一个分支中解决了它，你可以使用 <code>cherry-pick</code> 命令把它 commit 到其它分支上去，而不会弄乱其他的文件或 commit。</p>
<p>以我目前做的项目为例，现在有 4 个开发者维护着四个分支，以自己的用户名命名，开发出一个特性后定时合并到 dev 分支。并且规定各自分支不能将合并后的 dev 分支代码合并回自己分支，以免发生混乱。但是这样就有个问题，比如 A 开发出一个特性，B 的后续特性需要依赖 A 开发出来的特性，由于 B 不能合并远程的 dev 分支，故 B 是没有办法获取 A 开发的特性的。</p>
<p>这个时候，<code>cherry-pick</code> 就起作用了，假设 dev 分支上 A 最近一次提交为 <code>hash-1</code>，B 就可以在自己分支上执行 <code>git cherry-pick hash-1</code> 来获取 A 最近一次提交更新的文件，如果没有冲突，B 的分支将自动进行一次与 A 一致的提交，否则进行合并后提交。这时，B 就可以使用 A 开发的特性了。</p>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>cherry-pick</tag>
      </tags>
  </entry>
  <entry>
    <title>git-commit 修改提交的 commit 信息 author</title>
    <url>/blogs/utils-git-commit-author.html</url>
    <content><![CDATA[<h1 id="git-commit-修改提交的-commit-信息-author"><a href="#git-commit-修改提交的-commit-信息-author" class="headerlink" title="git-commit 修改提交的 commit 信息 author"></a>git-commit 修改提交的 commit 信息 author</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<pre class=" language-git"><code class="language-git">git commit --amend --reset-author</code></pre>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>amend</tag>
        <tag>reset</tag>
      </tags>
  </entry>
  <entry>
    <title>git commit 操作详解</title>
    <url>/blogs/utils-git-commit-refactor.html</url>
    <content><![CDATA[<h1 id="Git-commit-已提交-commit-记录的重写"><a href="#Git-commit-已提交-commit-记录的重写" class="headerlink" title="Git - commit 已提交 commit 记录的重写"></a>Git - commit 已提交 commit 记录的重写</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一-修改最新的-commit-信息"><a href="#一-修改最新的-commit-信息" class="headerlink" title="一. 修改最新的 commit 信息"></a>一. 修改最新的 <code>commit</code> 信息</h2><pre class=" language-shell"><code class="language-shell">git commit --amend</code></pre>
<h2 id="二-修改前-N-次提交的-commit-提交信息"><a href="#二-修改前-N-次提交的-commit-提交信息" class="headerlink" title="二. 修改前 N 次提交的 commit 提交信息"></a>二. 修改前 <code>N</code> 次提交的 <code>commit</code> 提交信息</h2><pre class=" language-shell"><code class="language-shell">git rebase -i HEAD ~ n</code></pre>
<p>修改后，保存退出，输入</p>
<pre class=" language-shell"><code class="language-shell">git commit  --amend</code></pre>
<p>保存退出后，继续输入</p>
<pre class=" language-shell"><code class="language-shell">git rebase --continue</code></pre>
<h2 id="三-git-合并-commit-记录"><a href="#三-git-合并-commit-记录" class="headerlink" title="三. git 合并 commit 记录"></a>三. git 合并 commit 记录</h2><p>存在 3 次 commit 记录，hash 值分别为 a，b，c。现在只保留 c 的 commit 记录。</p>
<pre class=" language-log"><code class="language-log">
commit1 a

commit2 b

commit3 c
</code></pre>
<h3 id="1-进行基变操作。"><a href="#1-进行基变操作。" class="headerlink" title="1. 进行基变操作。"></a>1. 进行基变操作。</h3><pre class=" language-git"><code class="language-git">git rebase -i  c</code></pre>
<p>log 文件可能如下:</p>
<pre class=" language-log"><code class="language-log">pick commit1-message
pick commit2-message
pick commit3-message</code></pre>
<p>选择第三个，使用 <code>fixup</code>，我们只保留 3，修改后保存并退出。</p>
<pre class=" language-log"><code class="language-log">pick commit1-message
fixup commit2-message
fixup commit3-message</code></pre>
<h3 id="2-此时，如果需要修改-author-可以进行-commit-–amend"><a href="#2-此时，如果需要修改-author-可以进行-commit-–amend" class="headerlink" title="2. 此时，如果需要修改 author 可以进行 commit –amend"></a>2. 此时，如果需要修改 author 可以进行 commit –amend</h3><pre class=" language-git"><code class="language-git">git commit --amend --reset-author</code></pre>
<p>重新提交信息即可。保存并退出。</p>
<h2 id="过程中，可能存在的问题："><a href="#过程中，可能存在的问题：" class="headerlink" title="过程中，可能存在的问题："></a>过程中，可能存在的问题：</h2><ol>
<li>找不到 hash 值：</li>
</ol>
<ul>
<li>使用 <code>IDEA</code> 自带的 <code>git</code> 工具</li>
<li><code>git-log</code></li>
</ul>
<ol start="2">
<li>如果不慎操作 <code>git reset --hard</code>：</li>
</ol>
<ul>
<li><ol>
<li>使用 <code>git reflog</code> 命令恢复指定版本。git 操作的所有命令所形成的版本，在 relog 中都会有记录。</li>
</ol>
<ul>
<li>使用 <code>git reset -i hash值</code>（想要恢复的版本）</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>rebase</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 git-convert 回滚已经提交的 commit</title>
    <url>/blogs/utils-git-commit-revert.html</url>
    <content><![CDATA[<h1 id="使用-git-convert-回滚已经提交的-commit"><a href="#使用-git-convert-回滚已经提交的-commit" class="headerlink" title="使用 git-convert 回滚已经提交的 commit"></a>使用 git-convert 回滚已经提交的 commit</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一. 简介"></a>一. 简介</h2><p><code>git-revert</code> 用于撤销某次指定提交的操作，被操作的版本，之前和之后的内容（包括 commit 和 history 都会被保留下来）</p>
<h2 id="二-用法"><a href="#二-用法" class="headerlink" title="二. 用法"></a>二. 用法</h2><ol>
<li>对当前版本进行回滚操作</li>
</ol>
<pre class=" language-git"><code class="language-git">git revert HEAD           </code></pre>
<ol start="2">
<li>对上一个版本内容进行回滚</li>
</ol>
<pre class=" language-git"><code class="language-git">git revert HEAD^   </code></pre>
<ol start="3">
<li>对指定版本进行回滚</li>
</ol>
<pre class=" language-git"><code class="language-git">git revert commit hashValue</code></pre>
<h2 id="三-git-revert-和-git-rebase-比较"><a href="#三-git-revert-和-git-rebase-比较" class="headerlink" title="三. git-revert 和 git-rebase 比较"></a>三. git-revert 和 git-rebase 比较</h2><ol>
<li><p><code>git revert</code> 是对之前 <code>commit</code> 内容进行覆盖。而 <code>git reset</code> 是直接删除指定的 <code>commit</code>。</p>
</li>
<li><p>两个命令效果一致：</p>
<ul>
<li><p><code>git-revert</code> 与之前的旧分支合并时，不会有新旧 <code>commit</code> 内容的冲突；</p>
</li>
<li><p><code>git-reset</code> 时，与旧分支合并时，旧分支的 <code>commit</code> 会被引入，有可能会产生冲突。</p>
</li>
</ul>
</li>
<li><p>git reset 是把 <code>HEAD</code> 向后移动了一下，而 <code>git revert</code> 是 <code>HEAD</code> 继续前进，只是新的 <code>commit</code> 的内容和要 <code>revert</code> 的内容正好相反，能够抵消要被 <code>revert</code>的内容。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>git</tag>
        <tag>git-revert</tag>
        <tag>commit</tag>
      </tags>
  </entry>
  <entry>
    <title>gitkeep 文件作用</title>
    <url>/blogs/utils-git-gitkeep.html</url>
    <content><![CDATA[<h1 id="gitkeep-文件作用"><a href="#gitkeep-文件作用" class="headerlink" title="gitkeep 文件作用"></a>gitkeep 文件作用</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<p>git无法追踪一个空文件夹，当用户需要追踪（track)一个空文件夹的时候，按照惯例，大家会把一个称为.gitkeep的文件放在这些文件夹里。</p>
<p>使git忽略一个文件夹下的所有文件，并保留该 文件夹</p>
]]></content>
  </entry>
  <entry>
    <title>使用 git-reset 回滚代码到指定版本</title>
    <url>/blogs/utils-git-reflog.html</url>
    <content><![CDATA[<h1 id="使用-git-reset-回滚代码到指定版本"><a href="#使用-git-reset-回滚代码到指定版本" class="headerlink" title="使用 git-reset 回滚代码到指定版本"></a>使用 git-reset 回滚代码到指定版本</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
<h2 id="一-查看-log-history"><a href="#一-查看-log-history" class="headerlink" title="一. 查看 log history"></a>一. 查看 log history</h2><pre class=" language-shell"><code class="language-shell">git log</code></pre>
<h2 id="二-查看-reflog-history"><a href="#二-查看-reflog-history" class="headerlink" title="二. 查看 reflog history"></a>二. 查看 reflog history</h2><pre class=" language-shell"><code class="language-shell">git reflog</code></pre>
<h2 id="三-选择想要回滚的指定版本"><a href="#三-选择想要回滚的指定版本" class="headerlink" title="三. 选择想要回滚的指定版本"></a>三. 选择想要回滚的指定版本</h2><pre class=" language-shell"><code class="language-shell">git reset --hard hash-value</code></pre>
]]></content>
  </entry>
  <entry>
    <title>Gradle provided 类型</title>
    <url>/blogs/utils-gradle-provided.html</url>
    <content><![CDATA[<h1 id="Gradle-provided-类型"><a href="#Gradle-provided-类型" class="headerlink" title="Gradle provided 类型"></a>Gradle provided 类型</h1><blockquote>
<ul>
<li>原文地址：<a href=""></a></li>
<li>原文作者：<a href=""></a></li>
<li>本文永久链接：<a href=""></a></li>
</ul>
</blockquote>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢 ~~</p>
]]></content>
      <tags>
        <tag>gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>常见 Java 压缩-解压缩算法原理与实践</title>
    <url>/blogs/utils-java-compress.html</url>
    <content><![CDATA[<h1 id="常见-Java-压缩-解压缩算法原理与实践"><a href="#常见-Java-压缩-解压缩算法原理与实践" class="headerlink" title="常见 Java 压缩-解压缩算法原理与实践"></a>常见 Java 压缩-解压缩算法原理与实践</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 PR 谢谢~~</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>comperess</tag>
        <tag>压缩</tag>
      </tags>
  </entry>
  <entry>
    <title>工具类库 - Lombok - 注解 -@Value</title>
    <url>/blogs/utils-lombok-annotation-value.html</url>
    <content><![CDATA[<h1 id="工具类库-Lombok-注解-Value"><a href="#工具类库-Lombok-注解-Value" class="headerlink" title="工具类库 - Lombok - 注解 -@Value"></a>工具类库 - Lombok - 注解 -@Value</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
]]></content>
      <tags>
        <tag>lombok.utils</tag>
      </tags>
  </entry>
  <entry>
    <title>工具类库 - Lombok - 常用注解</title>
    <url>/blogs/utils-lombok-annotations.html</url>
    <content><![CDATA[<h1 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="Data"><a href="#Data" class="headerlink" title="@Data"></a><code>@Data</code></h3><p>注解在类上，会为类的所有属性自动生成 setter/getter、equals、canEqual、hashCode、toString 方法，如果字段属性被声明为 final，则不会为该属性生成个 setter 方法。</p>
<h3 id="Getter-Setter"><a href="#Getter-Setter" class="headerlink" title="@Getter/@Setter"></a><code>@Getter</code>/<code>@Setter</code></h3><p><code>@Data</code> 包含了多种特性，可以单独在属性上注解，来获取 getter/setter 方法。</p>
<h3 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a><code>@NonNull</code></h3><p>该注解在属性或构造器上，Lombok 会生成一个非空的声明，可用于参数校验，可以避免空指针。</p>
<p><code>@NotNull</code> （Bean 的校验框架）注解用在指明一个参数、字段或者方法的返回值不可以为 null，是标准化的。<br><code>@NonNull</code> （缺陷检查框架）变量被其修饰时，IDE 会警告可能有崩溃的风险。这个是一个静态分析的方法，运行时不报任何警告。目前只有 IDEA 支持。</p>
<h3 id="Cleanup"><a href="#Cleanup" class="headerlink" title="@Cleanup"></a><code>@Cleanup</code></h3><p>可以帮我们自动调用 close() 方法。</p>
<pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Cleanup</span> InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token annotation punctuation">@Cleanup</span> OutStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> r <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 在函数签名中添加抛出的异常类型 IOException</span>
InputStream in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      OutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">10000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token keyword">int</span> r <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
          out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>out <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">finally</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>in <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>
<h3 id="EqualsAndHashCode"><a href="#EqualsAndHashCode" class="headerlink" title="@EqualsAndHashCode"></a><code>@EqualsAndHashCode</code></h3><p>默认情况下，会使用所有的非静态和非瞬态的属性来生成 equals 和 hashCode，也可以通过 exclude 注解来排除一些属性。</p>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="@toString"></a><code>@toString</code></h3><p>注解在类上，Lombok 会为类生成一个 toString() 方法，默认情况下，会输出类名，所有属性（按照定义的属性顺序），用 <code>,</code> 隔开。</p>
<p><strong>待添加</strong>：对内部属性的使用场景。</p>
<h3 id="NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor"><a href="#NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor" class="headerlink" title="@NoArgsConstructor/@RequiredArgsConstructor and @AllArgsConstructor"></a><code>@NoArgsConstructor</code>/<code>@RequiredArgsConstructor</code> and <code>@AllArgsConstructor</code></h3><p>无参构造器，部分参数构造器，全参构造器。Lombok 无法实现多种参数构造器的重载。</p>
<h2 id="Lombok-的运行原理"><a href="#Lombok-的运行原理" class="headerlink" title="Lombok 的运行原理"></a>Lombok 的运行原理</h2><p>对注解解析的方式：</p>
<ol>
<li><strong>运行时解析</strong>：必须将 @Retention 设置为 RUNTIME，这样就可以通过反射拿到该注解，java.lang.reflect 反射包提供了一个接口</li>
<li><strong>编译时解析</strong>：编译时有两种，一种是 Annotation Processing Tool，另一种是 Pluggable Annotation API</li>
</ol>
<p>Lombok 使用的是编译时解析的第二种。</p>
<ul>
<li>javac对源代码进行分析，生成了一棵抽象语法树（AST）</li>
<li>运行过程中调用实现了“JSR 269 API”的Lombok程序</li>
<li>此时Lombok就对第一步骤得到的AST进行处理，找到@Data注解所在类对应的语法树（AST），然后修改该语法树（AST），增加getter和setter方法定义的相应树节点</li>
<li>javac使用修改后的抽象语法树（AST）生成字节码文件，即给class增加新的节点（代码块）</li>
</ul>
<h2 id="Lombok-的优缺点"><a href="#Lombok-的优缺点" class="headerlink" title="Lombok 的优缺点"></a>Lombok 的优缺点</h2><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ol>
<li>能通过注解的形式自动生成构造器、getter/setter、equals、hashcode、toString等方法，提高了一定的开发效率</li>
<li>让代码变得简洁，不用过多的去关注相应的方法</li>
<li>属性做修改时，也简化了维护为这些属性所生成的getter/setter方法等</li>
</ol>
<h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ol>
<li>不支持多种参数构造器的重载</li>
<li>虽然省去了手动创建getter/setter方法的麻烦，但大大降低了源代码的可读性和完整性，降低了阅读源代码的舒适度。</li>
</ol>
]]></content>
      <tags>
        <tag>utils</tag>
        <tag>lombok</tag>
      </tags>
  </entry>
  <entry>
    <title>utils-maven-gpg</title>
    <url>/blogs/utils-maven-gpg.html</url>
    <content><![CDATA[<h1 id="GPG-秘钥生成"><a href="#GPG-秘钥生成" class="headerlink" title="GPG 秘钥生成"></a>GPG 秘钥生成</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<pre class=" language-shell"><code class="language-shell">gpg --gen-key</code></pre>
<pre class=" language-shell"><code class="language-shell">gpg --list-keys</code></pre>
]]></content>
      <tags>
        <tag>gpg</tag>
      </tags>
  </entry>
  <entry>
    <title>推送 jar 至 Maven 中心仓库</title>
    <url>/blogs/utils-maven-jar-pub-center.html</url>
    <content><![CDATA[<h1 id="推送-jar-至-Maven-中心仓库"><a href="#推送-jar-至-Maven-中心仓库" class="headerlink" title="推送 jar 至 Maven 中心仓库"></a>推送 jar 至 Maven 中心仓库</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="一"><a href="#一" class="headerlink" title="一."></a>一.</h2>]]></content>
  </entry>
  <entry>
    <title>使用 mvn -Dverbose dependency:tree 查看依赖树 - 解决依赖问题</title>
    <url>/blogs/utils-maven-mvn-dependency-tree.html</url>
    <content><![CDATA[<h1 id="使用-mvn-Dverbose-dependency-tree-查看依赖树-解决依赖问题"><a href="#使用-mvn-Dverbose-dependency-tree-查看依赖树-解决依赖问题" class="headerlink" title="使用 mvn -Dverbose dependency:tree 查看依赖树 - 解决依赖问题"></a>使用 mvn -Dverbose dependency:tree 查看依赖树 - 解决依赖问题</h1><h5 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a><strong>特别说明</strong></h5><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<p>使用 <code>mvn dependency:tree</code> 命令查看当前项目的依赖树，解决依赖问题。</p>
]]></content>
      <tags>
        <tag>maven</tag>
        <tag>mvn</tag>
        <tag>dependency:tree</tag>
      </tags>
  </entry>
  <entry>
    <title>utils-websit-op</title>
    <url>/blogs/utils-websit-op.html</url>
    <content><![CDATA[<h1 id="网站性能优化"><a href="#网站性能优化" class="headerlink" title="网站性能优化"></a>网站性能优化</h1><p>当前文章内容迁移中，如有问题，请提交 <a href="https://github.com/Starrier/starrier.github.io/issues">issues</a> 谢谢~~</p>
<h2 id="JPG，PNG-等替换为使用-webp"><a href="#JPG，PNG-等替换为使用-webp" class="headerlink" title="JPG，PNG 等替换为使用 webp"></a>JPG，PNG 等替换为使用 webp</h2><ol>
<li>下载 <code>cwebp</code></li>
</ol>
<pre class=" language-shell"><code class="language-shell">brew install cwebp</code></pre>
<ol start="2">
<li>在需要替换的目录下，执行替换命令</li>
</ol>
<pre class=" language-shell"><code class="language-shell">cwebp beian-log.png -o beian-log.webp</code></pre>
<ol start="3">
<li>使用 <code>html</code> 支持的标签，替换</li>
</ol>
]]></content>
      <tags>
        <tag>optimize</tag>
        <tag>性能优化</tag>
      </tags>
  </entry>
</search>
